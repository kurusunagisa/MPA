Time	Sum	Command
5591	284446	> builtin source /usr/share/fish/config.fish
74	74	-> set -g IFS \n\ \t
31	31	-> set -qg __fish_added_user_paths
39	39	-> or set -g __fish_added_user_paths
27	27	-> function __fish_default_command_not_found_handler...
60	60	-> set -g version $FISH_VERSION
36	2133	-> if status --is-interactive...
25	25	--> status --is-interactive
29	2072	--> if not contains -- "string" (builtin -n)...
1272	1442	---> not contains -- "string" (builtin -n)
170	170	----> builtin -n
52	601	---> if not set -q NVIM_LISTEN_ADDRESS...
36	36	----> not set -q NVIM_LISTEN_ADDRESS
32	32	----> and not set -q STY
66	66	----> and not string match -q -- 'eterm*' $TERM
131	415	----> and begin
                set -q KONSOLE_PROFILE_NAME # KDE's konsole
                or string match -q -- "*:*" $ITERM_SESSION_ID # Supporting versions of iTerm2 will include a colon here
                or string match -q -- "st-*" $TERM # suckless' st
                or test -n "$VTE_VERSION" -a "$VTE_VERSION" -ge 3600 # Should be all gtk3-vte-based terms after version 3.6.0.0
                or test "$COLORTERM" = truecolor -o "$COLORTERM" = 24bit # slang expects this
            end
31	31	-----> set -q KONSOLE_PROFILE_NAME
52	52	-----> or string match -q -- "*:*" $ITERM_SESSION_ID
55	55	-----> or string match -q -- "st-*" $TERM
76	76	-----> or test -n "$VTE_VERSION" -a "$VTE_VERSION" -ge 3600
70	70	-----> or test "$COLORTERM" = truecolor -o "$COLORTERM" = 24bit
314	314	-> set -l configdir ~/.config
21	53	-> if set -q XDG_CONFIG_HOME...
32	32	--> set -q XDG_CONFIG_HOME
266	266	-> set -l userdatadir ~/.local/share
18	49	-> if set -q XDG_DATA_HOME...
31	31	--> set -q XDG_DATA_HOME
38	38	-> set -l __extra_completionsdir
36	36	-> set -l __extra_functionsdir
35	35	-> set -l __extra_confdir
30	1171	-> if test -f $__fish_datadir/__fish_build_paths.fish...
302	302	--> test -f $__fish_datadir/__fish_build_paths.fish
705	839	--> source $__fish_datadir/__fish_build_paths.fish
50	50	---> set __extra_completionsdir /usr/share/fish/vendor_completions.d
47	47	---> set __extra_functionsdir /usr/share/fish/vendor_functions.d
37	37	---> set __extra_confdir /usr/share/fish/vendor_conf.d
26	170	-> if not set -q fish_function_path...
29	29	--> not set -q fish_function_path
115	115	--> set fish_function_path $configdir/fish/functions $__fish_sysconfdir/functions $__extra_functionsdir $__fish_datadir/functions
26	2440	-> if not contains -- $__fish_datadir/functions $fish_function_path...
2414	2414	--> not contains -- $__fish_datadir/functions $fish_function_path
33	3698	-> if not set -q fish_complete_path...
3514	3514	--> not set -q fish_complete_path
151	151	--> set fish_complete_path $configdir/fish/completions $__fish_sysconfdir/completions $__extra_completionsdir $__fish_datadir/completions $userdatadir/fish/generated_completions
17	111	-> if not contains -- $__fish_datadir/completions $fish_complete_path...
94	94	--> not contains -- $__fish_datadir/completions $fish_complete_path
22	2305	-> if test -d /usr/xpg4/bin...
2283	2283	--> test -d /usr/xpg4/bin
454	454	-> set -g __fish_tmp_path $PATH
22	22	-> function __fish_load_path_helper_paths...
501	501	-> test -r /etc/paths
393	393	-> for pathfile in /etc/paths.d/*...
576	576	-> set -xg PATH $__fish_tmp_path
45	45	-> set -e __fish_tmp_path
2005	2005	-> functions -e __fish_load_path_helper_paths
19	60	-> if set -q MANPATH...
41	41	--> set -q MANPATH
58	58	-> function __fish_reconstruct_path -d "Update PATH when fish_user_paths changes" --on-variable fish_user_paths...
420	1595	-> __fish_reconstruct_path
437	437	--> set -l local_path $PATH
21	21	--> for x in $__fish_added_user_paths...
50	50	--> set -g __fish_added_user_paths
30	99	--> if set -q fish_user_paths...
69	69	---> set -q fish_user_paths
568	568	--> set -xg PATH $local_path
50	50	-> function fish_sigtrap_handler --on-signal TRAP --no-scope-shadowing --description "Signal handler for the TRAP signal. Launches a debug prompt."...
22	22	-> function __fish_on_interactive --on-event fish_prompt...
31	31	-> function . --description 'Evaluate contents of file (deprecated, see "source")' --no-scope-shadowing...
3546	8650	-> __fish_set_locale
4457	4489	--> source /usr/share/fish/functions/__fish_set_locale.fish
32	32	---> function __fish_set_locale...
57	57	--> set -l LOCALE_VARS
72	72	--> set LOCALE_VARS $LOCALE_VARS LANG LANGUAGE LC_CTYPE LC_NUMERIC LC_TIME LC_COLLATE
120	120	--> set LOCALE_VARS $LOCALE_VARS LC_MONETARY LC_MESSAGES LC_PAPER LC_NAME LC_ADDRESS
152	152	--> set LOCALE_VARS $LOCALE_VARS LC_TELEPHONE LC_MEASUREMENT LC_IDENTIFICATION
110	214	--> for locale_var in $LOCALE_VARS LC_ALL...
28	104	---> if set -q $locale_var...
45	45	----> set -q $locale_var
31	31	----> return 0
41	41	-> set -l sourcelist
2962	251208	-> for file in $configdir/fish/conf.d/*.fish $__fish_sysconfdir/conf.d/*.fish $__extra_confdir/*.fish...
939	6773	--> set -l basename (string replace -r '^.*/' '' -- $file)
3135	5834	---> string replace -r '^.*/' '' -- $file
1330	2699	----> source /usr/share/fish/functions/string.fish
23	1369	-----> if not contains string (builtin -n)...
1195	1346	------> not contains string (builtin -n)
151	151	-------> builtin -n
56	56	--> contains -- $basename $sourcelist
60	60	--> set sourcelist $sourcelist $basename
2680	2680	--> [ -f $file -a -r $file ]
698	24344	--> and source $file
3448	23646	---> fisher copy-user-key-bindings
9822	10288	----> source /home/17411/.config/fish/functions/fisher.fish
132	132	-----> set -g fisher_version 3.2.10
52	52	-----> function fisher -a cmd -d "fish package manager"...
24	24	-----> function _fisher_complete...
16	16	-----> function _fisher_copy_user_key_bindings...
14	14	-----> function _fisher_ls...
13	13	-----> function _fisher_fmt...
14	14	-----> function _fisher_help...
24	24	-----> function _fisher_self_update -a file...
15	15	-----> function _fisher_self_uninstall...
23	23	-----> function _fisher_commit -a cmd...
28	28	-----> function _fisher_parse -a mode cmd...
22	22	-----> function _fisher_fetch...
32	32	-----> function _fisher_add -a pkg opts...
23	23	-----> function _fisher_rm -a pkg...
15	15	-----> function _fisher_jobs...
19	19	-----> function _fisher_now -a elapsed...
47	47	----> set -q XDG_CACHE_HOME
355	355	----> or set XDG_CACHE_HOME ~/.cache
36	36	----> set -q XDG_CONFIG_HOME
281	281	----> or set XDG_CONFIG_HOME ~/.config
68	68	----> set -g fish_config $XDG_CONFIG_HOME/fish
60	60	----> set -g fisher_cache $XDG_CACHE_HOME/fisher
57	57	----> set -g fisher_config $XDG_CONFIG_HOME/fisher
32	32	----> set -q fisher_path
54	54	----> or set -g fisher_path $fish_config
55	55	----> set -g fishfile $fish_config/fishfile
217	2828	----> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
25	328	-----> if test ! -d $path...
303	303	------> test ! -d $path
26	410	-----> if test ! -d $path...
384	384	------> test ! -d $path
24	308	-----> if test ! -d $path...
284	284	------> test ! -d $path
23	291	-----> if test ! -d $path...
268	268	------> test ! -d $path
24	321	-----> if test ! -d $path...
297	297	------> test ! -d $path
26	282	-----> if test ! -d $path...
256	256	------> test ! -d $path
31	671	-----> if test ! -d $path...
640	640	------> test ! -d $path
26	335	----> if test ! -e $fisher_path/completions/fisher.fish...
309	309	-----> test ! -e $fisher_path/completions/fisher.fish
34	519	----> if test -e $fisher_path/conf.d/fisher.fish...
416	416	-----> test -e $fisher_path/conf.d/fisher.fish
69	69	-----> switch "$version"...
39	668	----> if test -e "$fisher_path/fishfile"...
336	336	-----> test -e "$fisher_path/fishfile"
293	293	-----> and test ! -e "$fishfile"
73	4515	----> switch "$cmd"...
2402	4442	-----> _fisher_copy_user_key_bindings
24	2016	------> if functions -q fish_user_key_bindings...
1992	1992	-------> functions -q fish_user_key_bindings
24	24	------> function fish_user_key_bindings...
680	849	--> set -l basename (string replace -r '^.*/' '' -- $file)
169	169	---> string replace -r '^.*/' '' -- $file
62	62	--> contains -- $basename $sourcelist
68	68	--> set sourcelist $sourcelist $basename
528	528	--> [ -f $file -a -r $file ]
1417	204087	--> and source $file
20	88	---> if test -z "$Z_DATA"...
68	68	----> test -z "$Z_DATA"
23	319	---> if test ! -e "$Z_DATA"...
296	296	----> test ! -e "$Z_DATA"
18	77	---> if test -z "$Z_CMD"...
59	59	----> test -z "$Z_CMD"
137995	137995	---> set -U ZO_CMD "$Z_CMD"o
29	165	---> if test ! -z $Z_CMD...
89	89	----> test ! -z $Z_CMD
47	47	----> function $Z_CMD -d "jump around"...
21	116	---> if test ! -z $ZO_CMD...
54	54	----> test ! -z $ZO_CMD
41	41	----> function $ZO_CMD -d "open target dir"...
16	55	---> if not set -q Z_EXCLUDE...
39	39	----> not set -q Z_EXCLUDE
1730	63825	---> __z_complete
1639	1708	----> source /home/17411/.config/fish/functions/__z_complete.fish
69	69	-----> function __z_complete -d "add completions"...
815	57441	----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
56626	56626	-----> string replace -r '\|.*' '' < $Z_DATA | string escape
2356	2356	----> complete -c $Z_CMD -a "$__z_marks" -f
88	88	----> complete -c $ZO_CMD -a "$__z_marks" -f
97	97	----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
70	70	----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
66	66	----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
75	75	----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
65	65	----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
65	65	----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
64	64	----> complete -c $Z_CMD -s h -l help   -d "Print help"
30	30	---> function __z_on_variable_pwd --on-variable PWD...
750	910	--> set -l basename (string replace -r '^.*/' '' -- $file)
160	160	---> string replace -r '^.*/' '' -- $file
67	67	--> contains -- $basename $sourcelist
79	79	--> set sourcelist $sourcelist $basename
562	562	--> [ -f $file -a -r $file ]
1159	7121	--> and source $file
46	854	---> for p in /bin /usr/local/bin...
19	405	----> if not contains $p $PATH...
386	386	-----> not contains $p $PATH
18	403	----> if not contains $p $PATH...
385	385	-----> not contains $p $PATH
474	2383	---> __fish_reconstruct_path
772	772	----> set -l local_path $PATH
89	89	----> for x in $__fish_added_user_paths...
141	141	----> set -g __fish_added_user_paths
42	116	----> if set -q fish_user_paths...
74	74	-----> set -q fish_user_paths
791	791	----> set -xg PATH $local_path
35	2682	---> if status is-interactive...
2591	2591	----> status is-interactive
56	56	----> set -x BROWSER cygstart
18	43	---> if status is-login...
25	25	----> status is-login
18	54	-> if not set -q __fish_init_2_3_0...
36	36	--> not set -q __fish_init_2_3_0
16	40	-> if status --is-login...
24	24	--> status --is-login
534	534	> builtin source /etc/fish/config.fish
537	10443	> builtin source /home/17411/.config/fish/config.fish
2856	9906	-> export LSCOLORS=gxfxcxdxbxegedabagacad
1297	1341	--> source /usr/share/fish/functions/export.fish
44	44	---> function export --description 'Set env variable. Alias for `set -gx` for bash compatibility.'...
20	66	--> if not set -q argv[1]...
46	46	---> not set -q argv[1]
56	5643	--> for arg in $argv...
628	765	---> set -l v (string split -m 1 "=" -- $arg)
137	137	----> string split -m 1 "=" -- $arg
530	4822	---> switch (count $v)...
2094	2094	----> count $v
43	2198	----> if contains -- $v[1] PATH CDPATH MANPATH...
60	60	-----> contains -- $v[1] PATH CDPATH MANPATH
1990	1990	-----> true
105	105	-----> set -gx $v[1] $v[2]
2067	2067	> echo $_ " "
2583	447769	> __fish_pwd
847	173902	-> source /usr/share/fish/functions/__fish_pwd.fish
610	173055	--> switch (uname)...
172404	172404	---> uname
41	41	---> function __fish_pwd --description "Show current path"...
271284	271284	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
139	1046999	> __fish_on_interactive
9009	1046821	-> __fish_config_interactive
9350	9451	--> source /usr/share/fish/functions/__fish_config_interactive.fish
101	101	---> function __fish_config_interactive -d "Initializations that should be performed when entering interactive mode"...
32	153811	--> if set -q __fish_config_interactive_done...
153779	153779	---> set -q __fish_config_interactive_done
73	73	--> set -g __fish_config_interactive_done
45	45	--> set -g __fish_active_key_bindings
294	294	--> set -l configdir ~/.config
28	63	--> if set -q XDG_CONFIG_HOME...
35	35	---> set -q XDG_CONFIG_HOME
334	334	--> set -l userdatadir ~/.local/share
22	56	--> if set -q XDG_DATA_HOME...
34	34	---> set -q XDG_DATA_HOME
19	51	--> if not set -q fish_greeting...
32	32	---> not set -q fish_greeting
19	50	--> if not set -q __fish_init_2_39_8...
31	31	---> not set -q __fish_init_2_39_8
33	380	--> if not set -q FISH_UNIT_TESTS_RUNNING...
30	30	---> not set -q FISH_UNIT_TESTS_RUNNING
23	317	---> if not test -d $userdatadir/fish/generated_completions...
294	294	----> not test -d $userdatadir/fish/generated_completions
28	2302	--> if status --is-interactive...
34	34	---> status --is-interactive
41	2240	---> if functions -q fish_greeting...
2021	2021	----> functions -q fish_greeting
81	81	----> test -n "$fish_greeting"
97	97	----> and echo $fish_greeting
52	52	--> function __fish_repaint --on-variable fish_color_cwd --description "Event handler, repaints the prompt when fish_color_cwd changes"...
38	38	--> function __fish_repaint_root --on-variable fish_color_cwd_root --description "Event handler, repaints the prompt when fish_color_cwd_root changes"...
27	562	--> if test -d /etc/init.d...
535	535	---> test -d /etc/init.d
22	65	--> if not set -q fish_key_bindings...
43	43	---> not set -q fish_key_bindings
53	53	--> function __fish_reload_key_bindings -d "Reload key bindings when binding variable change" --on-variable fish_key_bindings...
679	742607	--> __fish_reload_key_bindings
20	134	---> if test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"...
114	114	----> test "$fish_key_bindings" = "$__fish_active_key_bindings" -a -n "$fish_key_bindings"
21	9719	---> if not functions -q "$fish_key_bindings"...
2628	9698	----> not functions -q "$fish_key_bindings"
6995	7070	-----> source /usr/share/fish/functions/fish_vi_key_bindings.fish
75	75	------> function fish_vi_key_bindings --description 'vi-like key bindings for fish'...
92	92	---> set -g __fish_active_key_bindings "$fish_key_bindings"
46	46	---> set -g fish_bind_mode default
36	728418	---> if test "$fish_key_bindings" = fish_default_key_bindings...
60	60	----> test "$fish_key_bindings" = fish_default_key_bindings
3509	728322	----> eval $fish_key_bindings ^/dev/null
1319	1364	-----> source /usr/share/fish/functions/eval.fish
45	45	------> function eval -S -d "Evaluate parameters as a command"...
77	77	-----> set -l status_copy $status
18	18	-----> function __fish_restore_status...
26	103	-----> if not set -q argv[2]...
38	38	------> not set -q argv[2]
39	39	------> switch "$argv[1]"...
43	43	-----> set -l mode
30	102	-----> if status --is-interactive-job-control...
30	30	------> status --is-interactive-job-control
42	42	------> set mode interactive
26	81	-----> if status --is-interactive...
26	26	------> status --is-interactive
29	29	------> status --job-control full
99	131	-----> __fish_restore_status $status_copy
32	32	------> return $argv[1]
77364	722633	-----> echo "begin; $argv "\n" ;end <&3 3<&-" | source 3<&0
66	645269	------> begin; fish_vi_key_bindings 
 ;end <&3 3<&-
6847	645203	-------> fish_vi_key_bindings
34	129	--------> if contains -- -h $argv...
56	56	---------> contains -- -h $argv
39	39	---------> or contains -- --help $argv
51	51	--------> set -l rebind true
38	2428	--------> if test "$argv[1]" = "--no-erase"...
68	68	---------> test "$argv[1]" = "--no-erase"
2322	2322	---------> bind --erase --all
34	115	--------> if test "$fish_key_bindings" != "fish_vi_key_bindings"...
81	81	---------> test "$fish_key_bindings" != "fish_vi_key_bindings"
40	40	--------> set -q fish_escape_delay_ms
56	56	--------> or set -g fish_escape_delay_ms 100
45	45	--------> set -l init_mode insert
68	68	--------> set -l eol_keys \$ g\$
68	68	--------> set -l bol_keys \^ 0 g\^
32	111	--------> if contains -- $argv[1] insert default visual...
45	45	---------> contains -- $argv[1] insert default visual
34	34	---------> set -q argv[1]
88	296943	--------> for mode in insert default visual...
7028	109790	---------> __fish_shared_key_bindings -M $mode
6177	6324	----------> source /usr/share/fish/functions/__fish_shared_key_bindings.fish
61	61	-----------> function __fish_shared_key_bindings -d "Bindings shared between emacs and vi mode"...
52	52	-----------> function __fish_commandline_insert_escaped --description 'Insert the first arg escaped if a second arg is given'...
18	18	-----------> function __fish_start_bracketed_paste...
16	16	-----------> function __fish_stop_bracketed_paste...
40	1162	----------> if contains -- -h $argv...
1052	1052	-----------> contains -- -h $argv
70	70	-----------> or contains -- --help $argv
69	69	----------> bind $argv \cy yank
63	63	----------> bind $argv \ey yank-pop
65	65	----------> bind $argv -k right forward-char
60	60	----------> bind $argv -k left backward-char
64	64	----------> bind $argv \e\[C forward-char
61	61	----------> bind $argv \e\[D backward-char
60	60	----------> bind $argv \eOC forward-char
60	60	----------> bind $argv \eOD backward-char
59	59	----------> bind $argv -k ppage beginning-of-history
59	59	----------> bind $argv -k npage end-of-history
63	63	----------> bind $argv \cx fish_clipboard_copy
1014	1014	----------> bind $argv \cv fish_clipboard_paste
100	100	----------> bind $argv \e cancel
67	67	----------> bind $argv \t complete
66	66	----------> bind $argv --key btab complete-and-search
73	73	----------> bind $argv \e\n "commandline -i \n"
72	72	----------> bind $argv \e\r "commandline -i \n"
61	61	----------> bind $argv -k down down-or-search
63	63	----------> bind $argv -k up up-or-search
65	65	----------> bind $argv \e\[A up-or-search
64	64	----------> bind $argv \e\[B down-or-search
61	61	----------> bind $argv \eOA up-or-search
60	60	----------> bind $argv \eOB down-or-search
63	63	----------> bind $argv \e\eOC nextd-or-forward-word
62	62	----------> bind $argv \e\eOD prevd-or-backward-word
80	80	----------> bind $argv \e\e\[C nextd-or-forward-word
75	75	----------> bind $argv \e\e\[D prevd-or-backward-word
64	64	----------> bind $argv \eO3C nextd-or-forward-word
63	63	----------> bind $argv \eO3D prevd-or-backward-word
64	64	----------> bind $argv \e\[3C nextd-or-forward-word
64	64	----------> bind $argv \e\[3D prevd-or-backward-word
64	64	----------> bind $argv \e\[1\;3C nextd-or-forward-word
64	64	----------> bind $argv \e\[1\;3D prevd-or-backward-word
64	64	----------> bind $argv \e\[1\;9C nextd-or-forward-word
64	64	----------> bind $argv \e\[1\;9D prevd-or-backward-word
70	70	----------> bind $argv \e\eOA history-token-search-backward
65	65	----------> bind $argv \e\eOB history-token-search-forward
65	65	----------> bind $argv \e\e\[A history-token-search-backward
66	66	----------> bind $argv \e\e\[B history-token-search-forward
63	63	----------> bind $argv \eO3A history-token-search-backward
63	63	----------> bind $argv \eO3B history-token-search-forward
65	65	----------> bind $argv \e\[3A history-token-search-backward
64	64	----------> bind $argv \e\[3B history-token-search-forward
65	65	----------> bind $argv \e\[1\;3A history-token-search-backward
66	66	----------> bind $argv \e\[1\;3B history-token-search-forward
65	65	----------> bind $argv \e\[1\;9A history-token-search-backward
65	65	----------> bind $argv \e\[1\;9B history-token-search-forward
64	64	----------> bind $argv \e. history-token-search-backward
62	62	----------> bind $argv \el __fish_list_current_token
75	75	----------> bind $argv \ew 'set tok (commandline -pt); if test $tok[1]; echo; whatis $tok[1]; commandline -f repaint; end'
73	73	----------> bind $argv \cl 'echo -n (clear | string replace \e\[3J ""); commandline -f repaint'
62	62	----------> bind $argv \cc __fish_cancel_commandline
61	61	----------> bind $argv \cu backward-kill-line
63	63	----------> bind $argv \cw backward-kill-path-component
66	66	----------> bind $argv \e\[F end-of-line
66	66	----------> bind $argv \e\[H beginning-of-line
76	76	----------> bind $argv \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
62	62	----------> bind $argv \cd delete-or-exit
64	64	----------> bind $argv -k f1 __fish_man_page
63	63	----------> bind $argv \eh __fish_man_page
72	72	----------> bind $argv \ep '__fish_paginate'
72	72	----------> bind $argv \e\# __fish_toggle_comment_commandline
43	43	----------> bind \ee edit_command_buffer
43	43	----------> bind \ev edit_command_buffer
935	89736	----------> for mode in (bind --list-modes | string match -v paste)...
88528	88528	-----------> bind --list-modes | string match -v paste
150	150	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
123	123	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
94	94	----------> bind -M paste \e\[201~ '__fish_stop_bracketed_paste'
72	72	----------> bind -M paste "" self-insert
91	91	----------> bind -M paste \r "commandline -i \n"
89	89	----------> bind -M paste "'" "__fish_commandline_insert_escaped \' \$__fish_paste_quoted"
85	85	----------> bind -M paste \\ "__fish_commandline_insert_escaped \\\ \$__fish_paste_quoted"
3452	88137	---------> __fish_shared_key_bindings -M $mode
44	183	----------> if contains -- -h $argv...
83	83	-----------> contains -- -h $argv
56	56	-----------> or contains -- --help $argv
68	68	----------> bind $argv \cy yank
64	64	----------> bind $argv \ey yank-pop
67	67	----------> bind $argv -k right forward-char
63	63	----------> bind $argv -k left backward-char
69	69	----------> bind $argv \e\[C forward-char
74	74	----------> bind $argv \e\[D backward-char
60	60	----------> bind $argv \eOC forward-char
58	58	----------> bind $argv \eOD backward-char
63	63	----------> bind $argv -k ppage beginning-of-history
69	69	----------> bind $argv -k npage end-of-history
62	62	----------> bind $argv \cx fish_clipboard_copy
60	60	----------> bind $argv \cv fish_clipboard_paste
61	61	----------> bind $argv \e cancel
61	61	----------> bind $argv \t complete
61	61	----------> bind $argv --key btab complete-and-search
72	72	----------> bind $argv \e\n "commandline -i \n"
70	70	----------> bind $argv \e\r "commandline -i \n"
61	61	----------> bind $argv -k down down-or-search
61	61	----------> bind $argv -k up up-or-search
69	69	----------> bind $argv \e\[A up-or-search
65	65	----------> bind $argv \e\[B down-or-search
58	58	----------> bind $argv \eOA up-or-search
58	58	----------> bind $argv \eOB down-or-search
65	65	----------> bind $argv \e\eOC nextd-or-forward-word
65	65	----------> bind $argv \e\eOD prevd-or-backward-word
64	64	----------> bind $argv \e\e\[C nextd-or-forward-word
64	64	----------> bind $argv \e\e\[D prevd-or-backward-word
64	64	----------> bind $argv \eO3C nextd-or-forward-word
63	63	----------> bind $argv \eO3D prevd-or-backward-word
63	63	----------> bind $argv \e\[3C nextd-or-forward-word
64	64	----------> bind $argv \e\[3D prevd-or-backward-word
68	68	----------> bind $argv \e\[1\;3C nextd-or-forward-word
71	71	----------> bind $argv \e\[1\;3D prevd-or-backward-word
66	66	----------> bind $argv \e\[1\;9C nextd-or-forward-word
66	66	----------> bind $argv \e\[1\;9D prevd-or-backward-word
64	64	----------> bind $argv \e\eOA history-token-search-backward
62	62	----------> bind $argv \e\eOB history-token-search-forward
65	65	----------> bind $argv \e\e\[A history-token-search-backward
65	65	----------> bind $argv \e\e\[B history-token-search-forward
65	65	----------> bind $argv \eO3A history-token-search-backward
63	63	----------> bind $argv \eO3B history-token-search-forward
65	65	----------> bind $argv \e\[3A history-token-search-backward
65	65	----------> bind $argv \e\[3B history-token-search-forward
68	68	----------> bind $argv \e\[1\;3A history-token-search-backward
67	67	----------> bind $argv \e\[1\;3B history-token-search-forward
110	110	----------> bind $argv \e\[1\;9A history-token-search-backward
80	80	----------> bind $argv \e\[1\;9B history-token-search-forward
65	65	----------> bind $argv \e. history-token-search-backward
63	63	----------> bind $argv \el __fish_list_current_token
73	73	----------> bind $argv \ew 'set tok (commandline -pt); if test $tok[1]; echo; whatis $tok[1]; commandline -f repaint; end'
71	71	----------> bind $argv \cl 'echo -n (clear | string replace \e\[3J ""); commandline -f repaint'
61	61	----------> bind $argv \cc __fish_cancel_commandline
60	60	----------> bind $argv \cu backward-kill-line
61	61	----------> bind $argv \cw backward-kill-path-component
66	66	----------> bind $argv \e\[F end-of-line
65	65	----------> bind $argv \e\[H beginning-of-line
74	74	----------> bind $argv \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
67	67	----------> bind $argv \cd delete-or-exit
65	65	----------> bind $argv -k f1 __fish_man_page
63	63	----------> bind $argv \eh __fish_man_page
70	70	----------> bind $argv \ep '__fish_paginate'
63	63	----------> bind $argv \e\# __fish_toggle_comment_commandline
40	40	----------> bind \ee edit_command_buffer
38	38	----------> bind \ev edit_command_buffer
824	80049	----------> for mode in (bind --list-modes | string match -v paste)...
79050	79050	-----------> bind --list-modes | string match -v paste
101	101	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
74	74	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
56	56	----------> bind -M paste \e\[201~ '__fish_stop_bracketed_paste'
49	49	----------> bind -M paste "" self-insert
55	55	----------> bind -M paste \r "commandline -i \n"
74	74	----------> bind -M paste "'" "__fish_commandline_insert_escaped \' \$__fish_paste_quoted"
58	58	----------> bind -M paste \\ "__fish_commandline_insert_escaped \\\ \$__fish_paste_quoted"
2749	98928	---------> __fish_shared_key_bindings -M $mode
51	173	----------> if contains -- -h $argv...
64	64	-----------> contains -- -h $argv
58	58	-----------> or contains -- --help $argv
72	72	----------> bind $argv \cy yank
67	67	----------> bind $argv \ey yank-pop
71	71	----------> bind $argv -k right forward-char
70	70	----------> bind $argv -k left backward-char
72	72	----------> bind $argv \e\[C forward-char
70	70	----------> bind $argv \e\[D backward-char
63	63	----------> bind $argv \eOC forward-char
61	61	----------> bind $argv \eOD backward-char
69	69	----------> bind $argv -k ppage beginning-of-history
68	68	----------> bind $argv -k npage end-of-history
66	66	----------> bind $argv \cx fish_clipboard_copy
66	66	----------> bind $argv \cv fish_clipboard_paste
65	65	----------> bind $argv \e cancel
65	65	----------> bind $argv \t complete
69	69	----------> bind $argv --key btab complete-and-search
77	77	----------> bind $argv \e\n "commandline -i \n"
76	76	----------> bind $argv \e\r "commandline -i \n"
67	67	----------> bind $argv -k down down-or-search
68	68	----------> bind $argv -k up up-or-search
71	71	----------> bind $argv \e\[A up-or-search
70	70	----------> bind $argv \e\[B down-or-search
62	62	----------> bind $argv \eOA up-or-search
62	62	----------> bind $argv \eOB down-or-search
148	148	----------> bind $argv \e\eOC nextd-or-forward-word
79	79	----------> bind $argv \e\eOD prevd-or-backward-word
71	71	----------> bind $argv \e\e\[C nextd-or-forward-word
69	69	----------> bind $argv \e\e\[D prevd-or-backward-word
69	69	----------> bind $argv \eO3C nextd-or-forward-word
69	69	----------> bind $argv \eO3D prevd-or-backward-word
70	70	----------> bind $argv \e\[3C nextd-or-forward-word
70	70	----------> bind $argv \e\[3D prevd-or-backward-word
74	74	----------> bind $argv \e\[1\;3C nextd-or-forward-word
72	72	----------> bind $argv \e\[1\;3D prevd-or-backward-word
72	72	----------> bind $argv \e\[1\;9C nextd-or-forward-word
89	89	----------> bind $argv \e\[1\;9D prevd-or-backward-word
68	68	----------> bind $argv \e\eOA history-token-search-backward
66	66	----------> bind $argv \e\eOB history-token-search-forward
67	67	----------> bind $argv \e\e\[A history-token-search-backward
68	68	----------> bind $argv \e\e\[B history-token-search-forward
67	67	----------> bind $argv \eO3A history-token-search-backward
67	67	----------> bind $argv \eO3B history-token-search-forward
68	68	----------> bind $argv \e\[3A history-token-search-backward
68	68	----------> bind $argv \e\[3B history-token-search-forward
70	70	----------> bind $argv \e\[1\;3A history-token-search-backward
70	70	----------> bind $argv \e\[1\;3B history-token-search-forward
69	69	----------> bind $argv \e\[1\;9A history-token-search-backward
89	89	----------> bind $argv \e\[1\;9B history-token-search-forward
65	65	----------> bind $argv \e. history-token-search-backward
63	63	----------> bind $argv \el __fish_list_current_token
88	88	----------> bind $argv \ew 'set tok (commandline -pt); if test $tok[1]; echo; whatis $tok[1]; commandline -f repaint; end'
196	196	----------> bind $argv \cl 'echo -n (clear | string replace \e\[3J ""); commandline -f repaint'
180	180	----------> bind $argv \cc __fish_cancel_commandline
151	151	----------> bind $argv \cu backward-kill-line
118	118	----------> bind $argv \cw backward-kill-path-component
99	99	----------> bind $argv \e\[F end-of-line
76	76	----------> bind $argv \e\[H beginning-of-line
80	80	----------> bind $argv \ed 'set -l cmd (commandline); if test -z "$cmd"; echo; dirh; commandline -f repaint; else; commandline -f kill-word; end'
62	62	----------> bind $argv \cd delete-or-exit
70	70	----------> bind $argv -k f1 __fish_man_page
68	68	----------> bind $argv \eh __fish_man_page
75	75	----------> bind $argv \ep '__fish_paginate'
69	69	----------> bind $argv \e\# __fish_toggle_comment_commandline
42	42	----------> bind \ee edit_command_buffer
40	40	----------> bind \ev edit_command_buffer
1965	90823	----------> for mode in (bind --list-modes | string match -v paste)...
88578	88578	-----------> bind --list-modes | string match -v paste
105	105	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
79	79	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
96	96	-----------> bind -M $mode -m paste \e\[200~ '__fish_start_bracketed_paste'
59	59	----------> bind -M paste \e\[201~ '__fish_stop_bracketed_paste'
50	50	----------> bind -M paste "" self-insert
59	59	----------> bind -M paste \r "commandline -i \n"
59	59	----------> bind -M paste "'" "__fish_commandline_insert_escaped \' \$__fish_paste_quoted"
58	58	----------> bind -M paste \\ "__fish_commandline_insert_escaped \\\ \$__fish_paste_quoted"
53	53	--------> bind -M insert \r execute
50	50	--------> bind -M insert \n execute
48	48	--------> bind -M insert "" self-insert
47	47	--------> bind -M insert \cc __fish_cancel_commandline
61	61	--------> bind -M insert \e "if commandline -P; commandline -f cancel; else; set fish_bind_mode default; commandline -f backward-char force-repaint; end"
43	43	--------> bind :q exit
48	48	--------> bind -m insert \cc __fish_cancel_commandline
43	43	--------> bind -M default h backward-char
43	43	--------> bind -M default l forward-char
50	50	--------> bind -m insert \n execute
50	50	--------> bind -m insert \r execute
43	43	--------> bind -m insert i force-repaint
937	937	--------> bind -m insert I beginning-of-line force-repaint
96	96	--------> bind -m insert a forward-char force-repaint
49	49	--------> bind -m insert A end-of-line force-repaint
47	47	--------> bind -m visual v begin-selection force-repaint
43	43	--------> bind gg beginning-of-buffer
40	40	--------> bind G end-of-buffer
89	197	--------> for key in $eol_keys...
52	52	---------> bind $key end-of-line
56	56	---------> bind $key end-of-line
104	259	--------> for key in $bol_keys...
50	50	---------> bind $key beginning-of-line
51	51	---------> bind $key beginning-of-line
54	54	---------> bind $key beginning-of-line
41	41	--------> bind u history-search-backward
48	48	--------> bind \cr history-search-forward
41	41	--------> bind [ history-token-search-backward
41	41	--------> bind ] history-token-search-forward
39	39	--------> bind k up-or-search
912	912	--------> bind j down-or-search
51	51	--------> bind b backward-word
40	40	--------> bind B backward-bigword
42	42	--------> bind ge backward-word
43	43	--------> bind gE backward-bigword
43	43	--------> bind w forward-word forward-char
44	44	--------> bind W forward-bigword forward-char
44	44	--------> bind e forward-char forward-word backward-char
43	43	--------> bind E forward-bigword backward-char
73	73	--------> bind -M insert -k home beginning-of-line 2>/dev/null
67	67	--------> bind -M default -k home beginning-of-line 2>/dev/null
64	64	--------> bind -M insert -k end end-of-line 2>/dev/null
63	63	--------> bind -M default -k end end-of-line 2>/dev/null
51	51	--------> bind -M default x delete-char forward-char backward-char
45	45	--------> bind -M default X backward-delete-char
64	64	--------> bind -M insert -k dc delete-char forward-char backward-char
63	63	--------> bind -M default -k dc delete-char forward-char backward-char
920	920	--------> bind -M insert -k backspace backward-delete-char
66	66	--------> bind -M default -k backspace backward-char
52	52	--------> bind -M insert \ch backward-delete-char
47	47	--------> bind -M default \ch backward-char
52	52	--------> bind -M insert \x7f backward-delete-char
53	53	--------> bind -M default \x7f backward-char
65	65	--------> bind -M insert \e\[3\;2~ backward-delete-char
65	65	--------> bind -M default \e\[3\;2~ backward-delete-char
44	44	--------> bind dd kill-whole-line
41	41	--------> bind D kill-line
52	52	--------> bind d\$ kill-line
52	52	--------> bind d\^ backward-kill-line
43	43	--------> bind dw kill-word
43	43	--------> bind dW kill-bigword
53	53	--------> bind diw forward-char forward-char backward-word kill-word
53	53	--------> bind diW forward-char forward-char backward-bigword kill-bigword
53	53	--------> bind daw forward-char forward-char backward-word kill-word
1125	1125	--------> bind daW forward-char forward-char backward-bigword kill-bigword
103	103	--------> bind de kill-word
77	77	--------> bind dE kill-bigword
71	71	--------> bind db backward-kill-word
89	89	--------> bind dB backward-kill-bigword
121	121	--------> bind dge backward-kill-word
183	183	--------> bind dgE backward-kill-bigword
56	56	--------> bind -m insert s delete-char force-repaint
1122	1122	--------> bind -m insert S kill-whole-line force-repaint
84	84	--------> bind -m insert cc kill-whole-line force-repaint
55	55	--------> bind -m insert C kill-line force-repaint
70	70	--------> bind -m insert c\$ kill-line force-repaint
127	127	--------> bind -m insert c\^ backward-kill-line force-repaint
51	51	--------> bind -m insert cw kill-word force-repaint
51	51	--------> bind -m insert cW kill-bigword force-repaint
60	60	--------> bind -m insert ciw forward-char forward-char backward-word kill-word force-repaint
58	58	--------> bind -m insert ciW forward-char forward-char backward-bigword kill-bigword force-repaint
56	56	--------> bind -m insert caw forward-char forward-char backward-word kill-word force-repaint
56	56	--------> bind -m insert caW forward-char forward-char backward-bigword kill-bigword force-repaint
49	49	--------> bind -m insert ce kill-word force-repaint
67	67	--------> bind -m insert cE kill-bigword force-repaint
53	53	--------> bind -m insert cb backward-kill-word force-repaint
51	51	--------> bind -m insert cB backward-kill-bigword force-repaint
54	54	--------> bind -m insert cge backward-kill-word force-repaint
53	53	--------> bind -m insert cgE backward-kill-bigword force-repaint
52	52	--------> bind '~' capitalize-word
45	45	--------> bind gu downcase-word
44	44	--------> bind gU upcase-word
44	44	--------> bind J end-of-line delete-char
53	53	--------> bind K 'man (commandline -t) ^/dev/null; or echo -n \a'
47	47	--------> bind yy kill-whole-line yank
44	44	--------> bind Y kill-whole-line yank
55	55	--------> bind y\$ kill-line yank
56	56	--------> bind y\^ backward-kill-line yank
46	46	--------> bind yw kill-word yank
47	47	--------> bind yW kill-bigword yank
945	945	--------> bind yiw forward-char forward-char backward-word kill-word yank
76	76	--------> bind yiW forward-char forward-char backward-bigword kill-bigword yank
58	58	--------> bind yaw forward-char forward-char backward-word kill-word yank
56	56	--------> bind yaW forward-char forward-char backward-bigword kill-bigword yank
48	48	--------> bind ye kill-word yank
49	49	--------> bind yE kill-bigword yank
49	49	--------> bind yb backward-kill-word yank
49	49	--------> bind yB backward-kill-bigword yank
50	50	--------> bind yge backward-kill-word yank
51	51	--------> bind ygE backward-kill-bigword yank
42	42	--------> bind f forward-jump
42	42	--------> bind F backward-jump
47	47	--------> bind t forward-jump and backward-char
47	47	--------> bind T backward-jump and forward-char
43	43	--------> bind p yank
45	45	--------> bind P backward-char yank
46	46	--------> bind gp yank-pop
69	69	--------> bind '"*p' "commandline -i ( xsel -p; echo )[1]"
948	948	--------> bind '"*P' backward-char "commandline -i ( xsel -p; echo )[1]"
62	62	--------> bind -m replace_one r force-repaint
64	64	--------> bind -M replace_one -m default '' delete-char self-insert backward-char force-repaint
65	65	--------> bind -M replace_one -m default \e cancel force-repaint
49	49	--------> bind -M visual h backward-char
48	48	--------> bind -M visual l forward-char
47	47	--------> bind -M visual k up-line
48	48	--------> bind -M visual j down-line
47	47	--------> bind -M visual b backward-word
46	46	--------> bind -M visual B backward-bigword
51	51	--------> bind -M visual ge backward-word
51	51	--------> bind -M visual gE backward-bigword
47	47	--------> bind -M visual w forward-word
48	48	--------> bind -M visual W forward-bigword
48	48	--------> bind -M visual e forward-word
48	48	--------> bind -M visual E forward-bigword
50	50	--------> bind -M visual o swap-selection-start-stop force-repaint
977	1121	--------> for key in $eol_keys...
77	77	---------> bind -M visual $key end-of-line
67	67	---------> bind -M visual $key end-of-line
103	288	--------> for key in $bol_keys...
60	60	---------> bind -M visual $key beginning-of-line
60	60	---------> bind -M visual $key beginning-of-line
65	65	---------> bind -M visual $key beginning-of-line
58	58	--------> bind -M visual -m insert c kill-selection end-selection force-repaint
58	58	--------> bind -M visual -m default d kill-selection end-selection force-repaint
57	57	--------> bind -M visual -m default x kill-selection end-selection force-repaint
57	57	--------> bind -M visual -m default X kill-whole-line end-selection force-repaint
60	60	--------> bind -M visual -m default y kill-selection yank end-selection force-repaint
81	81	--------> bind -M visual -m default '"*y' "commandline -s | xsel -p" end-selection force-repaint
57	57	--------> bind -M visual -m default \cc end-selection force-repaint
62	62	--------> bind -M visual -m default \e end-selection force-repaint
79	79	--------> bind -M default \# __fish_toggle_comment_commandline
68	68	--------> bind -M visual \# __fish_toggle_comment_commandline
5226	322155	--------> fish_vi_cursor
2761	2852	---------> source /usr/share/fish/functions/fish_vi_cursor.fish
91	91	----------> function fish_vi_cursor -d 'Set cursor shape for different vi modes'...
34	117	---------> if set -q INSIDE_EMACS...
83	83	----------> set -q INSIDE_EMACS
38	74	---------> if set -q VTE_VERSION...
36	36	----------> set -q VTE_VERSION
108	313886	---------> if not tput Ss >/dev/null ^/dev/null...
137227	137227	----------> not tput Ss >/dev/null ^/dev/null
92	176523	----------> or begin
            # TERM = xterm is special because plenty of things claim to be it, but aren't fully compatible
            # This includes old vte-terms (without $VTE_VERSION), old xterms (without $XTERM_VERSION or < 280)
            # and maybe other stuff.
            # This needs to be kept _at least_ as long as Ubuntu 14.04 is still a thing
            # because that ships a gnome-terminal without support and without $VTE_VERSION.
            string match -q 'xterm*' -- $TERM
            and not begin set -q KONSOLE_PROFILE_NAME
                or set -q ITERM_PROFILE
                or set -q VTE_VERSION # which version is already checked above
                # If $XTERM_VERSION is undefined, this will return 1 and print an error. Silence it.
                or test (string replace -r "XTerm\((\d+)\)" '$1' -- $XTERM_VERSION) -ge 280 ^/dev/null
            end
        end
94	94	-----------> string match -q 'xterm*' -- $TERM
145	176337	-----------> and not begin set -q KONSOLE_PROFILE_NAME
                or set -q ITERM_PROFILE
                or set -q VTE_VERSION # which version is already checked above
                # If $XTERM_VERSION is undefined, this will return 1 and print an error. Silence it.
                or test (string replace -r "XTerm\((\d+)\)" '$1' -- $XTERM_VERSION) -ge 280 ^/dev/null
            end
134344	134344	------------> set -q KONSOLE_PROFILE_NAME
67	67	------------> or set -q ITERM_PROFILE
38	38	------------> or set -q VTE_VERSION
41574	41743	------------> or test (string replace -r "XTerm\((\d+)\)" '$1' -- $XTERM_VERSION) -ge 280 ^/dev/null
169	169	-------------> string replace -r "XTerm\((\d+)\)" '$1' -- $XTERM_VERSION
28	28	----------> return
84	84	--------> set fish_bind_mode $init_mode
124	124	-----> set -l res $status
82	82	-----> status --job-control $mode
55	55	-----> return $res
34	3519	---> if functions --query fish_user_key_bindings >/dev/null...
57	57	----> functions --query fish_user_key_bindings >/dev/null
279	3428	----> fish_user_key_bindings ^/dev/null
1046	1046	-----> for file in $fisher_path/conf.d/*_key_bindings.fish...
26	2103	-----> if functions -q fish_user_key_bindings_copy...
2077	2077	------> functions -q fish_user_key_bindings_copy
42	2254	--> if not set -q FISH_UNIT_TESTS_RUNNING...
46	46	---> not set -q FISH_UNIT_TESTS_RUNNING
28	28	---> function __fish_enable_bracketed_paste --on-event fish_prompt...
42	42	---> function __fish_disable_bracketed_paste --on-event fish_preexec --on-process-exit %self...
91	2096	---> __fish_enable_bracketed_paste
2005	2005	----> printf "\e[?2004h"
53	53	--> function __fish_winch_handler --on-signal WINCH -d "Repaint screen when window changes size"...
40	40	--> set -q VTE_VERSION
48	48	--> or set -l VTE_VERSION 0
30	30	--> set -q TERM_PROGRAM
38	38	--> or set -l TERM_PROGRAM
23	155	--> if test "$VTE_VERSION" -ge 3405 -o "$TERM_PROGRAM" = "Apple_Terminal" -o "$TERM_PROGRAM" = "iTerm.app"...
132	132	---> test "$VTE_VERSION" -ge 3405 -o "$TERM_PROGRAM" = "Apple_Terminal" -o "$TERM_PROGRAM" = "iTerm.app"
46	124907	--> if not type -q __fish_command_not_found_handler...
4511	46916	---> not type -q __fish_command_not_found_handler
2978	3026	----> source /usr/share/fish/functions/type.fish
48	48	-----> function type --description 'Print the type of a command'...
53	53	----> set -q argv[1]
123	123	----> set -l options 'h/help' 'a/all' 'f/no-functions' 't/type' 'p/path' 'P/force-path' 'q/quiet'
2449	2449	----> argparse -n type --min-args=1 -x t,p,P $options -- $argv
24	64	----> if set -q _flag_help...
40	40	-----> set -q _flag_help
56	56	----> set -l res 1
41	41	----> set -l mode normal
39	39	----> set -l multi no
40	40	----> set -l selection all
30	94	----> if set -q _flag_quiet...
27	27	-----> set -q _flag_quiet
37	37	-----> set mode quiet
29	29	----> set -q _flag_all
28	28	----> set -q _flag_no_functions
81	36333	----> for i in $argv...
40	40	-----> set -l found 0
31	4875	-----> if test $selection != files...
52	52	------> test $selection != files
29	3365	------> if functions -q -- $i...
3336	3336	-------> functions -q -- $i
26	1427	------> if contains -- $i (builtin -n)...
1262	1401	-------> contains -- $i (builtin -n)
139	139	--------> builtin -n
50	50	-----> set -l paths
33	31125	-----> if test $multi != yes...
52	52	------> test $multi != yes
560	31040	------> set paths (command -s -- $i)
30480	30480	-------> command -s -- $i
24	24	-----> for path in $paths...
29	138	-----> if test $found = 0...
60	60	------> test $found = 0
49	49	------> and test $mode != quiet
30	30	----> return $res
43	43	---> set -l os
32	754	---> if test -r /etc/os-release...
722	722	----> test -r /etc/os-release
111	77148	---> if contains -- suse $os...
62	62	----> contains -- suse $os
727	727	----> test -f /usr/libexec/pk-command-not-found
565	565	----> test -f /usr/lib/command-not-found
1061	1061	----> test -f /run/current-system/sw/bin/command-not-found
1758	37374	----> type -q command-not-found
43	43	-----> set -q argv[1]
120	120	-----> set -l options 'h/help' 'a/all' 'f/no-functions' 't/type' 'p/path' 'P/force-path' 'q/quiet'
216	216	-----> argparse -n type --min-args=1 -x t,p,P $options -- $argv
22	57	-----> if set -q _flag_help...
35	35	------> set -q _flag_help
41	41	-----> set -l res 1
40	40	-----> set -l mode normal
40	40	-----> set -l multi no
39	39	-----> set -l selection all
30	95	-----> if set -q _flag_quiet...
28	28	------> set -q _flag_quiet
37	37	------> set mode quiet
30	30	-----> set -q _flag_all
27	27	-----> set -q _flag_no_functions
80	34838	-----> for i in $argv...
40	40	------> set -l found 0
30	3583	------> if test $selection != files...
50	50	-------> test $selection != files
25	2098	-------> if functions -q -- $i...
2073	2073	--------> functions -q -- $i
26	1405	-------> if contains -- $i (builtin -n)...
1240	1379	--------> contains -- $i (builtin -n)
139	139	---------> builtin -n
49	49	------> set -l paths
32	30925	------> if test $multi != yes...
53	53	-------> test $multi != yes
614	30840	-------> set paths (command -s -- $i)
30226	30226	--------> command -s -- $i
25	25	------> for path in $paths...
30	136	------> if test $found = 0...
57	57	-------> test $found = 0
49	49	-------> and test $mode != quiet
30	30	-----> return $res
1780	37217	----> type -p -q pkgfile
44	44	-----> set -q argv[1]
118	118	-----> set -l options 'h/help' 'a/all' 'f/no-functions' 't/type' 'p/path' 'P/force-path' 'q/quiet'
238	238	-----> argparse -n type --min-args=1 -x t,p,P $options -- $argv
21	56	-----> if set -q _flag_help...
35	35	------> set -q _flag_help
41	41	-----> set -l res 1
40	40	-----> set -l mode normal
40	40	-----> set -l multi no
59	59	-----> set -l selection all
30	96	-----> if set -q _flag_quiet...
28	28	------> set -q _flag_quiet
38	38	------> set mode quiet
30	30	-----> set -q _flag_all
27	27	-----> set -q _flag_no_functions
79	34618	-----> for i in $argv...
40	40	------> set -l found 0
32	4179	------> if test $selection != files...
50	50	-------> test $selection != files
96	2665	-------> if functions -q -- $i...
2569	2569	--------> functions -q -- $i
28	1432	-------> if contains -- $i (builtin -n)...
1256	1404	--------> contains -- $i (builtin -n)
148	148	---------> builtin -n
51	51	------> set -l paths
34	30107	------> if test $multi != yes...
54	54	-------> test $multi != yes
628	30019	-------> set paths (command -s -- $i)
29391	29391	--------> command -s -- $i
25	25	------> for path in $paths...
30	137	------> if test $found = 0...
58	58	-------> test $found = 0
49	49	-------> and test $mode != quiet
30	30	-----> return $res
31	31	----> function __fish_command_not_found_handler --on-event fish_command_not_found...
39	39	-> functions -e __fish_on_interactive
1134	1176	> source /usr/share/fish/vendor_functions.d/fish_prompt.fish
42	42	-> function fish_prompt --description "Write out the prompt"...
688	728	> source /usr/share/fish/functions/fish_mode_prompt.fish
40	40	-> function fish_mode_prompt --description "Displays the current mode"...
114	6651	> fish_mode_prompt
2773	6537	-> fish_default_mode_prompt
1166	1206	--> source /usr/share/fish/functions/fish_default_mode_prompt.fish
40	40	---> function fish_default_mode_prompt --description "Display the default mode for the prompt"...
59	2558	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
115	115	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
63	2244	---> switch $fish_bind_mode...
2091	2091	----> set_color --bold --background green white
90	90	----> echo '[I]'
72	72	---> set_color normal
68	68	---> echo -n ' '
427	959315	> fish_prompt
104	104	-> set -l color_cwd
66	66	-> set -l suffix
1035	579859	-> switch (prompt_iamroot)...
2554	443266	--> prompt_iamroot
847	440620	---> source /usr/share/fish/vendor_functions.d/prompt_iamroot.fish
37	439743	----> if not set -q __fish_prompt_iamroot...
87	87	-----> not set -q __fish_prompt_iamroot
701	439619	-----> set -g __fish_prompt_iamroot (iamroot; and echo yes; or echo no)
2178	438815	------> iamroot
827	887	-------> source /usr/share/fish/vendor_functions.d/iamroot.fish
60	60	--------> function iamroot --description "True if the user has admin privileges, else false"...
180446	435750	-------> id -G | grep -qE '\<544\>'
1363	153801	--------> source /usr/share/fish/functions/grep.fish
75	152438	---------> if echo | command grep --color=auto "" >/dev/null 2>&1...
152327	152327	----------> echo | command grep --color=auto "" >/dev/null 2>&1
36	36	----------> function grep...
101503	101503	--------> command grep --color=auto $argv
103	103	------> or echo no
30	30	----> function prompt_iamroot...
92	92	---> echo $__fish_prompt_iamroot
135459	135459	--> set color_cwd $fish_color_cwd
99	99	--> set suffix '>'
2399	378859	-> echo -n -s "$USER" @ (prompt_hostname) ' ' (set_color $color_cwd) (prompt_pwd) (set_color normal) "$suffix "
2545	234236	--> prompt_hostname
889	231594	---> source /usr/share/fish/functions/prompt_hostname.fish
34	230682	----> if not set -q __fish_prompt_hostname...
94	94	-----> not set -q __fish_prompt_hostname
714	230554	-----> set -g __fish_prompt_hostname (hostname | string split '.')[1]
56181	229840	------> hostname | string split '.'
836	173550	-------> source /usr/share/fish/functions/hostname.fish
94	94	--------> set -q USERDOMAIN
753	172620	--------> and switch (uname)
    case 'CYGWIN_*'
        # Cygwin's hostname is broken when computer name contains Unicode
        # characters. This hack "fixes" hostname in Cygwin.
        function hostname --description "Show or set the system's host name"
            echo $USERDOMAIN
        end
end
171822	171822	---------> uname
45	45	---------> function hostname --description "Show or set the system's host name"...
109	109	-------> echo $USERDOMAIN
23	23	----> function prompt_hostname...
97	97	---> echo $__fish_prompt_hostname
121	121	--> set_color $color_cwd
3857	142003	--> prompt_pwd
1183	1229	---> source /usr/share/fish/functions/prompt_pwd.fish
46	46	----> function prompt_pwd --description "Print the current working directory, shortened to fit the prompt"...
104	104	---> set -l options 'h/help'
118	118	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
35	135026	---> if set -q _flag_help...
134991	134991	----> set -q _flag_help
90	90	---> set -q fish_prompt_pwd_dir_length
95	95	---> or set -l fish_prompt_pwd_dir_length 1
332	332	---> set realhome ~
690	865	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
175	175	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	287	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
91	91	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
160	160	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
100	100	--> set_color normal
104	104	> echo $_ " "
171	146830	> __fish_pwd
146659	146659	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
3932	9721	> source /usr/share/fish/completions/vim.fish
130	130	-> complete -c vim -s c -r --description 'Execute Ex command after the first file has been read'
122	122	-> complete -c vim -s S -r --description 'Source file after the first file has been read'
85	85	-> complete -c vim -l cmd -r --description 'Execute Ex command before loading any vimrc'
80	80	-> complete -c vim -s d -r --description 'Use device as terminal (Amiga only)'
78	78	-> complete -c vim -s i -r --description 'Set the viminfo file location'
78	78	-> complete -c vim -s o -r --description 'Open stacked windows for each file'
77	77	-> complete -c vim -s O -r --description 'Open side by side windows for each file'
77	77	-> complete -c vim -s p -r --description 'Open tab pages for each file'
76	76	-> complete -c vim -s q -r --description 'Start in quickFix mode'
77	77	-> complete -c vim -s r -r --description 'Use swap files for recovery'
78	78	-> complete -c vim -s s -r --description 'Source and execute script file'
78	78	-> complete -c vim -s t -r --description 'Set the cursor to tag'
123	123	-> complete -c vim -s T -r --description 'Terminal name'
79	79	-> complete -c vim -s u -r --description 'Use alternative vimrc'
78	78	-> complete -c vim -s U -r --description 'Use alternative vimrc in GUI mode'
85	85	-> complete -c vim -s w -r --description 'Record all typed characters'
152	152	-> complete -c vim -s W -r --description 'Record all typed characters (overwrite file)'
87	87	-> complete -c vim -s A --description 'Start in Arabic mode'
79	79	-> complete -c vim -s b --description 'Start in binary mode'
76	76	-> complete -c vim -s C --description 'Behave mostly like vi'
76	76	-> complete -c vim -s d --description 'Start in diff mode'
75	75	-> complete -c vim -s D --description 'Debugging mode'
109	109	-> complete -c vim -s e --description 'Start in Ex mode'
102	102	-> complete -c vim -s E --description 'Start in improved Ex mode'
79	79	-> complete -c vim -s f --description 'Start in foreground mode'
77	77	-> complete -c vim -s F --description 'Start in Farsi mode'
76	76	-> complete -c vim -s g --description 'Start in GUI mode'
75	75	-> complete -c vim -s h --description 'Print help message and exit'
77	77	-> complete -c vim -s H --description 'Start in Hebrew mode'
75	75	-> complete -c vim -s L --description 'List swap files'
74	74	-> complete -c vim -s l --description 'Start in lisp mode'
76	76	-> complete -c vim -s m --description 'Disable file modification'
75	75	-> complete -c vim -s M --description 'Disallow file modification'
168	168	-> complete -c vim -s N --description 'Reset compatibility mode'
85	85	-> complete -c vim -s n --description 'Don\'t use swap files'
78	78	-> complete -c vim -s R --description 'Read only mode'
74	74	-> complete -c vim -s r --description 'List swap files'
75	75	-> complete -c vim -s s --description 'Start in silent mode'
75	75	-> complete -c vim -s V --description 'Start in verbose mode'
77	77	-> complete -c vim -s v --description 'Start in vi mode'
92	92	-> complete -c vim -s x --description 'Use encryption when writing files'
98	98	-> complete -c vim -s X --description 'Don\'t connect to X server'
126	126	-> complete -c vim -s y --description 'Start in easy mode'
109	109	-> complete -c vim -s Z --description 'Start in restricted mode'
107	107	-> complete -c vim -o nb --description 'Become an editor server for NetBeans'
107	107	-> complete -c vim -l no-fork --description 'Start in foreground mode'
109	109	-> complete -c vim -l echo-wid --description 'Echo the Window ID on stdout (GTK GUI only)'
106	106	-> complete -c vim -l help --description 'Print help message and exit'
153	153	-> complete -c vim -l literal --description 'Do not expand wildcards'
109	109	-> complete -c vim -l noplugin --description 'Skip loading plugins'
129	129	-> complete -c vim -l remote --description 'Edit files on Vim server'
108	108	-> complete -c vim -l remote-expr --description 'Evaluate expr on Vim server'
121	121	-> complete -c vim -l remote-send --description 'Send keys to Vim server'
106	106	-> complete -c vim -l remote-silent --description 'Edit files on Vim server'
110	110	-> complete -c vim -l remote-wait --description 'Edit files on Vim server'
128	128	-> complete -c vim -l remote-wait-silent --description 'Edit files on Vim server'
108	108	-> complete -c vim -l serverlist --description 'List all Vim servers that can be found'
108	108	-> complete -c vim -l servername --description 'Set server name'
149	149	-> complete -c vim -l version --description 'Print version information and exit'
133	133	-> complete -c vim -l socketid -r --description 'Run gvim in another window (GTK GUI only)'
128	203	> __fish_disable_bracketed_paste 'vim profile.txt'
75	75	-> printf "\e[?2004l"
111	111	> echo $_ " "
194	127103	> __fish_pwd
126909	126909	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
13486009	13486009	> vim profile.txt
150	4565	> __fish_enable_bracketed_paste
4415	4415	-> printf "\e[?2004h"
198	169952	> fish_mode_prompt
5245	169754	-> fish_default_mode_prompt
88	164509	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
159533	159533	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
78	4722	---> switch $fish_bind_mode...
2313	2313	----> set_color --bold --background green white
2331	2331	----> echo '[I]'
96	96	---> set_color normal
70	70	---> echo -n ' '
424	24719	> fish_prompt
3486	3486	-> set -l color_cwd
75	75	-> set -l suffix
719	2432	-> switch (prompt_iamroot)...
1445	1539	--> prompt_iamroot
94	94	---> echo $__fish_prompt_iamroot
97	97	--> set color_cwd $fish_color_cwd
77	77	--> set suffix '>'
2567	18302	-> echo -n -s "$USER" @ (prompt_hostname) ' ' (set_color $color_cwd) (prompt_pwd) (set_color normal) "$suffix "
2175	2282	--> prompt_hostname
107	107	---> echo $__fish_prompt_hostname
119	119	--> set_color $color_cwd
2626	13230	--> prompt_pwd
116	116	---> set -l options 'h/help'
2501	2501	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
56	209	---> if set -q _flag_help...
153	153	----> set -q _flag_help
89	89	---> set -q fish_prompt_pwd_dir_length
87	87	---> or set -l fish_prompt_pwd_dir_length 1
394	394	---> set realhome ~
1051	4408	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
3357	3357	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
49	2800	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
2574	2574	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
177	177	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
104	104	--> set_color normal
114	114	> echo $_ " "
2100	129512	> __fish_pwd
127412	127412	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
108	2331	> __fish_disable_bracketed_paste ls
2223	2223	-> printf "\e[?2004l"
2048	2048	> echo $_ " "
2011	158943	> __fish_pwd
156932	156932	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
3064	729984	> ls
3560	258092	-> source /usr/share/fish/functions/ls.fish
47	254532	--> if command ls --version >/dev/null ^/dev/null...
252247	252247	---> command ls --version >/dev/null ^/dev/null
60	60	---> function ls --description "List contents of directory"...
25	2178	---> if not set -q LS_COLORS...
2153	2153	----> not set -q LS_COLORS
58	58	-> set -l param --color=auto
36	231202	-> if isatty 1...
3111	231022	--> isatty 1
1499	1545	---> source /usr/share/fish/functions/isatty.fish
46	46	----> function isatty -d "Tests if a file descriptor is a tty"...
70	70	---> set -l options 'h/help'
2167	2167	---> argparse -n isatty $options -- $argv
35	137147	---> if set -q _flag_help...
137112	137112	----> set -q _flag_help
28	90	---> if set -q argv[2]...
62	62	----> set -q argv[2]
48	48	---> set -l fd
85	143	---> switch "$argv"...
58	58	----> set fd $argv[1]
86701	86701	---> command test -t "$fd"
144	144	--> set param $param --indicator-style=classify
237568	237568	-> command ls $param $argv
87	177	> __fish_enable_bracketed_paste
90	90	-> printf "\e[?2004h"
125	157249	> fish_mode_prompt
2387	157124	-> fish_default_mode_prompt
84	154737	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
152185	152185	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
71	2327	---> switch $fish_bind_mode...
2173	2173	----> set_color --bold --background green white
83	83	----> echo '[I]'
70	70	---> set_color normal
71	71	---> echo -n ' '
422	17426	> fish_prompt
90	90	-> set -l color_cwd
72	72	-> set -l suffix
572	2479	-> switch (prompt_iamroot)...
1619	1722	--> prompt_iamroot
103	103	---> echo $__fish_prompt_iamroot
105	105	--> set color_cwd $fish_color_cwd
80	80	--> set suffix '>'
3391	14363	-> echo -n -s "$USER" @ (prompt_hostname) ' ' (set_color $color_cwd) (prompt_pwd) (set_color normal) "$suffix "
2258	2377	--> prompt_hostname
119	119	---> echo $__fish_prompt_hostname
164	164	--> set_color $color_cwd
2571	8328	--> prompt_pwd
120	120	---> set -l options 'h/help'
122	122	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
24	88	---> if set -q _flag_help...
64	64	----> set -q _flag_help
61	61	---> set -q fish_prompt_pwd_dir_length
76	76	---> or set -l fish_prompt_pwd_dir_length 1
321	321	---> set realhome ~
673	2729	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2056	2056	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
39	2240	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
2036	2036	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
165	165	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
103	103	--> set_color normal
106	106	> echo $_ " "
157	147422	> __fish_pwd
147265	147265	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2320	113263	> __fish_start_bracketed_paste
2039	2039	-> set -g __fish_last_bind_mode $fish_bind_mode
3295	108904	-> __fish_commandline_is_singlequoted
3604	3653	--> source /usr/share/fish/functions/__fish_commandline_is_singlequoted.fish
49	49	---> function __fish_commandline_is_singlequoted --description "Return 0 if the current token has an open single-quote"...
63	63	--> set -l state normal
742	98820	--> for char in (commandline -ct | string split "")...
97926	97926	---> commandline -ct | string split ""
107	152	---> switch $char...
45	45	----> switch $state...
41	3073	--> if contains -- $state single single-escaped...
3004	3004	---> contains -- $state single single-escaped
28	28	---> return 1
3784	3784	> commandline -i \n
2449	2642	> __fish_stop_bracketed_paste
90	90	-> set fish_bind_mode $__fish_last_bind_mode
49	49	-> set -e __fish_paste_quoted
54	54	-> commandline -f force-repaint
120	10201	> fish_mode_prompt
2387	10081	-> fish_default_mode_prompt
84	7694	--> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
2094	2094	---> test "$fish_key_bindings" = "fish_vi_key_bindings"
70	5334	---> switch $fish_bind_mode...
2092	2092	----> set_color --bold --background green white
3172	3172	----> echo '[I]'
93	93	---> set_color normal
89	89	---> echo -n ' '
2103	18295	> fish_prompt
91	91	-> set -l color_cwd
70	70	-> set -l suffix
598	2355	-> switch (prompt_iamroot)...
1471	1573	--> prompt_iamroot
102	102	---> echo $__fish_prompt_iamroot
104	104	--> set color_cwd $fish_color_cwd
80	80	--> set suffix '>'
2352	13676	-> echo -n -s "$USER" @ (prompt_hostname) ' ' (set_color $color_cwd) (prompt_pwd) (set_color normal) "$suffix "
2027	2125	--> prompt_hostname
98	98	---> echo $__fish_prompt_hostname
119	119	--> set_color $color_cwd
2430	8980	--> prompt_pwd
109	109	---> set -l options 'h/help'
2097	2097	---> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	92	---> if set -q _flag_help...
67	67	----> set -q _flag_help
58	58	---> set -q fish_prompt_pwd_dir_length
76	76	---> or set -l fish_prompt_pwd_dir_length 1
370	370	---> set realhome ~
1172	1406	---> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
234	234	----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
39	2342	---> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
2123	2123	----> [ $fish_prompt_pwd_dir_length -eq 0 ]
180	180	----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
100	100	--> set_color normal
113	113	> echo $_ " "
2133	166616	> __fish_pwd
164483	164483	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
121	2349	> __fish_disable_bracketed_paste fisher\ add\ simnalamburt/shellder\n
2228	2228	-> printf "\e[?2004l"
118	118	> echo $_ " "
151	128799	> __fish_pwd
128648	128648	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2244	27132589	> fisher add simnalamburt/shellder
165886	165886	-> set -q XDG_CACHE_HOME
332	332	-> or set XDG_CACHE_HOME ~/.cache
40	40	-> set -q XDG_CONFIG_HOME
275	275	-> or set XDG_CONFIG_HOME ~/.config
71	71	-> set -g fish_config $XDG_CONFIG_HOME/fish
62	62	-> set -g fisher_cache $XDG_CACHE_HOME/fisher
60	60	-> set -g fisher_config $XDG_CONFIG_HOME/fisher
32	32	-> set -q fisher_path
56	56	-> set -g fishfile $fish_config/fishfile
218	2440	-> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
30	332	--> if test ! -d $path...
302	302	---> test ! -d $path
27	327	--> if test ! -d $path...
300	300	---> test ! -d $path
27	323	--> if test ! -d $path...
296	296	---> test ! -d $path
26	314	--> if test ! -d $path...
288	288	---> test ! -d $path
27	319	--> if test ! -d $path...
292	292	---> test ! -d $path
27	303	--> if test ! -d $path...
276	276	---> test ! -d $path
27	304	--> if test ! -d $path...
277	277	---> test ! -d $path
28	332	-> if test ! -e $fisher_path/completions/fisher.fish...
304	304	--> test ! -e $fisher_path/completions/fisher.fish
31	380	-> if test -e $fisher_path/conf.d/fisher.fish...
283	283	--> test -e $fisher_path/conf.d/fisher.fish
66	66	--> switch "$version"...
40	664	-> if test -e "$fisher_path/fishfile"...
277	277	--> test -e "$fisher_path/fishfile"
347	347	--> and test ! -e "$fishfile"
189	26959715	-> switch "$cmd"...
25	98899	--> if not isatty...
2596	98874	---> not isatty
77	77	----> set -l options 'h/help'
85	85	----> argparse -n isatty $options -- $argv
23	60	----> if set -q _flag_help...
37	37	-----> set -q _flag_help
21	54	----> if set -q argv[2]...
33	33	-----> set -q argv[2]
39	39	----> set -l fd
53	92	----> switch "$argv"...
39	39	-----> set fd 0
95871	95871	----> command test -t "$fd"
29	3040	--> if test (count $argv) = 1...
773	3011	---> test (count $argv) = 1
2238	2238	----> count $argv
4390	26857587	--> _fisher_commit $argv
68	68	---> set -e argv[1]
717	881327	---> set -l elapsed (_fisher_now)
2228	880610	----> _fisher_now
620	878382	-----> switch (command uname)...
302763	302763	------> command uname
4192	574999	------> math (command date "+%s%3N") - "0$elapsed"
1605	1651	-------> source /usr/share/fish/functions/math.fish
46	46	--------> function math --description "Perform math calculations in bc"...
234216	234216	-------> command date "+%s%3N"
28	132	-------> if not set -q argv[2]...
104	104	--------> not set -q argv[2]
121	121	-------> set -l options 'h/help' 's/scale=!_validate_int --min=0' '#-val'
181	181	-------> argparse -n math --stop-nonopt --min-args=1 $options -- $argv
38	134393	-------> if set -q _flag_help...
134355	134355	--------> set -q _flag_help
114	114	-------> set -l scale 0
69	69	-------> set -q _flag_scale
29	90	-------> if set -q _flag_val...
61	61	--------> set -q _flag_val
78	78	-------> set -lx BC_LINE_LENGTH 500
1150	199239	-------> set -l out (echo "scale=$scale; $argv" | bc)
198089	198089	--------> echo "scale=$scale; $argv" | bc
42	156	-------> if set -q out[2]...
114	114	--------> set -q out[2]
161	367	-------> switch "$out"...
129	129	--------> echo $out
77	77	--------> return 0
108	899	---> if test ! -e "$fishfile"...
791	791	----> test ! -e "$fishfile"
1039	561382	---> set -l old_pkgs (_fisher_ls | _fisher_fmt)
79095	560343	----> _fisher_ls | _fisher_fmt
4750	245646	-----> for pkg in $fisher_config/*/*/*...
240779	240779	------> command readlink $pkg
117	117	------> or echo $pkg
235602	235602	-----> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
787	5239915	---> for pkg in (_fisher_ls)...
217	233009	----> _fisher_ls
5826	232792	-----> for pkg in $fisher_config/*/*/*...
226799	226799	------> command readlink $pkg
167	167	------> or echo $pkg
3405	5006119	----> _fisher_rm $pkg
6262	5002633	-----> for src in $pkg/{conf.d,completions,functions}/**.* $pkg/*.fish...
788	262112	------> set -l target (command basename $src)
261324	261324	-------> command basename $src
968	237207	------> set -l filename (command basename $target .fish)
236239	236239	-------> command basename $target .fish
135	3346	------> switch $src...
116	116	-------> test "$filename.fish" = "$target"
2985	2985	-------> and emit "$filename"_uninstall
110	110	-------> set target conf.d/$target
240211	240211	------> command rm -f $fisher_path/$target
971	236553	------> set -l target (command basename $src)
235582	235582	-------> command basename $src
861	250959	------> set -l filename (command basename $target .fish)
250098	250098	-------> command basename $target .fish
253	2830	------> switch $src...
177	177	-------> test "$filename.fish" = "$target"
2243	2243	-------> and functions -e $filename
85	157	-------> switch $target...
72	72	--------> set target functions/$target
228470	228470	------> command rm -f $fisher_path/$target
801	233251	------> set -l target (command basename $src)
232450	232450	-------> command basename $src
780	244407	------> set -l filename (command basename $target .fish)
243627	243627	-------> command basename $target .fish
146	437	------> switch $src...
82	82	-------> test "$filename.fish" = "$target"
64	64	-------> and functions -e $filename
80	145	-------> switch $target...
65	65	--------> set target functions/$target
248248	248248	------> command rm -f $fisher_path/$target
778	232454	------> set -l target (command basename $src)
231676	231676	-------> command basename $src
747	225769	------> set -l filename (command basename $target .fish)
225022	225022	-------> command basename $target .fish
145	440	------> switch $src...
97	97	-------> test "$filename.fish" = "$target"
54	54	-------> and functions -e $filename
80	144	-------> switch $target...
64	64	--------> set target functions/$target
246155	246155	------> command rm -f $fisher_path/$target
805	246100	------> set -l target (command basename $src)
245295	245295	-------> command basename $src
796	234205	------> set -l filename (command basename $target .fish)
233409	233409	-------> command basename $target .fish
155	448	------> switch $src...
83	83	-------> test "$filename.fish" = "$target"
62	62	-------> and functions -e $filename
80	148	-------> switch $target...
68	68	--------> set target functions/$target
229501	229501	------> command rm -f $fisher_path/$target
817	226040	------> set -l target (command basename $src)
225223	225223	-------> command basename $src
818	230998	------> set -l filename (command basename $target .fish)
230180	230180	-------> command basename $target .fish
143	936230	------> switch $src...
80	80	-------> test "$filename.fish" = "$target"
51	51	-------> and functions -e $filename
53	935956	-------> switch $target...
1126	935875	--------> source $src
48	48	---------> functions -e __z_on_variable_pwd
158568	158568	---------> functions -e $Z_CMD
62	62	---------> functions -e $ZO_CMD
89	101690	---------> if test ! -z "$Z_DATA"...
67	67	----------> test ! -z "$Z_DATA"
50829	50829	----------> printf "To completely erase z's data, remove:\n" > /dev/stderr
50705	50705	----------> printf "%s\n" "$Z_DATA" > /dev/stderr
161294	161294	---------> set -e Z_CMD
184776	184776	---------> set -e ZO_CMD
158437	158437	---------> set -e Z_DATA
169874	169874	---------> set -e Z_EXCLUDE
28	28	--------> continue
27	81	-----> if not functions -q fish_prompt...
54	54	------> not functions -q fish_prompt
163141	163141	---> command rm -Rf $fisher_config
232214	232214	---> command mkdir -p $fisher_config
830	908196	---> set -l next_pkgs (_fisher_fmt <$fishfile | _fisher_parse -R $cmd (printf "%s\n" $argv | _fisher_fmt))
76877	907366	----> _fisher_fmt <$fishfile | _fisher_parse -R $cmd (printf "%s\n" $argv | _fisher_fmt)
74949	312923	-----> printf "%s\n" $argv | _fisher_fmt
237974	237974	------> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
223714	223714	-----> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
143	143	-----> set -e argv[1..2]
293709	293709	-----> command awk -v FS="[[:space:]]*#+" -v MODE="$mode" -v CMD="$cmd" -v ARGSTR="$argv" '
        BEGIN {
            for (n = split(ARGSTR, a, " "); i++ < n;) pkgs[getkey(a[i])] = a[i]
        }
        !NF { next } { k = getkey($1) }
        MODE == "-R" && !(k in pkgs) && $0 = $1
        MODE == "-W" && (/^#/ || k in pkgs || CMD != "rm") { print pkgs[k] (sub($1, "") ? $0 : "") }
        MODE == "-W" || CMD == "rm" { delete pkgs[k] }
        END {
            for (k in pkgs) {
                if (CMD != "rm" || MODE == "-W") print pkgs[k]
                else print "fisher: cannot remove \""k"\" -- package is not in fishfile" > "/dev/stderr"
            }
        }
        function getkey(s,  a) {
            return (split(s, a, /@+|:/) > 2) ? a[2]"/"a[1]"/"a[3] : a[1]
        }
    '
829	14169967	---> set -l actual_pkgs (_fisher_fetch $next_pkgs)
6016	14169138	----> _fisher_fetch $next_pkgs
795	795	-----> set -l pkg_jobs
122	122	-----> set -l out_pkgs
84	84	-----> set -l next_pkgs
76	76	-----> set -l local_pkgs
132892	132892	-----> set -q fisher_user_api_token
183	1794706	-----> for pkg in $argv...
52	52	------> switch $pkg...
175620	175620	------> command awk -v PKG="$pkg" -v FS=/ '
            BEGIN {
                if (split(PKG, tmp, /@+|:/) > 2) {
                    if (tmp[4]) sub("@"tmp[4], "", PKG)
                    print PKG "\t" tmp[2]"/"tmp[1]"/"tmp[3] "\t" (tmp[4] ? tmp[4] : "master")
                } else {
                    pkg = split(PKG, _, "/") <= 2 ? "github.com/"tmp[1] : tmp[1]
                    tag = tmp[2] ? tmp[2] : "master"
                    print (\
                        pkg ~ /^github/ ? "https://codeload."pkg"/tar.gz/"tag : \
                        pkg ~ /^gitlab/ ? "https://"pkg"/-/archive/"tag"/"tmp[split(pkg, tmp, "/")]"-"tag".tar.gz" : \
                        pkg ~ /^bitbucket/ ? "https://"pkg"/get/"tag".tar.gz" : pkg \
                    ) "\t" pkg
                }
            }
        ' | read -l url pkg branch
227	602289	------> if test ! -d "$fisher_config/$pkg"...
1261	1261	-------> test ! -d "$fisher_config/$pkg"
173271	173271	-------> fish -c "
                echo fetching $url >&2
                command mkdir -p $fisher_config/$pkg $fisher_cache/(command dirname $pkg)
                if test ! -z \"$branch\"
                     command git clone $url $fisher_config/$pkg --branch $branch --depth 1 2>/dev/null
                     or echo fisher: cannot clone \"$url\" -- is this a valid url\? >&2
                else if command curl $curl_opts -Ss -w \"\" $url 2>&1 | command tar -xzf- -C $fisher_config/$pkg 2>/dev/null
                    command rm -Rf $fisher_cache/$pkg
                    command mv -f $fisher_config/$pkg/* $fisher_cache/$pkg
                    command rm -Rf $fisher_config/$pkg
                    command cp -Rf {$fisher_cache,$fisher_config}/$pkg
                else if test -d \"$fisher_cache/$pkg\"
                    echo fisher: cannot connect to server -- looking in \"$fisher_cache/$pkg\" | command sed 's|$HOME|~|' >&2
                    command cp -Rf $fisher_cache/$pkg $fisher_config/$pkg/..
                else
                    command rm -Rf $fisher_config/$pkg
                    echo fisher: cannot add \"$pkg\" -- is this a valid package\? >&2
                end
            " >/dev/null &
953	427306	-------> set pkg_jobs $pkg_jobs (_fisher_jobs --last)
2412	426353	--------> _fisher_jobs --last
423941	423941	---------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
224	224	-------> set next_pkgs $next_pkgs "$fisher_config/$pkg"
102	102	------> switch $pkg...
340730	340730	------> command awk -v PKG="$pkg" -v FS=/ '
            BEGIN {
                if (split(PKG, tmp, /@+|:/) > 2) {
                    if (tmp[4]) sub("@"tmp[4], "", PKG)
                    print PKG "\t" tmp[2]"/"tmp[1]"/"tmp[3] "\t" (tmp[4] ? tmp[4] : "master")
                } else {
                    pkg = split(PKG, _, "/") <= 2 ? "github.com/"tmp[1] : tmp[1]
                    tag = tmp[2] ? tmp[2] : "master"
                    print (\
                        pkg ~ /^github/ ? "https://codeload."pkg"/tar.gz/"tag : \
                        pkg ~ /^gitlab/ ? "https://"pkg"/-/archive/"tag"/"tmp[split(pkg, tmp, "/")]"-"tag".tar.gz" : \
                        pkg ~ /^bitbucket/ ? "https://"pkg"/get/"tag".tar.gz" : pkg \
                    ) "\t" pkg
                }
            }
        ' | read -l url pkg branch
475	675730	------> if test ! -d "$fisher_config/$pkg"...
1088	1088	-------> test ! -d "$fisher_config/$pkg"
189506	189506	-------> fish -c "
                echo fetching $url >&2
                command mkdir -p $fisher_config/$pkg $fisher_cache/(command dirname $pkg)
                if test ! -z \"$branch\"
                     command git clone $url $fisher_config/$pkg --branch $branch --depth 1 2>/dev/null
                     or echo fisher: cannot clone \"$url\" -- is this a valid url\? >&2
                else if command curl $curl_opts -Ss -w \"\" $url 2>&1 | command tar -xzf- -C $fisher_config/$pkg 2>/dev/null
                    command rm -Rf $fisher_cache/$pkg
                    command mv -f $fisher_config/$pkg/* $fisher_cache/$pkg
                    command rm -Rf $fisher_config/$pkg
                    command cp -Rf {$fisher_cache,$fisher_config}/$pkg
                else if test -d \"$fisher_cache/$pkg\"
                    echo fisher: cannot connect to server -- looking in \"$fisher_cache/$pkg\" | command sed 's|$HOME|~|' >&2
                    command cp -Rf $fisher_cache/$pkg $fisher_config/$pkg/..
                else
                    command rm -Rf $fisher_config/$pkg
                    echo fisher: cannot add \"$pkg\" -- is this a valid package\? >&2
                end
            " >/dev/null &
807	484511	-------> set pkg_jobs $pkg_jobs (_fisher_jobs --last)
193	483704	--------> _fisher_jobs --last
483511	483511	---------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
150	150	-------> set next_pkgs $next_pkgs "$fisher_config/$pkg"
69	11670913	-----> if set -q pkg_jobs[1]...
142	142	------> set -q pkg_jobs[1]
80	4017117	------> while for job in $pkg_jobs...
143	506466	-------> for job in $pkg_jobs...
1079	506244	--------> contains -- $job (_fisher_jobs)
358	505165	---------> _fisher_jobs
504807	504807	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
79	79	--------> and break
113	624368	-------> for job in $pkg_jobs...
995	624204	--------> contains -- $job (_fisher_jobs)
262	623209	---------> _fisher_jobs
622947	622947	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
51	51	--------> and break
131	553243	-------> for job in $pkg_jobs...
3426	553058	--------> contains -- $job (_fisher_jobs)
230	549632	---------> _fisher_jobs
549402	549402	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
54	54	--------> and break
108	528493	-------> for job in $pkg_jobs...
993	528303	--------> contains -- $job (_fisher_jobs)
288	527310	---------> _fisher_jobs
527022	527022	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
82	82	--------> and break
173	1008740	-------> for job in $pkg_jobs...
1082	530026	--------> contains -- $job (_fisher_jobs)
256	528944	---------> _fisher_jobs
528688	528688	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
1020	478484	--------> contains -- $job (_fisher_jobs)
279	477464	---------> _fisher_jobs
477185	477185	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
57	57	--------> and break
160	795727	-------> for job in $pkg_jobs...
783	385014	--------> contains -- $job (_fisher_jobs)
211	384231	---------> _fisher_jobs
384020	384020	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
908	410553	--------> contains -- $job (_fisher_jobs)
230	409645	---------> _fisher_jobs
409415	409415	----------> jobs $argv | command awk '/^[0-9]+\t/ { print $1 }'
149	7653585	------> for pkg in $next_pkgs...
75	5906554	-------> if test -d "$pkg"...
2680	2680	--------> test -d "$pkg"
2406	2406	--------> set out_pkgs $out_pkgs $pkg
2798	5901393	--------> _fisher_add $pkg
5409	5898595	---------> for src in $pkg/{functions,completions,conf.d}/**.* $pkg/*.fish...
809	253406	----------> set -l target (command basename $src)
252597	252597	-----------> command basename $src
138	457	----------> switch $src...
132	319	-----------> switch $target...
187	187	------------> set target $fisher_path/functions/$target
347380	347380	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
85	292736	----------> if set -q opts[1]...
130	130	-----------> set -q opts[1]
292521	292521	-----------> command cp -f $src $target
99	6097	----------> switch $target...
5942	5998	-----------> source $target >/dev/null 2>/dev/null
56	56	------------> function __z -d "Jump to a recent directory."...
849	252605	----------> set -l target (command basename $src)
251756	251756	-----------> command basename $src
168	439	----------> switch $src...
106	271	-----------> switch $target...
165	165	------------> set target $fisher_path/functions/$target
352409	352409	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
73	272641	----------> if set -q opts[1]...
110	110	-----------> set -q opts[1]
272458	272458	-----------> command cp -f $src $target
83	1598	----------> switch $target...
1472	1515	-----------> source $target >/dev/null 2>/dev/null
43	43	------------> function __z_add -d "Add PATH to .z file"...
872	282763	----------> set -l target (command basename $src)
281891	281891	-----------> command basename $src
164	421	----------> switch $src...
111	257	-----------> switch $target...
146	146	------------> set target $fisher_path/functions/$target
363114	363114	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
64	253159	----------> if set -q opts[1]...
99	99	-----------> set -q opts[1]
252996	252996	-----------> command cp -f $src $target
82	1459	----------> switch $target...
1334	1377	-----------> source $target >/dev/null 2>/dev/null
43	43	------------> function __z_clean -d "Clean up .z file to remove paths no longer valid"...
1058	282116	----------> set -l target (command basename $src)
281058	281058	-----------> command basename $src
212	516	----------> switch $src...
116	304	-----------> switch $target...
188	188	------------> set target $fisher_path/functions/$target
340271	340271	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
72	279296	----------> if set -q opts[1]...
97	97	-----------> set -q opts[1]
279127	279127	-----------> command cp -f $src $target
95	1914	----------> switch $target...
1770	1819	-----------> source $target >/dev/null 2>/dev/null
49	49	------------> function __z_complete -d "add completions"...
1089	263471	----------> set -l target (command basename $src)
262382	262382	-----------> command basename $src
218	395	----------> switch $src...
92	177	-----------> switch $target...
85	85	------------> continue
2001	262939	----------> set -l target (command basename $src)
260938	260938	-----------> command basename $src
107	301	----------> switch $src...
194	194	-----------> set target $fisher_path/conf.d/$target
347505	347505	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
75	266411	----------> if set -q opts[1]...
96	96	-----------> set -q opts[1]
266240	266240	-----------> command cp -f $src $target
107	1167367	----------> switch $target...
2329	1167260	-----------> source $target >/dev/null 2>/dev/null
55	485125	------------> if test -z "$Z_DATA"...
171099	171099	-------------> test -z "$Z_DATA"
48	146887	-------------> if test -z "$XDG_DATA_HOME"...
90	90	--------------> test -z "$XDG_DATA_HOME"
146749	146749	--------------> set -U Z_DATA_DIR "$HOME/.local/share/z"
167084	167084	-------------> set -U Z_DATA "$Z_DATA_DIR/data"
40	1178	------------> if test ! -e "$Z_DATA"...
1138	1138	-------------> test ! -e "$Z_DATA"
56	215464	------------> if test -z "$Z_CMD"...
120	120	-------------> test -z "$Z_CMD"
215288	215288	-------------> set -U Z_CMD "z"
192848	192848	------------> set -U ZO_CMD "$Z_CMD"o
42	277	------------> if test ! -z $Z_CMD...
162	162	-------------> test ! -z $Z_CMD
73	73	-------------> function $Z_CMD -d "jump around"...
35	225	------------> if test ! -z $ZO_CMD...
125	125	-------------> test ! -z $ZO_CMD
65	65	-------------> function $ZO_CMD -d "open target dir"...
54	194952	------------> if not set -q Z_EXCLUDE...
100	100	-------------> not set -q Z_EXCLUDE
194798	194798	-------------> set -U Z_EXCLUDE $HOME
1003	74805	------------> __z_complete
1200	68790	-------------> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
67590	67590	--------------> string replace -r '\|.*' '' < $Z_DATA | string escape
3426	3426	-------------> complete -c $Z_CMD -a "$__z_marks" -f
223	223	-------------> complete -c $ZO_CMD -a "$__z_marks" -f
245	245	-------------> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
185	185	-------------> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
191	191	-------------> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
200	200	-------------> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
181	181	-------------> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
183	183	-------------> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
178	178	-------------> complete -c $Z_CMD -s h -l help   -d "Print help"
57	57	------------> function __z_on_variable_pwd --on-variable PWD...
79	1746882	-------> if test -d "$pkg"...
522	522	--------> test -d "$pkg"
228	228	--------> set out_pkgs $out_pkgs $pkg
1014	1746053	--------> _fisher_add $pkg
4473	1745039	---------> for src in $pkg/{functions,completions,conf.d}/**.* $pkg/*.fish...
975	100244	----------> set -l target (command basename $src)
99269	99269	-----------> command basename $src
123	310	----------> switch $src...
78	187	-----------> switch $target...
109	109	------------> set target $fisher_path/functions/$target
320075	320075	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
72	235690	----------> if set -q opts[1]...
125	125	-----------> set -q opts[1]
235493	235493	-----------> command cp -f $src $target
80	1274	----------> switch $target...
1160	1194	-----------> source $target >/dev/null 2>/dev/null
34	34	------------> function fish_mode_prompt...
843	237150	----------> set -l target (command basename $src)
236307	236307	-----------> command basename $src
174	407	----------> switch $src...
94	233	-----------> switch $target...
139	139	------------> set target $fisher_path/functions/$target
329615	329615	----------> echo "linking $target" | command sed "s|$HOME|~|" >&2
71	244040	----------> if set -q opts[1]...
95	95	-----------> set -q opts[1]
243874	243874	-----------> command cp -f $src $target
92	271761	----------> switch $target...
6625	271669	-----------> source $target >/dev/null 2>/dev/null
33	132052	------------> if set -q theme_hide_hostname...
132019	132019	-------------> set -q theme_hide_hostname
110	110	------------> set -g current_bg NONE
99	99	------------> set -g segment_separator \uE0B0
44	44	------------> function prompt_segment -d "Function to draw a segment"...
32	32	------------> function prompt_finish -d "Close open segments"...
27	27	------------> function prompt_virtual_env -d "Display Python virtual environment"...
37	37	------------> function prompt_user -d "Display current user if different from $default_user"...
37	37	------------> function get_hostname -d "Set current hostname to prompt variable $HOSTNAME_PROMPT if connected via SSH"...
26	26	------------> function prompt_dir -d "Display the current directory"...
25	25	------------> function prompt_hg -d "Display mercurial state"...
30	30	------------> function prompt_git -d "Display the current git state"...
29	29	------------> function prompt_svn -d "Display the current svn state"...
27	27	------------> function svn_get_branch -d "get the current branch name"...
26	26	------------> function svn_get_revision -d "get the current revision number"...
26	26	------------> function prompt_status -d "the symbols for a non zero exit status, root and background jobs"...
49	132390	------------> if printf '%s\n' '2.2.0' $FISH_VERSION | sort --check=silent --version-sort...
132277	132277	-------------> printf '%s\n' '2.2.0' $FISH_VERSION | sort --check=silent --version-sort
64	64	-------------> function __exists -a name -d "Check if a function or program does exist."...
27	27	------------> function fish_prompt...
136	136	-----> set -l local_prefix $fisher_config/local/$USER
62	257962	-----> if test ! -d "$local_prefix"...
638	638	------> test ! -d "$local_prefix"
257262	257262	------> command mkdir -p $local_prefix
34	34	-----> for pkg in $local_pkgs...
54	305402	-----> if set -q out_pkgs[1]...
97	97	------> set -q out_pkgs[1]
2138	140845	------> _fisher_fetch (
            for pkg in $out_pkgs
                if test -s "$pkg/fishfile"
                    _fisher_fmt <$pkg/fishfile | _fisher_parse -R
                end
            end)
156	2696	-------> for pkg in $out_pkgs...
47	1810	--------> if test -s "$pkg/fishfile"...
1763	1763	---------> test -s "$pkg/fishfile"
33	730	--------> if test -s "$pkg/fishfile"...
697	697	---------> test -s "$pkg/fishfile"
90	90	-------> set -l pkg_jobs
70	70	-------> set -l out_pkgs
67	67	-------> set -l next_pkgs
66	66	-------> set -l local_pkgs
134929	134929	-------> set -q fisher_user_api_token
33	33	-------> for pkg in $argv...
31	113	-------> if set -q pkg_jobs[1]...
82	82	--------> set -q pkg_jobs[1]
114	114	-------> set -l local_prefix $fisher_config/local/$USER
29	405	-------> if test ! -d "$local_prefix"...
376	376	--------> test ! -d "$local_prefix"
24	24	-------> for pkg in $local_pkgs...
23	100	-------> if set -q out_pkgs[1]...
77	77	--------> set -q out_pkgs[1]
76256	164406	------> printf "%s\n" $out_pkgs | _fisher_fmt
88150	88150	-------> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
65	65	---> set -l updated_pkgs
64	239	---> for pkg in $old_pkgs...
33	175	----> if contains -- $pkg $actual_pkgs...
75	75	-----> contains -- $pkg $actual_pkgs
67	67	-----> set updated_pkgs $updated_pkgs $pkg
22	107	---> if test -z "$actual_pkgs$updated_pkgs$old_pkgs$next_pkgs"...
85	85	----> test -z "$actual_pkgs$updated_pkgs$old_pkgs$next_pkgs"
43	43	---> set -l out_pkgs
40	614083	---> if test "$cmd" = "rm"...
62	62	----> test "$cmd" = "rm"
78	613981	----> for pkg in $next_pkgs...
52	311079	-----> if contains -- (echo $pkg | command sed "s|@.*||") $actual_pkgs...
850	310920	------> contains -- (echo $pkg | command sed "s|@.*||") $actual_pkgs
310070	310070	-------> echo $pkg | command sed "s|@.*||"
107	107	------> set out_pkgs $out_pkgs $pkg
55	302824	-----> if contains -- (echo $pkg | command sed "s|@.*||") $actual_pkgs...
921	302589	------> contains -- (echo $pkg | command sed "s|@.*||") $actual_pkgs
301668	301668	-------> echo $pkg | command sed "s|@.*||"
180	180	------> set out_pkgs $out_pkgs $pkg
52889	919676	---> printf "%s\n" (_fisher_fmt <$fishfile | _fisher_parse -W $cmd $out_pkgs | command sed "s|^$HOME|~|") >$fishfile
361081	866787	----> _fisher_fmt <$fishfile | _fisher_parse -W $cmd $out_pkgs | command sed "s|^$HOME|~|"
229874	229874	-----> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
141	141	-----> set -e argv[1..2]
275691	275691	-----> command awk -v FS="[[:space:]]*#+" -v MODE="$mode" -v CMD="$cmd" -v ARGSTR="$argv" '
        BEGIN {
            for (n = split(ARGSTR, a, " "); i++ < n;) pkgs[getkey(a[i])] = a[i]
        }
        !NF { next } { k = getkey($1) }
        MODE == "-R" && !(k in pkgs) && $0 = $1
        MODE == "-W" && (/^#/ || k in pkgs || CMD != "rm") { print pkgs[k] (sub($1, "") ? $0 : "") }
        MODE == "-W" || CMD == "rm" { delete pkgs[k] }
        END {
            for (k in pkgs) {
                if (CMD != "rm" || MODE == "-W") print pkgs[k]
                else print "fisher: cannot remove \""k"\" -- package is not in fishfile" > "/dev/stderr"
            }
        }
        function getkey(s,  a) {
            return (split(s, a, /@+|:/) > 2) ? a[2]"/"a[1]"/"a[3] : a[1]
        }
    '
2532	2000917	---> _fisher_complete
50	50	----> complete -ec fisher
99	99	----> complete -xc fisher -n __fish_use_subcommand -a add -d "Add packages"
83	83	----> complete -xc fisher -n __fish_use_subcommand -a rm -d "Remove packages"
80	80	----> complete -xc fisher -n __fish_use_subcommand -a ls -d "List installed packages matching REGEX"
77	77	----> complete -xc fisher -n __fish_use_subcommand -a --help -d "Show usage help"
90	90	----> complete -xc fisher -n __fish_use_subcommand -a --version -d "$fisher_version"
86	86	----> complete -xc fisher -n __fish_use_subcommand -a self-update -d "Update to the latest version"
710	1997820	----> for pkg in (fisher ls)...
2023	1996863	-----> fisher ls
155266	155266	------> set -q XDG_CACHE_HOME
377	377	------> or set XDG_CACHE_HOME ~/.cache
73	73	------> set -q XDG_CONFIG_HOME
312	312	------> or set XDG_CONFIG_HOME ~/.config
104	104	------> set -g fish_config $XDG_CONFIG_HOME/fish
117	117	------> set -g fisher_cache $XDG_CACHE_HOME/fisher
95	95	------> set -g fisher_config $XDG_CONFIG_HOME/fisher
61	61	------> set -q fisher_path
90	90	------> set -g fishfile $fish_config/fishfile
242	4137	------> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
35	460	-------> if test ! -d $path...
425	425	--------> test ! -d $path
78	1315	-------> if test ! -d $path...
1237	1237	--------> test ! -d $path
33	621	-------> if test ! -d $path...
588	588	--------> test ! -d $path
34	423	-------> if test ! -d $path...
389	389	--------> test ! -d $path
30	372	-------> if test ! -d $path...
342	342	--------> test ! -d $path
27	372	-------> if test ! -d $path...
345	345	--------> test ! -d $path
26	332	-------> if test ! -d $path...
306	306	--------> test ! -d $path
27	326	------> if test ! -e $fisher_path/completions/fisher.fish...
299	299	-------> test ! -e $fisher_path/completions/fisher.fish
31	442	------> if test -e $fisher_path/conf.d/fisher.fish...
349	349	-------> test -e $fisher_path/conf.d/fisher.fish
62	62	-------> switch "$version"...
40	605	------> if test -e "$fisher_path/fishfile"...
281	281	-------> test -e "$fisher_path/fishfile"
284	284	-------> and test ! -e "$fishfile"
110	1832835	------> switch "$cmd"...
90	90	-------> set -e argv[1]
85	1832635	-------> if test -s "$fishfile"...
277	277	--------> test -s "$fishfile"
869	717377	--------> set -l file (_fisher_fmt <$fishfile | _fisher_parse -R | command sed "s|@.*||")
342802	716508	---------> _fisher_fmt <$fishfile | _fisher_parse -R | command sed "s|@.*||"
97330	97330	----------> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
132	132	----------> set -e argv[1..2]
276244	276244	----------> command awk -v FS="[[:space:]]*#+" -v MODE="$mode" -v CMD="$cmd" -v ARGSTR="$argv" '
        BEGIN {
            for (n = split(ARGSTR, a, " "); i++ < n;) pkgs[getkey(a[i])] = a[i]
        }
        !NF { next } { k = getkey($1) }
        MODE == "-R" && !(k in pkgs) && $0 = $1
        MODE == "-W" && (/^#/ || k in pkgs || CMD != "rm") { print pkgs[k] (sub($1, "") ? $0 : "") }
        MODE == "-W" || CMD == "rm" { delete pkgs[k] }
        END {
            for (k in pkgs) {
                if (CMD != "rm" || MODE == "-W") print pkgs[k]
                else print "fisher: cannot remove \""k"\" -- package is not in fishfile" > "/dev/stderr"
            }
        }
        function getkey(s,  a) {
            return (split(s, a, /@+|:/) > 2) ? a[2]"/"a[1]"/"a[3] : a[1]
        }
    '
389917	1114896	--------> _fisher_ls | _fisher_fmt | command awk -v FILE="$file" "
                    BEGIN { for (n = split(FILE, f); ++i <= n;) file[f[i]] } \$0 in file && /$argv[1]/
                " | command sed "s|^$HOME|~|"
6224	485556	---------> for pkg in $fisher_config/*/*/*...
246560	246560	----------> command readlink $pkg
172	172	----------> or echo $pkg
232363	232363	----------> command readlink $pkg
237	237	----------> or echo $pkg
239423	239423	---------> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
137	137	-----> complete -xc fisher -n "__fish_seen_subcommand_from rm" -a $pkg
110	110	-----> complete -xc fisher -n "__fish_seen_subcommand_from rm" -a $pkg
293968	1160958	---> command awk -v A=(count $actual_pkgs) -v U=(count $updated_pkgs) -v O=(count $old_pkgs) -v E=(_fisher_now $elapsed) '
        BEGIN {
            res = fmt("removed", O - U, fmt("updated", U, fmt("added", A - U)))
            printf((res ? res : "done") " in %.2fs\n", E / 1000)
        }
        function fmt(action, n, s) {
            return n ? (s ? s ", " : s) action " " n " package" (n > 1 ? "s" : "") : s
        }
    ' >&2
2000	2000	----> count $actual_pkgs
101	101	----> count $updated_pkgs
96	96	----> count $old_pkgs
2207	864793	----> _fisher_now $elapsed
615	862586	-----> switch (command uname)...
326627	326627	------> command uname
3480	535344	------> math (command date "+%s%3N") - "0$elapsed"
220798	220798	-------> command date "+%s%3N"
27	124	-------> if not set -q argv[2]...
97	97	--------> not set -q argv[2]
120	120	-------> set -l options 'h/help' 's/scale=!_validate_int --min=0' '#-val'
2381	2381	-------> argparse -n math --stop-nonopt --min-args=1 $options -- $argv
39	132735	-------> if set -q _flag_help...
132696	132696	--------> set -q _flag_help
112	112	-------> set -l scale 0
69	69	-------> set -q _flag_scale
27	90	-------> if set -q _flag_val...
63	63	--------> set -q _flag_val
80	80	-------> set -lx BC_LINE_LENGTH 500
731	174992	-------> set -l out (echo "scale=$scale; $argv" | bc)
174261	174261	--------> echo "scale=$scale; $argv" | bc
29	103	-------> if set -q out[2]...
74	74	--------> set -q out[2]
86	260	-------> switch "$out"...
124	124	--------> echo $out
50	50	--------> return 0
88	178	> __fish_enable_bracketed_paste
90	90	-> printf "\e[?2004h"
343	149931	> fish_mode_prompt
43	149588	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
143510	143510	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
56	6035	--> switch $fish_bind_mode...
625	5979	---> prompt_segment green black "I"
92	92	----> set -l bg
72	72	----> set -l fg
36	2250	----> if [ -n "$argv[1]" ]...
2111	2111	-----> [ -n "$argv[1]" ]
103	103	-----> set bg $argv[1]
34	211	----> if [ -n "$argv[2]" ]...
87	87	-----> [ -n "$argv[2]" ]
90	90	-----> set fg $argv[2]
57	2418	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2041	2041	-----> set_color -b $bg
90	90	-----> set_color $fg
80	80	-----> echo -n " "
98	98	----> set current_bg $argv[1]
35	213	----> if [ -n "$argv[3]" ]...
89	89	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
448	5062378	> fish_prompt
230	230	-> set -g RETVAL $status
604	399551	-> prompt_status
47	153	--> if [ $RETVAL -ne 0 ]...
106	106	---> [ $RETVAL -ne 0 ]
796	95306	--> set -l uid (id -u $USER)
94510	94510	---> id -u $USER
35	133	--> if [ $uid -eq 0 ]...
98	98	---> [ $uid -eq 0 ]
31	303355	--> if [ (jobs -l | wc -l) -gt 0 ]...
909	303324	---> [ (jobs -l | wc -l) -gt 0 ]
302415	302415	----> jobs -l | wc -l
216	133097	-> prompt_virtual_env
40	132881	--> if test "$VIRTUAL_ENV"...
132841	132841	---> test "$VIRTUAL_ENV"
687	2371	-> prompt_user
169	169	--> set -l BG 444444
122	122	--> set -l FG BCBCBC
48	1393	--> if [ "$theme_display_user" = "yes" ]...
158	158	---> [ "$theme_display_user" = "yes" ]
462	1076	---> get_hostname
357	357	----> set -g HOSTNAME_PROMPT ""
28	257	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
229	229	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
23	111	---> if [ $HOSTNAME_PROMPT ]...
88	88	----> [ $HOSTNAME_PROMPT ]
121	7464	-> prompt_dir
1293	7343	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2577	4500	---> prompt_pwd
119	119	----> set -l options 'h/help'
126	126	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
24	88	----> if set -q _flag_help...
64	64	-----> set -q _flag_help
59	59	----> set -q fish_prompt_pwd_dir_length
76	76	----> or set -l fish_prompt_pwd_dir_length 1
357	357	----> set realhome ~
647	814	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
167	167	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	284	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
103	103	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
145	145	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
87	87	---> set -l bg
75	75	---> set -l fg
33	214	---> if [ -n "$argv[1]" ]...
91	91	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
31	205	---> if [ -n "$argv[2]" ]...
85	85	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
74	670	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	----> set_color -b $bg
88	88	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
97	97	----> set_color -b $bg
87	87	----> set_color $fg
91	91	---> set current_bg $argv[1]
32	208	---> if [ -n "$argv[3]" ]...
86	86	----> [ -n "$argv[3]" ]
90	90	----> echo -n -s $argv[3] " "
173	52562	-> __exists hg
52389	52389	--> command -v "$name" ^/dev/null >&2
505	1686784	-> and prompt_hg
91	91	--> set -l branch
70	70	--> set -l state
46	1686118	--> if command hg id >/dev/null 2>&1...
1686072	1686072	---> command hg id >/dev/null 2>&1
216	43646	-> __exists git
43430	43430	--> command -v "$name" ^/dev/null >&2
1554	2433388	-> and prompt_git
2389	2389	--> set -l ref
174	2429445	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
315531	315531	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1040	336410	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
335370	335370	----> command git symbolic-ref HEAD 2> /dev/null
37	171	---> if [ $status -gt 0 ]...
134	134	----> [ $status -gt 0 ]
133224	133224	---> set branch_symbol \uE0A0
754	141650	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
140896	140896	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
83	83	---> set -l BG PROMPT
923	376145	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
375222	375222	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
205	1121381	---> if [ "$dirty" = "" ]...
155	155	----> [ "$dirty" = "" ]
107	107	----> set BG yellow
115	115	----> set dirty ''
101	101	----> set -l empty 0
326108	326108	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
103	103	----> set -l target
120	321378	----> if [ $empty = 1 ]...
103	103	-----> [ $empty = 1 ]
105	105	-----> set target 'HEAD'
80	80	-----> set -l unstaged 0
320637	320637	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
112	112	-----> or set unstaged 1
38	221	-----> if [ $unstaged = 1 ]...
92	92	------> [ $unstaged = 1 ]
91	91	------> set dirty $dirty'●'
79	79	----> set -l staged 0
336626	336626	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
31	166	----> if [ $staged = 1 ]...
135	135	-----> [ $staged = 1 ]
46	136238	----> if [ "$dirty" = "" ]...
94	94	-----> [ "$dirty" = "" ]
136098	136098	-----> set PROMPT "$branch $dirty"
1382	4676	---> prompt_segment $BG black $PROMPT
308	308	----> set -l bg
494	494	----> set -l fg
49	314	----> if [ -n "$argv[1]" ]...
140	140	-----> [ -n "$argv[1]" ]
125	125	-----> set bg $argv[1]
59	458	----> if [ -n "$argv[2]" ]...
111	111	-----> [ -n "$argv[2]" ]
288	288	-----> set fg $argv[2]
143	1125	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
250	250	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
143	143	-----> set_color -b $bg
151	151	-----> set_color $current_bg
142	142	-----> echo -n "$segment_separator "
152	152	-----> set_color -b $bg
144	144	-----> set_color $fg
159	159	----> set current_bg $argv[1]
53	436	----> if [ -n "$argv[3]" ]...
188	188	-----> [ -n "$argv[3]" ]
195	195	-----> echo -n -s $argv[3] " "
242	66960	-> __exists svn
66718	66718	--> command -v "$name" ^/dev/null >&2
315	234731	-> and prompt_svn
85	85	--> set -l ref
69	234331	--> if command svn ls . >/dev/null 2>&1...
234262	234262	---> command svn ls . >/dev/null 2>&1
368	1146	-> prompt_finish
72	575	--> if [ -n $current_bg ]...
144	144	---> [ -n $current_bg ]
117	117	---> set_color -b normal
122	122	---> set_color $current_bg
120	120	---> echo -n "$segment_separator "
96	96	--> set_color normal
107	107	--> set -g current_bg NONE
153	153	> echo $_ " "
2212	277179	> __fish_pwd
274967	274967	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
105	185	> __fish_disable_bracketed_paste ls
80	80	-> printf "\e[?2004l"
172	172	> echo $_ " "
239	124826	> __fish_pwd
124587	124587	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2832	477357	> ls
65	65	-> set -l param --color=auto
44	232563	-> if isatty 1...
2474	232383	--> isatty 1
77	77	---> set -l options 'h/help'
98	98	---> argparse -n isatty $options -- $argv
37	136148	---> if set -q _flag_help...
136111	136111	----> set -q _flag_help
36	101	---> if set -q argv[2]...
65	65	----> set -q argv[2]
49	49	---> set -l fd
85	146	---> switch "$argv"...
61	61	----> set fd $argv[1]
93290	93290	---> command test -t "$fd"
136	136	--> set param $param --indicator-style=classify
241897	241897	-> command ls $param $argv
97	203	> __fish_enable_bracketed_paste
106	106	-> printf "\e[?2004h"
324	161640	> fish_mode_prompt
41	161316	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
159233	159233	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
58	2042	--> switch $fish_bind_mode...
637	1984	---> prompt_segment green black "I"
91	91	----> set -l bg
72	72	----> set -l fg
34	222	----> if [ -n "$argv[1]" ]...
96	96	-----> [ -n "$argv[1]" ]
92	92	-----> set bg $argv[1]
34	220	----> if [ -n "$argv[2]" ]...
96	96	-----> [ -n "$argv[2]" ]
90	90	-----> set fg $argv[2]
54	450	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
83	83	-----> set_color $fg
70	70	-----> echo -n " "
90	90	----> set current_bg $argv[1]
32	202	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
86	86	-----> echo -n -s $argv[3] " "
421	5367814	> fish_prompt
105	105	-> set -g RETVAL $status
356	399911	-> prompt_status
22	115	--> if [ $RETVAL -ne 0 ]...
93	93	---> [ $RETVAL -ne 0 ]
672	94290	--> set -l uid (id -u $USER)
93618	93618	---> id -u $USER
28	134	--> if [ $uid -eq 0 ]...
106	106	---> [ $uid -eq 0 ]
24	305016	--> if [ (jobs -l | wc -l) -gt 0 ]...
769	304992	---> [ (jobs -l | wc -l) -gt 0 ]
304223	304223	----> jobs -l | wc -l
189	137109	-> prompt_virtual_env
41	136920	--> if test "$VIRTUAL_ENV"...
136879	136879	---> test "$VIRTUAL_ENV"
487	1480	-> prompt_user
164	164	--> set -l BG 444444
96	96	--> set -l FG BCBCBC
36	733	--> if [ "$theme_display_user" = "yes" ]...
97	97	---> [ "$theme_display_user" = "yes" ]
225	512	---> get_hostname
84	84	----> set -g HOSTNAME_PROMPT ""
22	203	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
181	181	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	88	---> if [ $HOSTNAME_PROMPT ]...
66	66	----> [ $HOSTNAME_PROMPT ]
114	7180	-> prompt_dir
1218	7066	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
543	4231	---> prompt_pwd
97	97	----> set -l options 'h/help'
120	120	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
22	83	----> if set -q _flag_help...
61	61	-----> set -q _flag_help
56	56	----> set -q fish_prompt_pwd_dir_length
72	72	----> or set -l fish_prompt_pwd_dir_length 1
321	321	----> set realhome ~
615	2657	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2042	2042	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	282	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
153	153	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
87	87	---> set -l bg
70	70	---> set -l fg
35	219	---> if [ -n "$argv[1]" ]...
93	93	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
32	207	---> if [ -n "$argv[2]" ]...
86	86	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
75	730	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
198	198	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
109	109	----> set_color -b $bg
91	91	----> set_color $current_bg
85	85	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
87	87	----> set_color $fg
94	94	---> set current_bg $argv[1]
32	210	---> if [ -n "$argv[3]" ]...
86	86	----> [ -n "$argv[3]" ]
92	92	----> echo -n -s $argv[3] " "
196	53176	-> __exists hg
52980	52980	--> command -v "$name" ^/dev/null >&2
715	1748701	-> and prompt_hg
132	132	--> set -l branch
104	104	--> set -l state
56	1747750	--> if command hg id >/dev/null 2>&1...
1747694	1747694	---> command hg id >/dev/null 2>&1
286	54428	-> __exists git
54142	54142	--> command -v "$name" ^/dev/null >&2
1523	2656956	-> and prompt_git
281	281	--> set -l ref
133	2655152	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
344633	344633	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
959	337569	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
336610	336610	----> command git symbolic-ref HEAD 2> /dev/null
33	167	---> if [ $status -gt 0 ]...
134	134	----> [ $status -gt 0 ]
156643	156643	---> set branch_symbol \uE0A0
738	142158	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
141420	141420	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
85	85	---> set -l BG PROMPT
891	442009	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
441118	441118	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
211	1228398	---> if [ "$dirty" = "" ]...
117	117	----> [ "$dirty" = "" ]
89	89	----> set BG yellow
82	82	----> set dirty ''
75	75	----> set -l empty 0
338440	338440	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
133	133	----> set -l target
101	368414	----> if [ $empty = 1 ]...
128	128	-----> [ $empty = 1 ]
135	135	-----> set target 'HEAD'
109	109	-----> set -l unstaged 0
367592	367592	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
112	112	-----> or set unstaged 1
46	237	-----> if [ $unstaged = 1 ]...
98	98	------> [ $unstaged = 1 ]
93	93	------> set dirty $dirty'●'
77	77	----> set -l staged 0
381527	381527	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
41	188	----> if [ $staged = 1 ]...
147	147	-----> [ $staged = 1 ]
62	139045	----> if [ "$dirty" = "" ]...
175	175	-----> [ "$dirty" = "" ]
138808	138808	-----> set PROMPT "$branch $dirty"
1078	3357	---> prompt_segment $BG black $PROMPT
146	146	----> set -l bg
149	149	----> set -l fg
82	676	----> if [ -n "$argv[1]" ]...
315	315	-----> [ -n "$argv[1]" ]
279	279	-----> set bg $argv[1]
74	294	----> if [ -n "$argv[2]" ]...
123	123	-----> [ -n "$argv[2]" ]
97	97	-----> set fg $argv[2]
91	700	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
154	154	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
88	88	-----> set_color $current_bg
110	110	-----> echo -n "$segment_separator "
81	81	-----> set_color -b $bg
82	82	-----> set_color $fg
100	100	----> set current_bg $argv[1]
33	214	----> if [ -n "$argv[3]" ]...
86	86	-----> [ -n "$argv[3]" ]
95	95	-----> echo -n -s $argv[3] " "
193	53425	-> __exists svn
53232	53232	--> command -v "$name" ^/dev/null >&2
400	253739	-> and prompt_svn
104	104	--> set -l ref
54	253235	--> if command svn ls . >/dev/null 2>&1...
253181	253181	---> command svn ls . >/dev/null 2>&1
400	1183	-> prompt_finish
73	576	--> if [ -n $current_bg ]...
143	143	---> [ -n $current_bg ]
122	122	---> set_color -b normal
121	121	---> set_color $current_bg
117	117	---> echo -n "$segment_separator "
98	98	--> set_color normal
109	109	--> set -g current_bg NONE
162	162	> echo $_ " "
251	273140	> __fish_pwd
272889	272889	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
108	2325	> __fish_disable_bracketed_paste cd
2217	2217	-> printf "\e[?2004l"
120	120	> echo $_ " "
162	143043	> __fish_pwd
142881	142881	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
4254	151654	> cd
3509	3617	-> source /usr/share/fish/functions/cd.fish
108	108	--> function cd --description "Change directory"...
63	63	-> set -l MAX_DIR_HIST 25
25	2794	-> if test (count $argv) -gt 1...
649	2769	--> test (count $argv) -gt 1
2120	2120	---> count $argv
30	2391	-> if status --is-command-substitution...
2361	2361	--> status --is-command-substitution
80	80	-> set -l previous $PWD
25	90	-> if test "$argv" = "-"...
65	65	--> test "$argv" = "-"
736	137761	-> builtin cd $argv
116	137025	--> __z_on_variable_pwd VARIABLE SET PWD
776	136909	---> __z_add
134105	136133	----> for i in $Z_EXCLUDE...
37	2028	-----> if contains -- $PWD $i...
1967	1967	------> contains -- $PWD $i
24	24	------> return 0
73	73	-> set -l cd_status $status
93	499	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
117	117	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
38	38	--> set -q dirprev
42	42	--> or set -l dirprev
52	52	--> set -q dirprev[$MAX_DIR_HIST]
63	63	--> set -g dirprev $dirprev $previous
39	39	--> set -e dirnext
55	55	--> set -g __fish_cd_direction prev
32	32	-> return $cd_status
77	147	> __fish_enable_bracketed_paste
70	70	-> printf "\e[?2004h"
330	6597	> fish_mode_prompt
37	6267	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
128	128	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
50	6102	--> switch $fish_bind_mode...
604	6052	---> prompt_segment green black "I"
84	84	----> set -l bg
69	69	----> set -l fg
40	2270	----> if [ -n "$argv[1]" ]...
2108	2108	-----> [ -n "$argv[1]" ]
122	122	-----> set bg $argv[1]
34	217	----> if [ -n "$argv[2]" ]...
91	91	-----> [ -n "$argv[2]" ]
92	92	-----> set fg $argv[2]
57	2490	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2117	2117	-----> set_color -b $bg
93	93	-----> set_color $fg
74	74	-----> echo -n " "
105	105	----> set current_bg $argv[1]
35	213	----> if [ -n "$argv[3]" ]...
88	88	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
388	5001148	> fish_prompt
108	108	-> set -g RETVAL $status
394	395001	-> prompt_status
22	107	--> if [ $RETVAL -ne 0 ]...
85	85	---> [ $RETVAL -ne 0 ]
1319	97659	--> set -l uid (id -u $USER)
96340	96340	---> id -u $USER
35	164	--> if [ $uid -eq 0 ]...
129	129	---> [ $uid -eq 0 ]
36	296677	--> if [ (jobs -l | wc -l) -gt 0 ]...
1002	296641	---> [ (jobs -l | wc -l) -gt 0 ]
295639	295639	----> jobs -l | wc -l
262	136136	-> prompt_virtual_env
37	135874	--> if test "$VIRTUAL_ENV"...
135837	135837	---> test "$VIRTUAL_ENV"
527	1456	-> prompt_user
96	96	--> set -l BG 444444
74	74	--> set -l FG BCBCBC
37	759	--> if [ "$theme_display_user" = "yes" ]...
101	101	---> [ "$theme_display_user" = "yes" ]
227	530	---> get_hostname
87	87	----> set -g HOSTNAME_PROMPT ""
22	216	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
194	194	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	91	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
113	9839	-> prompt_dir
1177	9726	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2815	7028	---> prompt_pwd
288	288	----> set -l options 'h/help'
2237	2237	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
26	97	----> if set -q _flag_help...
71	71	-----> set -q _flag_help
60	60	----> set -q fish_prompt_pwd_dir_length
77	77	----> or set -l fish_prompt_pwd_dir_length 1
306	306	----> set realhome ~
723	886	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
163	163	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	262	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
90	90	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
136	136	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
81	81	---> set -l bg
67	67	---> set -l fg
33	213	---> if [ -n "$argv[1]" ]...
91	91	----> [ -n "$argv[1]" ]
89	89	----> set bg $argv[1]
33	210	---> if [ -n "$argv[2]" ]...
89	89	----> [ -n "$argv[2]" ]
88	88	----> set fg $argv[2]
69	650	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
146	146	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	----> set_color -b $bg
87	87	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
86	86	----> set_color $fg
91	91	---> set current_bg $argv[1]
33	209	---> if [ -n "$argv[3]" ]...
82	82	----> [ -n "$argv[3]" ]
94	94	----> echo -n -s $argv[3] " "
176	43403	-> __exists hg
43227	43227	--> command -v "$name" ^/dev/null >&2
623	1626584	-> and prompt_hg
161	161	--> set -l branch
118	118	--> set -l state
47	1625682	--> if command hg id >/dev/null 2>&1...
1625635	1625635	---> command hg id >/dev/null 2>&1
204	53674	-> __exists git
53470	53470	--> command -v "$name" ^/dev/null >&2
1146	2457901	-> and prompt_git
2779	2779	--> set -l ref
210	2453976	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
325446	325446	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
849	313343	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
312494	312494	----> command git symbolic-ref HEAD 2> /dev/null
27	128	---> if [ $status -gt 0 ]...
101	101	----> [ $status -gt 0 ]
131879	131879	---> set branch_symbol \uE0A0
841	136090	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
135249	135249	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
116	116	---> set -l BG PROMPT
1387	417417	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
416030	416030	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
214	1126438	---> if [ "$dirty" = "" ]...
180	180	----> [ "$dirty" = "" ]
106	106	----> set BG yellow
104	104	----> set dirty ''
101	101	----> set -l empty 0
310344	310344	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
141	141	----> set -l target
97	314874	----> if [ $empty = 1 ]...
92	92	-----> [ $empty = 1 ]
85	85	-----> set target 'HEAD'
73	73	-----> set -l unstaged 0
314182	314182	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
112	112	-----> or set unstaged 1
45	233	-----> if [ $unstaged = 1 ]...
95	95	------> [ $unstaged = 1 ]
93	93	------> set dirty $dirty'●'
79	79	----> set -l staged 0
366275	366275	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
53	169	----> if [ $staged = 1 ]...
116	116	-----> [ $staged = 1 ]
41	133851	----> if [ "$dirty" = "" ]...
96	96	-----> [ "$dirty" = "" ]
133714	133714	-----> set PROMPT "$branch $dirty"
703	2909	---> prompt_segment $BG black $PROMPT
108	108	----> set -l bg
67	67	----> set -l fg
47	326	----> if [ -n "$argv[1]" ]...
124	124	-----> [ -n "$argv[1]" ]
155	155	-----> set bg $argv[1]
72	564	----> if [ -n "$argv[2]" ]...
230	230	-----> [ -n "$argv[2]" ]
262	262	-----> set fg $argv[2]
125	837	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
197	197	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
138	138	-----> set_color -b $bg
121	121	-----> set_color $current_bg
92	92	-----> echo -n "$segment_separator "
82	82	-----> set_color -b $bg
82	82	-----> set_color $fg
96	96	----> set current_bg $argv[1]
32	208	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
92	92	-----> echo -n -s $argv[3] " "
206	54068	-> __exists svn
53862	53862	--> command -v "$name" ^/dev/null >&2
304	221718	-> and prompt_svn
90	90	--> set -l ref
45	221324	--> if command svn ls . >/dev/null 2>&1...
221279	221279	---> command svn ls . >/dev/null 2>&1
274	872	-> prompt_finish
56	444	--> if [ -n $current_bg ]...
113	113	---> [ -n $current_bg ]
94	94	---> set_color -b normal
92	92	---> set_color $current_bg
89	89	---> echo -n "$segment_separator "
71	71	--> set_color normal
83	83	--> set -g current_bg NONE
117	117	> echo $_ " "
3382	273221	> __fish_pwd
269839	269839	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
103	182	> __fish_disable_bracketed_paste ls
79	79	-> printf "\e[?2004l"
122	122	> echo $_ " "
192	135735	> __fish_pwd
135543	135543	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
4289	469746	> ls
88	88	-> set -l param --color=auto
42	233119	-> if isatty 1...
2659	232981	--> isatty 1
78	78	---> set -l options 'h/help'
117	117	---> argparse -n isatty $options -- $argv
36	137059	---> if set -q _flag_help...
137023	137023	----> set -q _flag_help
28	90	---> if set -q argv[2]...
62	62	----> set -q argv[2]
49	49	---> set -l fd
84	144	---> switch "$argv"...
60	60	----> set fd $argv[1]
92785	92785	---> command test -t "$fd"
96	96	--> set param $param --indicator-style=classify
232250	232250	-> command ls $param $argv
87	169	> __fish_enable_bracketed_paste
82	82	-> printf "\e[?2004h"
321	170042	> fish_mode_prompt
42	169721	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
167656	167656	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	2023	--> switch $fish_bind_mode...
632	1966	---> prompt_segment green black "I"
89	89	----> set -l bg
72	72	----> set -l fg
34	222	----> if [ -n "$argv[1]" ]...
96	96	-----> [ -n "$argv[1]" ]
92	92	-----> set bg $argv[1]
32	204	----> if [ -n "$argv[2]" ]...
84	84	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
54	455	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
152	152	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
84	84	-----> set_color $fg
70	70	-----> echo -n " "
90	90	----> set current_bg $argv[1]
32	202	----> if [ -n "$argv[3]" ]...
82	82	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
382	4972468	> fish_prompt
105	105	-> set -g RETVAL $status
353	371120	-> prompt_status
22	112	--> if [ $RETVAL -ne 0 ]...
90	90	---> [ $RETVAL -ne 0 ]
715	95123	--> set -l uid (id -u $USER)
94408	94408	---> id -u $USER
33	162	--> if [ $uid -eq 0 ]...
129	129	---> [ $uid -eq 0 ]
28	275370	--> if [ (jobs -l | wc -l) -gt 0 ]...
840	275342	---> [ (jobs -l | wc -l) -gt 0 ]
274502	274502	----> jobs -l | wc -l
185	135337	-> prompt_virtual_env
30	135152	--> if test "$VIRTUAL_ENV"...
135122	135122	---> test "$VIRTUAL_ENV"
581	1828	-> prompt_user
149	149	--> set -l BG 444444
135	135	--> set -l FG BCBCBC
41	963	--> if [ "$theme_display_user" = "yes" ]...
112	112	---> [ "$theme_display_user" = "yes" ]
279	680	---> get_hostname
100	100	----> set -g HOSTNAME_PROMPT ""
30	301	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
271	271	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
28	130	---> if [ $HOSTNAME_PROMPT ]...
102	102	----> [ $HOSTNAME_PROMPT ]
224	7854	-> prompt_dir
1698	7630	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
508	4390	---> prompt_pwd
119	119	----> set -l options 'h/help'
120	120	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
24	87	----> if set -q _flag_help...
63	63	-----> set -q _flag_help
59	59	----> set -q fish_prompt_pwd_dir_length
75	75	----> or set -l fish_prompt_pwd_dir_length 1
433	433	----> set realhome ~
647	2718	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2071	2071	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	271	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
94	94	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
140	140	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
70	70	---> set -l fg
40	223	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
31	206	---> if [ -n "$argv[2]" ]...
86	86	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
71	656	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	----> set_color -b $bg
90	90	----> set_color $current_bg
82	82	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
86	86	----> set_color $fg
92	92	---> set current_bg $argv[1]
38	211	---> if [ -n "$argv[3]" ]...
85	85	----> [ -n "$argv[3]" ]
88	88	----> echo -n -s $argv[3] " "
177	52946	-> __exists hg
52769	52769	--> command -v "$name" ^/dev/null >&2
532	1645115	-> and prompt_hg
94	94	--> set -l branch
87	87	--> set -l state
52	1644402	--> if command hg id >/dev/null 2>&1...
1644350	1644350	---> command hg id >/dev/null 2>&1
248	51848	-> __exists git
51600	51600	--> command -v "$name" ^/dev/null >&2
1105	2415291	-> and prompt_git
95	95	--> set -l ref
135	2414091	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
300232	300232	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
830	309431	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
308601	308601	----> command git symbolic-ref HEAD 2> /dev/null
65	232	---> if [ $status -gt 0 ]...
167	167	----> [ $status -gt 0 ]
161947	161947	---> set branch_symbol \uE0A0
762	133057	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
132295	132295	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
108	108	---> set -l BG PROMPT
1169	397152	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
395983	395983	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
182	1109082	---> if [ "$dirty" = "" ]...
136	136	----> [ "$dirty" = "" ]
78	78	----> set BG yellow
78	78	----> set dirty ''
71	71	----> set -l empty 0
303056	303056	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
102	102	----> set -l target
95	342330	----> if [ $empty = 1 ]...
92	92	-----> [ $empty = 1 ]
86	86	-----> set target 'HEAD'
72	72	-----> set -l unstaged 0
341633	341633	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
114	114	-----> or set unstaged 1
38	238	-----> if [ $unstaged = 1 ]...
105	105	------> [ $unstaged = 1 ]
95	95	------> set dirty $dirty'●'
87	87	----> set -l staged 0
325610	325610	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
31	142	----> if [ $staged = 1 ]...
111	111	-----> [ $staged = 1 ]
41	137210	----> if [ "$dirty" = "" ]...
93	93	-----> [ "$dirty" = "" ]
137076	137076	-----> set PROMPT "$branch $dirty"
681	2715	---> prompt_segment $BG black $PROMPT
117	117	----> set -l bg
86	86	----> set -l fg
37	231	----> if [ -n "$argv[1]" ]...
96	96	-----> [ -n "$argv[1]" ]
98	98	-----> set bg $argv[1]
88	396	----> if [ -n "$argv[2]" ]...
121	121	-----> [ -n "$argv[2]" ]
187	187	-----> set fg $argv[2]
82	899	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
343	343	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
111	111	-----> set_color -b $bg
114	114	-----> set_color $current_bg
86	86	-----> echo -n "$segment_separator "
83	83	-----> set_color -b $bg
80	80	-----> set_color $fg
94	94	----> set current_bg $argv[1]
33	211	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
176	53113	-> __exists svn
52937	52937	--> command -v "$name" ^/dev/null >&2
320	236625	-> and prompt_svn
91	91	--> set -l ref
45	236214	--> if command svn ls . >/dev/null 2>&1...
236169	236169	---> command svn ls . >/dev/null 2>&1
274	904	-> prompt_finish
55	483	--> if [ -n $current_bg ]...
103	103	---> [ -n $current_bg ]
136	136	---> set_color -b normal
101	101	---> set_color $current_bg
88	88	---> echo -n "$segment_separator "
68	68	--> set_color normal
79	79	--> set -g current_bg NONE
107	107	> echo $_ " "
160	271606	> __fish_pwd
271446	271446	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
3766	1828150	> source /home/17411/.config/fish/completions/fisher.fish
1533	1824384	-> fisher complete
2101	2101	--> set -q XDG_CACHE_HOME
334	334	--> or set XDG_CACHE_HOME ~/.cache
66	66	--> set -q XDG_CONFIG_HOME
294	294	--> or set XDG_CONFIG_HOME ~/.config
99	99	--> set -g fish_config $XDG_CONFIG_HOME/fish
93	93	--> set -g fisher_cache $XDG_CACHE_HOME/fisher
321	321	--> set -g fisher_config $XDG_CONFIG_HOME/fisher
68	68	--> set -q fisher_path
90	90	--> set -g fishfile $fish_config/fishfile
211	3210	--> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
26	355	---> if test ! -d $path...
329	329	----> test ! -d $path
25	346	---> if test ! -d $path...
321	321	----> test ! -d $path
26	341	---> if test ! -d $path...
315	315	----> test ! -d $path
25	346	---> if test ! -d $path...
321	321	----> test ! -d $path
34	372	---> if test ! -d $path...
338	338	----> test ! -d $path
34	856	---> if test ! -d $path...
822	822	----> test ! -d $path
26	383	---> if test ! -d $path...
357	357	----> test ! -d $path
27	357	--> if test ! -e $fisher_path/completions/fisher.fish...
330	330	---> test ! -e $fisher_path/completions/fisher.fish
30	614	--> if test -e $fisher_path/conf.d/fisher.fish...
519	519	---> test -e $fisher_path/conf.d/fisher.fish
65	65	---> switch "$version"...
36	686	--> if test -e "$fisher_path/fishfile"...
320	320	---> test -e "$fisher_path/fishfile"
330	330	---> and test ! -e "$fishfile"
79	1814518	--> switch "$cmd"...
2528	1814439	---> _fisher_complete
2035	2035	----> complete -ec fisher
133	133	----> complete -xc fisher -n __fish_use_subcommand -a add -d "Add packages"
115	115	----> complete -xc fisher -n __fish_use_subcommand -a rm -d "Remove packages"
121	121	----> complete -xc fisher -n __fish_use_subcommand -a ls -d "List installed packages matching REGEX"
110	110	----> complete -xc fisher -n __fish_use_subcommand -a --help -d "Show usage help"
121	121	----> complete -xc fisher -n __fish_use_subcommand -a --version -d "$fisher_version"
109	109	----> complete -xc fisher -n __fish_use_subcommand -a self-update -d "Update to the latest version"
1178	1809167	----> for pkg in (fisher ls)...
1593	1807096	-----> fisher ls
83	83	------> set -q XDG_CACHE_HOME
339	339	------> or set XDG_CACHE_HOME ~/.cache
64	64	------> set -q XDG_CONFIG_HOME
328	328	------> or set XDG_CONFIG_HOME ~/.config
98	98	------> set -g fish_config $XDG_CONFIG_HOME/fish
91	91	------> set -g fisher_cache $XDG_CACHE_HOME/fisher
89	89	------> set -g fisher_config $XDG_CONFIG_HOME/fisher
56	56	------> set -q fisher_path
87	87	------> set -g fishfile $fish_config/fishfile
201	2629	------> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
25	362	-------> if test ! -d $path...
337	337	--------> test ! -d $path
26	343	-------> if test ! -d $path...
317	317	--------> test ! -d $path
27	344	-------> if test ! -d $path...
317	317	--------> test ! -d $path
26	371	-------> if test ! -d $path...
345	345	--------> test ! -d $path
26	332	-------> if test ! -d $path...
306	306	--------> test ! -d $path
25	329	-------> if test ! -d $path...
304	304	--------> test ! -d $path
25	347	-------> if test ! -d $path...
322	322	--------> test ! -d $path
27	579	------> if test ! -e $fisher_path/completions/fisher.fish...
552	552	-------> test ! -e $fisher_path/completions/fisher.fish
32	476	------> if test -e $fisher_path/conf.d/fisher.fish...
382	382	-------> test -e $fisher_path/conf.d/fisher.fish
62	62	-------> switch "$version"...
42	711	------> if test -e "$fisher_path/fishfile"...
318	318	-------> test -e "$fisher_path/fishfile"
351	351	-------> and test ! -e "$fishfile"
103	1799873	------> switch "$cmd"...
146	146	-------> set -e argv[1]
110	1799624	-------> if test -s "$fishfile"...
1109	1109	--------> test -s "$fishfile"
1015	703589	--------> set -l file (_fisher_fmt <$fishfile | _fisher_parse -R | command sed "s|@.*||")
313446	702574	---------> _fisher_fmt <$fishfile | _fisher_parse -R | command sed "s|@.*||"
100977	100977	----------> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
123	123	----------> set -e argv[1..2]
288028	288028	----------> command awk -v FS="[[:space:]]*#+" -v MODE="$mode" -v CMD="$cmd" -v ARGSTR="$argv" '
        BEGIN {
            for (n = split(ARGSTR, a, " "); i++ < n;) pkgs[getkey(a[i])] = a[i]
        }
        !NF { next } { k = getkey($1) }
        MODE == "-R" && !(k in pkgs) && $0 = $1
        MODE == "-W" && (/^#/ || k in pkgs || CMD != "rm") { print pkgs[k] (sub($1, "") ? $0 : "") }
        MODE == "-W" || CMD == "rm" { delete pkgs[k] }
        END {
            for (k in pkgs) {
                if (CMD != "rm" || MODE == "-W") print pkgs[k]
                else print "fisher: cannot remove \""k"\" -- package is not in fishfile" > "/dev/stderr"
            }
        }
        function getkey(s,  a) {
            return (split(s, a, /@+|:/) > 2) ? a[2]"/"a[1]"/"a[3] : a[1]
        }
    '
361811	1094816	--------> _fisher_ls | _fisher_fmt | command awk -v FILE="$file" "
                    BEGIN { for (n = split(FILE, f); ++i <= n;) file[f[i]] } \$0 in file && /$argv[1]/
                " | command sed "s|^$HOME|~|"
5510	499697	---------> for pkg in $fisher_config/*/*/*...
258469	258469	----------> command readlink $pkg
3154	3154	----------> or echo $pkg
232439	232439	----------> command readlink $pkg
125	125	----------> or echo $pkg
233308	233308	---------> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
294	294	-----> complete -xc fisher -n "__fish_seen_subcommand_from rm" -a $pkg
599	599	-----> complete -xc fisher -n "__fish_seen_subcommand_from rm" -a $pkg
127	2477	> __fish_disable_bracketed_paste fisher\ ls\ \[a-z\]\\\*
2350	2350	-> printf "\e[?2004l"
128	128	> echo $_ " "
2066	140070	> __fish_pwd
138004	138004	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
1957	1979115	> fisher ls [a-z]\*
158790	158790	-> set -q XDG_CACHE_HOME
362	362	-> or set XDG_CACHE_HOME ~/.cache
42	42	-> set -q XDG_CONFIG_HOME
273	273	-> or set XDG_CONFIG_HOME ~/.config
73	73	-> set -g fish_config $XDG_CONFIG_HOME/fish
64	64	-> set -g fisher_cache $XDG_CACHE_HOME/fisher
62	62	-> set -g fisher_config $XDG_CONFIG_HOME/fisher
33	33	-> set -q fisher_path
59	59	-> set -g fishfile $fish_config/fishfile
226	4367	-> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
29	2320	--> if test ! -d $path...
2291	2291	---> test ! -d $path
29	306	--> if test ! -d $path...
277	277	---> test ! -d $path
34	312	--> if test ! -d $path...
278	278	---> test ! -d $path
26	299	--> if test ! -d $path...
273	273	---> test ! -d $path
26	298	--> if test ! -d $path...
272	272	---> test ! -d $path
27	294	--> if test ! -d $path...
267	267	---> test ! -d $path
26	312	--> if test ! -d $path...
286	286	---> test ! -d $path
26	312	-> if test ! -e $fisher_path/completions/fisher.fish...
286	286	--> test ! -e $fisher_path/completions/fisher.fish
32	372	-> if test -e $fisher_path/conf.d/fisher.fish...
276	276	--> test -e $fisher_path/conf.d/fisher.fish
64	64	--> switch "$version"...
45	597	-> if test -e "$fisher_path/fishfile"...
275	275	--> test -e "$fisher_path/fishfile"
277	277	--> and test ! -e "$fishfile"
89	1811752	-> switch "$cmd"...
63	63	--> set -e argv[1]
109	1811600	--> if test -s "$fishfile"...
308	308	---> test -s "$fishfile"
808	709780	---> set -l file (_fisher_fmt <$fishfile | _fisher_parse -R | command sed "s|@.*||")
346473	708972	----> _fisher_fmt <$fishfile | _fisher_parse -R | command sed "s|@.*||"
88769	88769	-----> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
122	122	-----> set -e argv[1..2]
273608	273608	-----> command awk -v FS="[[:space:]]*#+" -v MODE="$mode" -v CMD="$cmd" -v ARGSTR="$argv" '
        BEGIN {
            for (n = split(ARGSTR, a, " "); i++ < n;) pkgs[getkey(a[i])] = a[i]
        }
        !NF { next } { k = getkey($1) }
        MODE == "-R" && !(k in pkgs) && $0 = $1
        MODE == "-W" && (/^#/ || k in pkgs || CMD != "rm") { print pkgs[k] (sub($1, "") ? $0 : "") }
        MODE == "-W" || CMD == "rm" { delete pkgs[k] }
        END {
            for (k in pkgs) {
                if (CMD != "rm" || MODE == "-W") print pkgs[k]
                else print "fisher: cannot remove \""k"\" -- package is not in fishfile" > "/dev/stderr"
            }
        }
        function getkey(s,  a) {
            return (split(s, a, /@+|:/) > 2) ? a[2]"/"a[1]"/"a[3] : a[1]
        }
    '
386176	1101403	---> _fisher_ls | _fisher_fmt | command awk -v FILE="$file" "
                    BEGIN { for (n = split(FILE, f); ++i <= n;) file[f[i]] } \$0 in file && /$argv[1]/
                " | command sed "s|^$HOME|~|"
6272	479531	----> for pkg in $fisher_config/*/*/*...
252635	252635	-----> command readlink $pkg
122	122	-----> or echo $pkg
220361	220361	-----> command readlink $pkg
141	141	-----> or echo $pkg
235696	235696	----> command sed "s|^[[:space:]]*||;s|^$fisher_config/||;s|^~|$HOME|;s|^\.\/*|$PWD/|;s|^https*:/*||;s|^github\.com/||;s|/*\$||"
90	180	> __fish_enable_bracketed_paste
90	90	-> printf "\e[?2004h"
327	170572	> fish_mode_prompt
45	170245	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
164016	164016	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
62	6184	--> switch $fish_bind_mode...
689	6122	---> prompt_segment green black "I"
93	93	----> set -l bg
72	72	----> set -l fg
37	2278	----> if [ -n "$argv[1]" ]...
2138	2138	-----> [ -n "$argv[1]" ]
103	103	-----> set bg $argv[1]
33	228	----> if [ -n "$argv[2]" ]...
102	102	-----> [ -n "$argv[2]" ]
93	93	-----> set fg $argv[2]
56	2456	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
151	151	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2083	2083	-----> set_color -b $bg
91	91	-----> set_color $fg
75	75	-----> echo -n " "
96	96	----> set current_bg $argv[1]
33	210	----> if [ -n "$argv[3]" ]...
87	87	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
387	5018170	> fish_prompt
111	111	-> set -g RETVAL $status
386	379154	-> prompt_status
24	118	--> if [ $RETVAL -ne 0 ]...
94	94	---> [ $RETVAL -ne 0 ]
745	97136	--> set -l uid (id -u $USER)
96391	96391	---> id -u $USER
27	127	--> if [ $uid -eq 0 ]...
100	100	---> [ $uid -eq 0 ]
31	281387	--> if [ (jobs -l | wc -l) -gt 0 ]...
774	281356	---> [ (jobs -l | wc -l) -gt 0 ]
280582	280582	----> jobs -l | wc -l
216	141527	-> prompt_virtual_env
29	141311	--> if test "$VIRTUAL_ENV"...
141282	141282	---> test "$VIRTUAL_ENV"
498	1390	-> prompt_user
87	87	--> set -l BG 444444
72	72	--> set -l FG BCBCBC
35	733	--> if [ "$theme_display_user" = "yes" ]...
95	95	---> [ "$theme_display_user" = "yes" ]
228	516	---> get_hostname
84	84	----> set -g HOSTNAME_PROMPT ""
23	204	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
181	181	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	87	---> if [ $HOSTNAME_PROMPT ]...
65	65	----> [ $HOSTNAME_PROMPT ]
111	11055	-> prompt_dir
1130	10944	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2499	8187	---> prompt_pwd
111	111	----> set -l options 'h/help'
2093	2093	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	94	----> if set -q _flag_help...
69	69	-----> set -q _flag_help
60	60	----> set -q fish_prompt_pwd_dir_length
78	78	----> or set -l fish_prompt_pwd_dir_length 1
308	308	----> set realhome ~
649	2677	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2028	2028	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	267	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
139	139	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
83	83	---> set -l bg
68	68	---> set -l fg
32	213	---> if [ -n "$argv[1]" ]...
91	91	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
32	209	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
93	93	----> set fg $argv[2]
70	696	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
89	89	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
122	122	----> set_color -b $bg
88	88	----> set_color $fg
92	92	---> set current_bg $argv[1]
36	266	---> if [ -n "$argv[3]" ]...
88	88	----> [ -n "$argv[3]" ]
142	142	----> echo -n -s $argv[3] " "
173	53873	-> __exists hg
53700	53700	--> command -v "$name" ^/dev/null >&2
562	1657929	-> and prompt_hg
132	132	--> set -l branch
77	77	--> set -l state
45	1657158	--> if command hg id >/dev/null 2>&1...
1657113	1657113	---> command hg id >/dev/null 2>&1
228	52531	-> __exists git
52303	52303	--> command -v "$name" ^/dev/null >&2
1573	2429501	-> and prompt_git
119	119	--> set -l ref
126	2427809	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
311746	311746	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
813	332280	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
331467	331467	----> command git symbolic-ref HEAD 2> /dev/null
27	126	---> if [ $status -gt 0 ]...
99	99	----> [ $status -gt 0 ]
132556	132556	---> set branch_symbol \uE0A0
791	124536	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
123745	123745	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
84	84	---> set -l BG PROMPT
1220	399408	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
398188	398188	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
255	1124751	---> if [ "$dirty" = "" ]...
181	181	----> [ "$dirty" = "" ]
107	107	----> set BG yellow
114	114	----> set dirty ''
102	102	----> set -l empty 0
329918	329918	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
184	184	----> set -l target
133	320081	----> if [ $empty = 1 ]...
197	197	-----> [ $empty = 1 ]
170	170	-----> set target 'HEAD'
162	162	-----> set -l unstaged 0
319074	319074	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
115	115	-----> or set unstaged 1
39	230	-----> if [ $unstaged = 1 ]...
95	95	------> [ $unstaged = 1 ]
96	96	------> set dirty $dirty'●'
88	88	----> set -l staged 0
339913	339913	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
28	141	----> if [ $staged = 1 ]...
113	113	-----> [ $staged = 1 ]
39	133667	----> if [ "$dirty" = "" ]...
91	91	-----> [ "$dirty" = "" ]
133537	133537	-----> set PROMPT "$branch $dirty"
710	2196	---> prompt_segment $BG black $PROMPT
86	86	----> set -l bg
67	67	----> set -l fg
33	213	----> if [ -n "$argv[1]" ]...
92	92	-----> [ -n "$argv[1]" ]
88	88	-----> set bg $argv[1]
30	198	----> if [ -n "$argv[2]" ]...
83	83	-----> [ -n "$argv[2]" ]
85	85	-----> set fg $argv[2]
69	630	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
152	152	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
90	90	-----> set_color -b $bg
86	86	-----> set_color $current_bg
80	80	-----> echo -n "$segment_separator "
77	77	-----> set_color -b $bg
76	76	-----> set_color $fg
89	89	----> set current_bg $argv[1]
32	203	----> if [ -n "$argv[3]" ]...
81	81	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
178	53229	-> __exists svn
53051	53051	--> command -v "$name" ^/dev/null >&2
310	236608	-> and prompt_svn
98	98	--> set -l ref
44	236200	--> if command svn ls . >/dev/null 2>&1...
236156	236156	---> command svn ls . >/dev/null 2>&1
267	875	-> prompt_finish
53	460	--> if [ -n $current_bg ]...
104	104	---> [ -n $current_bg ]
126	126	---> set_color -b normal
91	91	---> set_color $current_bg
86	86	---> echo -n "$segment_separator "
68	68	--> set_color normal
80	80	--> set -g current_bg NONE
109	109	> echo $_ " "
176	262616	> __fish_pwd
262440	262440	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
55261	365064	> source /usr/share/fish/completions/git.fish
32	32	-> function __fish_git_commits...
17	17	-> function __fish_git_recent_commits...
14	14	-> function __fish_git_local_branches...
13	13	-> function __fish_git_remote_branches...
14	14	-> function __fish_git_branches...
15	15	-> function __fish_git_unique_remote_branches...
14	14	-> function __fish_git_tags...
13	13	-> function __fish_git_dir...
13	13	-> function __fish_git_heads...
18	18	-> function __fish_git_refs...
13	13	-> function __fish_git_remotes...
14	14	-> function __fish_git_modified_files...
14	14	-> function __fish_git_staged_files...
13	13	-> function __fish_git_add_files...
14	14	-> function __fish_git_ranges...
18	18	-> function __fish_git_needs_command...
53226	213889	-> git config -z --get-regexp 'alias\..*' | while read -lz alias command _
    # Git aliases can contain chars that variable names can't - escape them.
    if test (count $command) -ne 1
        printf (_ "Warning: alias '%s' has more than one command: '%s'") $alias "$command" >&2
    end
    set alias (string replace 'alias.' '' -- $alias | string escape --style=var)
    set -g __fish_git_alias_$alias $command
end
160663	160663	--> read -lz alias command _
43	43	-> function __fish_git_using_command...
27	27	-> function __fish_git_stash_using_command...
18	18	-> function __fish_git_stash_not_using_subcommand...
22	22	-> function __fish_git_complete_stashes...
16	16	-> function __fish_git_aliases...
20	20	-> function __fish_git_custom_commands...
21	21	-> function __fish_git_branch_for_remote...
19	19	-> function __fish_git_possible_commithash...
19	19	-> function __fish_git_reflog...
3439	3439	-> complete -f -c git -l help -d 'Display the manual of a git command'
202	202	-> complete -f -c git -n '__fish_git_needs_command' -l version -d 'Display version'
238	238	-> complete -x -c git -n '__fish_git_needs_command' -s C -a '(__fish_complete_directories)' -d 'Run as if git was started in this directory'
340	340	-> complete -x -c git -n '__fish_git_needs_command' -s c -a '(command git config -l ^/dev/null | string replace = \t)' -d 'Set a configuration option'
235	235	-> complete -x -c git -n '__fish_git_needs_command' -l exec-path -a '(__fish_git_complete_directories)' -d 'Get or set the path to the git programs'
172	172	-> complete -f -c git -n '__fish_git_needs_command' -l html-path -d 'Print the path to the html documentation'
166	166	-> complete -f -c git -n '__fish_git_needs_command' -l man-path -d 'Print the path to the man documentation'
166	166	-> complete -f -c git -n '__fish_git_needs_command' -l info-path -d 'Print the path to the info documentation'
177	177	-> complete -f -c git -n '__fish_git_needs_command' -s p -l paginate -d 'Pipe output into a pager'
166	166	-> complete -f -c git -n '__fish_git_needs_command' -l no-pager -d 'Do not pipe output into a pager'
164	164	-> complete -f -c git -n '__fish_git_needs_command' -l git-dir -d 'Set the path to the repository'
163	163	-> complete -f -c git -n '__fish_git_needs_command' -l work-tree -d 'Set the path to the working tree'
163	163	-> complete -f -c git -n '__fish_git_needs_command' -l namespace -d 'Set the namespace'
198	198	-> complete -f -c git -n '__fish_git_needs_command' -l bare -d 'Treat the repository as bare'
167	167	-> complete -f -c git -n '__fish_git_needs_command' -l no-replace-objects -d 'Do not use replacement refs to replace git objects'
162	162	-> complete -f -c git -n '__fish_git_needs_command' -l literal-pathspecs -d 'Treat pathspecs literally'
163	163	-> complete -f -c git -n '__fish_git_needs_command' -l glob-pathspecs -d 'Treat pathspecs as globs'
164	164	-> complete -f -c git -n '__fish_git_needs_command' -l noglob-pathspecs -d "Don't treat pathspecs as globs"
196	196	-> complete -f -c git -n '__fish_git_needs_command' -l icase-pathspecs -d 'Match pathspecs case-insensitively'
266	266	-> complete -f -c git -n '__fish_git_using_command log show diff-tree rev-list' -l pretty -a 'oneline short medium full fuller email raw format:'
185	185	-> complete -f -c git -n '__fish_git_needs_command' -a fetch -d 'Download objects and refs from another repository'
265	265	-> complete -f -c git -n '__fish_git_using_command fetch; and not __fish_git_branch_for_remote' -a '(__fish_git_remotes)' -d 'Remote'
297	297	-> complete -f -c git -n '__fish_git_using_command fetch; and __fish_git_branch_for_remote' -a '(__fish_git_branch_for_remote)' -d 'Branch'
182	182	-> complete -f -c git -n '__fish_git_using_command fetch' -s q -l quiet -d 'Be quiet'
177	177	-> complete -f -c git -n '__fish_git_using_command fetch' -s v -l verbose -d 'Be verbose'
160	160	-> complete -f -c git -n '__fish_git_using_command fetch' -s a -l append -d 'Append ref names and object names'
122	122	-> complete -f -c git -n '__fish_git_using_command fetch' -s f -l force -d 'Force update of local branches'
245	245	-> complete -f -c git -n '__fish_git_needs_command' -a filter-branch -d 'Rewrite branches'
143	143	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l env-filter -d 'This filter may be used if you only need to modify the environment'
196	196	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l tree-filter -d 'This is the filter for rewriting the tree and its contents.'
212	212	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l index-filter -d 'This is the filter for rewriting the index.'
204	204	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l parent-filter -d 'This is the filter for rewriting the commit\\(cqs parent list.'
255	255	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l msg-filter -d 'This is the filter for rewriting the commit messages.'
174	174	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l commit-filter -d 'This is the filter for performing the commit.'
190	190	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l tag-name-filter -d 'This is the filter for rewriting tag names.'
171	171	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l subdirectory-filter -d 'Only look at the history which touches the given subdirectory.'
156	156	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l prune-empty -d 'Ignore empty commits generated by filters'
205	205	-> complete -f -c git -n '__fish_git_using_command filter-branch' -l original -d 'Use this option to set the namespace where the original commits will be stored'
187	187	-> complete -r -c git -n '__fish_git_using_command filter-branch' -s d -d 'Use this option to set the path to the temporary directory used for rewriting'
197	197	-> complete -c git -n '__fish_git_using_command filter-branch' -s f -l force -d 'Force filter branch to start even w/ refs in refs/original or existing temp directory'
4096	4096	-> set -l remotecommands add rm show prune update rename set-head set-url set-branches
160	160	-> complete -f -c git -n '__fish_git_needs_command' -a remote -d 'Manage set of tracked repositories'
157	157	-> complete -f -c git -n '__fish_git_using_command remote' -a '(__fish_git_remotes)'
232	232	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -s v -l verbose -d 'Be verbose'
220	220	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a add -d 'Adds a new remote'
219	219	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a rm -d 'Removes a remote'
213	213	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a show -d 'Shows a remote'
230	230	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a prune -d 'Deletes all stale tracking branches'
211	211	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a update -d 'Fetches updates'
212	212	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a rename -d 'Renames a remote'
212	212	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a set-head -d 'Sets the default branch for a remote'
292	292	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a set-url -d 'Changes URLs for a remote'
232	232	-> complete -f -c git -n "__fish_git_using_command remote; and not __fish_seen_subcommand_from $remotecommands" -a set-branches -d 'Changes the list of branches tracked by a remote'
145	145	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from add " -s f -d 'Once the remote information is set up git fetch <name> is run'
142	142	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from add " -l tags -d 'Import every tag from a remote with git fetch <name>'
140	140	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from add " -l no-tags -d "Don't import tags from a remote with git fetch <name>"
158	158	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from set-branches" -l add -d 'Add to the list of currently tracked branches instead of replacing it'
144	144	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from set-url" -l push -d 'Manipulate push URLs instead of fetch URLs'
139	139	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from set-url" -l add -d 'Add new URL instead of changing the existing URLs'
138	138	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from set-url" -l delete -d 'Remove URLs that match specified URL'
139	139	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from show" -s n -d 'Remote heads are not queried, cached information is used instead'
138	138	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from prune" -l dry-run -d 'Report what will be pruned but do not actually prune it'
139	139	-> complete -f -c git -n "__fish_git_using_command remote; and __fish_seen_subcommand_from update" -l prune -d 'Prune all remotes that are updated'
135	135	-> complete -f -c git -n '__fish_git_needs_command' -a show -d 'Shows the last commit of a branch'
153	153	-> complete -f -c git -n '__fish_git_using_command show' -a '(__fish_git_branches)' -d 'Branch'
148	148	-> complete -f -c git -n '__fish_git_using_command show' -a '(__fish_git_unique_remote_branches)' -d 'Remote branch'
148	148	-> complete -f -c git -n '__fish_git_using_command show' -a '(__fish_git_tags)' --description 'Tag'
133	133	-> complete -f -c git -n '__fish_git_using_command show' -a '(__fish_git_commits)'
114	114	-> complete -f -c git -n '__fish_git_using_command show' -l stat -d 'Generate a diffstat, showing the number of changed lines of each file'
119	119	-> complete -f -c git -n '__fish_git_needs_command' -a show-branch -d 'Shows the commits on branches'
159	159	-> complete -f -c git -n '__fish_git_using_command show-branch' -a '(__fish_git_refs)' --description 'Rev'
119	119	-> complete -c git -n '__fish_git_needs_command' -a add -d 'Add file contents to the index'
124	124	-> complete -c git -n '__fish_git_using_command add' -s n -l dry-run -d "Don't actually add the file(s)"
168	168	-> complete -c git -n '__fish_git_using_command add' -s v -l verbose -d 'Be verbose'
229	229	-> complete -c git -n '__fish_git_using_command add' -s f -l force -d 'Allow adding otherwise ignored files'
249	249	-> complete -c git -n '__fish_git_using_command add' -s i -l interactive -d 'Interactive mode'
223	223	-> complete -c git -n '__fish_git_using_command add' -s p -l patch -d 'Interactively choose hunks to stage'
219	219	-> complete -c git -n '__fish_git_using_command add' -s e -l edit -d 'Manually create a patch'
220	220	-> complete -c git -n '__fish_git_using_command add' -s u -l update -d 'Only match tracked files'
230	230	-> complete -c git -n '__fish_git_using_command add' -s A -l all -d 'Match files both in working tree and index'
221	221	-> complete -c git -n '__fish_git_using_command add' -s N -l intent-to-add -d 'Record only the fact that the path will be added later'
176	176	-> complete -c git -n '__fish_git_using_command add' -l refresh -d "Don't add the file(s), but only refresh their stat"
122	122	-> complete -c git -n '__fish_git_using_command add' -l ignore-errors -d 'Ignore errors'
113	113	-> complete -c git -n '__fish_git_using_command add' -l ignore-missing -d 'Check if any of the given files would be ignored'
179	179	-> complete -f -c git -n '__fish_git_using_command add; and __fish_contains_opt -s p patch' -a '(__fish_git_modified_files)'
219	219	-> complete -f -c git -n '__fish_git_using_command add' -a '(__fish_git_add_files)'
218	218	-> complete -f -c git -n '__fish_git_needs_command' -a checkout -d 'Checkout and switch to a branch'
278	278	-> complete -f -c git -n '__fish_git_using_command checkout' -a '(__fish_git_local_branches)' --description 'Local Branch'
227	227	-> complete -f -c git -n '__fish_git_using_command checkout' -a '(__fish_git_remote_branches)' --description 'Remote Branch'
274	274	-> complete -f -c git -n '__fish_git_using_command checkout' -a '(__fish_git_heads)' --description 'Head'
293	293	-> complete -f -c git -n '__fish_git_using_command checkout' -a '(__fish_git_unique_remote_branches)' --description 'Remote branch'
243	243	-> complete -f -c git -n '__fish_git_using_command checkout' -a '(__fish_git_tags)' --description 'Tag'
182	182	-> complete -f -c git -n '__fish_git_using_command checkout' -a '(__fish_git_modified_files)' --description 'File'
203	203	-> complete -f -c git -n '__fish_git_using_command checkout' -s b -d 'Create a new branch'
127	127	-> complete -f -c git -n '__fish_git_using_command checkout' -s t -l track -d 'Track a new branch'
128	128	-> complete -f -c git -n '__fish_git_using_command checkout' -l theirs -d 'Keep staged changes'
114	114	-> complete -f -c git -n '__fish_git_using_command checkout' -l ours -d 'Keep unmerged changes'
121	121	-> complete -f -c git -n '__fish_git_needs_command' -a apply -d 'Apply a patch on a git index file and a working tree'
133	133	-> complete -f -c git -n '__fish_git_needs_command' -a archive -d 'Create an archive of files from a named tree'
114	114	-> complete -f -c git -n '__fish_git_needs_command' -a bisect -d 'Find the change that introduced a bug by binary search'
117	117	-> complete -f -c git -n '__fish_git_needs_command' -a branch -d 'List, create, or delete branches'
153	153	-> complete -f -c git -n '__fish_git_using_command branch' -a '(__fish_git_branches)' -d 'Branch'
112	112	-> complete -f -c git -n '__fish_git_using_command branch' -s d -d 'Delete branch'
110	110	-> complete -f -c git -n '__fish_git_using_command branch' -s D -d 'Force deletion of branch'
110	110	-> complete -f -c git -n '__fish_git_using_command branch' -s m -d 'Rename branch'
109	109	-> complete -f -c git -n '__fish_git_using_command branch' -s M -d 'Force renaming branch'
113	113	-> complete -f -c git -n '__fish_git_using_command branch' -s a -d 'Lists both local and remote branches'
172	172	-> complete -f -c git -n '__fish_git_using_command branch' -s t -l track -d 'Track remote branch'
179	179	-> complete -f -c git -n '__fish_git_using_command branch' -l no-track -d 'Do not track remote branch'
132	132	-> complete -f -c git -n '__fish_git_using_command branch' -l set-upstream-to -d 'Set remote branch to track'
109	109	-> complete -f -c git -n '__fish_git_using_command branch' -l merged -d 'List branches that have been merged'
107	107	-> complete -f -c git -n '__fish_git_using_command branch' -l no-merged -d 'List branches that have not been merged'
115	115	-> complete -f -c git -n '__fish_git_needs_command' -a cherry-pick -d 'Apply the change introduced by an existing commit'
153	153	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -a '(__fish_git_branches --no-merged)' -d 'Branch'
160	160	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -a '(__fish_git_unique_remote_branches --no-merged)' -d 'Remote branch'
162	162	-> complete -f -c git -n '__fish_git_using_command cherry-pick; and __fish_git_possible_commithash' -a '(__fish_git_commits)'
118	118	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -s e -l edit -d 'Edit the commit message prior to committing'
113	113	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -s x -d 'Append info in generated commit on the origin of the cherry-picked change'
209	209	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -s n -l no-commit -d 'Apply changes without making any commit'
188	188	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -s s -l signoff -d 'Add Signed-off-by line to the commit message'
136	136	-> complete -f -c git -n '__fish_git_using_command cherry-pick' -l ff -d 'Fast-forward if possible'
205	205	-> complete -f -c git -n '__fish_git_needs_command' -a clone -d 'Clone a repository into a new directory'
182	182	-> complete -f -c git -n '__fish_git_using_command clone' -l no-hardlinks -d 'Copy files instead of using hardlinks'
193	193	-> complete -f -c git -n '__fish_git_using_command clone' -s q -l quiet -d 'Operate quietly and do not report progress'
182	182	-> complete -f -c git -n '__fish_git_using_command clone' -s v -l verbose -d 'Provide more information on what is going on'
149	149	-> complete -f -c git -n '__fish_git_using_command clone' -s n -l no-checkout -d 'No checkout of HEAD is performed after the clone is complete'
153	153	-> complete -f -c git -n '__fish_git_using_command clone' -l bare -d 'Make a bare Git repository'
123	123	-> complete -f -c git -n '__fish_git_using_command clone' -l mirror -d 'Set up a mirror of the source repository'
159	159	-> complete -f -c git -n '__fish_git_using_command clone' -s o -l origin -d 'Use a specific name of the remote instead of the default'
192	192	-> complete -f -c git -n '__fish_git_using_command clone' -s b -l branch -d 'Use a specific branch instead of the one used by the cloned repository'
170	170	-> complete -f -c git -n '__fish_git_using_command clone' -l depth -d 'Truncate the history to a specified number of revisions'
192	192	-> complete -f -c git -n '__fish_git_using_command clone' -l recursive -d 'Initialize all submodules within the cloned repository'
177	177	-> complete -c git -n '__fish_git_needs_command' -a commit -d 'Record changes to the repository'
207	207	-> complete -c git -n '__fish_git_using_command commit' -l amend -d 'Amend the log message of the last commit'
155	155	-> complete -f -c git -n '__fish_git_using_command commit' -a '(__fish_git_modified_files)'
215	215	-> complete -f -c git -n '__fish_git_using_command commit' -l fixup -d 'Fixup commit to be used with rebase --autosquash'
278	278	-> complete -f -c git -n '__fish_git_using_command commit; and __fish_contains_opt fixup' -a '(__fish_git_recent_commits)'
130	130	-> complete -c git -n '__fish_git_needs_command' -a diff -d 'Show changes between commits, commit and working tree, etc'
216	216	-> complete -c git -n '__fish_git_using_command diff' -a '(__fish_git_ranges)' -d 'Branch'
194	194	-> complete -c git -n '__fish_git_using_command diff' -l cached -d 'Show diff of changes in the index'
212	212	-> complete -c git -n '__fish_git_using_command diff' -l no-index -d 'Compare two paths on the filesystem'
213	213	-> complete -c git -n '__fish_git_needs_command' -a difftool -d 'Open diffs in a visual tool'
368	368	-> complete -c git -n '__fish_git_using_command difftool' -a '(__fish_git_ranges)' -d 'Branch'
231	231	-> complete -c git -n '__fish_git_using_command difftool' -l cached -d 'Visually show diff of changes in the index'
233	233	-> complete -c git -n '__fish_git_needs_command' -a grep -d 'Print lines matching a pattern'
138	138	-> complete -f -c git -n '__fish_git_needs_command' -a init -d 'Create an empty git repository or reinitialize an existing one'
121	121	-> complete -c git -n '__fish_git_needs_command'    -a shortlog -d 'Show commit shortlog'
254	254	-> complete -c git -n '__fish_git_needs_command' -a log -d 'Show commit logs'
283	283	-> complete -c git -n '__fish_git_using_command log' -a '(__fish_git_refs) (__fish_git_ranges)' -d 'Branch'
183	183	-> complete -c git -n '__fish_git_using_command log' -l follow -d 'Continue listing file history beyond renames'
197	197	-> complete -c git -n '__fish_git_using_command log' -l no-decorate -d 'Don\'t print ref names'
281	281	-> complete -f -c git -n '__fish_git_using_command log' -l decorate -a 'short\tHide\ prefixes full\tShow\ full\ ref\ names auto\tHide\ prefixes\ if\ printed\ to\ terminal no\tDon\\\'t\ display\ ref' -d 'Print out ref names'
200	200	-> complete -c git -n '__fish_git_using_command log' -l source -d 'Print ref name by which each commit was reached'
199	199	-> complete -c git -n '__fish_git_using_command log' -l use-mailmap
200	200	-> complete -c git -n '__fish_git_using_command log' -l full-diff
358	358	-> complete -c git -n '__fish_git_using_command log' -l log-size
186	186	-> complete -x -c git -n '__fish_git_using_command log' -s L
185	185	-> complete -x -c git -n '__fish_git_using_command log' -s n -l max-count -d 'Limit the number of commits before starting to show the commit output'
151	151	-> complete -x -c git -n '__fish_git_using_command log' -l skip -d 'Skip given number of commits'
144	144	-> complete -x -c git -n '__fish_git_using_command log' -l since -d 'Show commits more recent than specified date'
143	143	-> complete -x -c git -n '__fish_git_using_command log' -l after -d 'Show commits more recent than specified date'
169	169	-> complete -x -c git -n '__fish_git_using_command log' -l until -d 'Show commits older than specified date'
171	171	-> complete -x -c git -n '__fish_git_using_command log' -l before -d 'Show commits older than specified date'
156	156	-> complete -x -c git -n '__fish_git_using_command log' -l author -d 'Limit commits from given author'
168	168	-> complete -x -c git -n '__fish_git_using_command log' -l committer -d 'Limit commits from given committer'
182	182	-> complete -x -c git -n '__fish_git_using_command log' -l grep-reflog -d 'Limit commits to ones with reflog entries matching given pattern'
185	185	-> complete -x -c git -n '__fish_git_using_command log' -l grep -d 'Limit commits with message that match given pattern'
163	163	-> complete -c git -n '__fish_git_using_command log' -l all-match -d 'Limit commits to ones that match all given --grep'
182	182	-> complete -c git -n '__fish_git_using_command log' -l invert-grep -d 'Limit commits to ones with message that don\'t match --grep'
190	190	-> complete -c git -n '__fish_git_using_command log' -l regexp-ignore-case -s i -d 'Case insensitive match'
436	436	-> complete -c git -n '__fish_git_using_command log' -l basic-regexp -d 'Patterns are basic regular expressions (default)'
200	200	-> complete -c git -n '__fish_git_using_command log' -l extended-regexp -s E -d 'Patterns are extended regular expressions'
181	181	-> complete -c git -n '__fish_git_using_command log' -l fixed-strings -s F -d 'Patterns are fixed strings'
176	176	-> complete -c git -n '__fish_git_using_command log' -l perl-regexp -d 'Patterns are Perl-compatible regular expressions'
174	174	-> complete -c git -n '__fish_git_using_command log' -l remove-empty -d 'Stop when given path disappears from tree'
170	170	-> complete -c git -n '__fish_git_using_command log' -l merges -d 'Print only merge commits'
186	186	-> complete -c git -n '__fish_git_using_command log' -l no-merges -d 'Don\'t print commits with more than one parent'
173	173	-> complete -x -c git -n '__fish_git_using_command log' -l min-parents -d 'Show only commit with at least the given number of parents'
176	176	-> complete -x -c git -n '__fish_git_using_command log' -l max-parents -d 'Show only commit with at most the given number of parents'
178	178	-> complete -c git -n '__fish_git_using_command log' -l no-min-parents -d 'Show only commit without a mimimum number of parents'
171	171	-> complete -c git -n '__fish_git_using_command log' -l no-max-parents -d 'Show only commit without a maximum number of parents'
177	177	-> complete -c git -n '__fish_git_using_command log' -l first-parent -d 'Follow only the first parent commit upon seeing a merge commit'
346	346	-> complete -c git -n '__fish_git_using_command log' -l not -d 'Reverse meaning of ^ prefix'
218	218	-> complete -c git -n '__fish_git_using_command log' -l all -d 'Pretend as if all refs in refs/ are listed on the command line as <commit>'
210	210	-> complete -f -c git -n '__fish_git_using_command log' -l branches -d 'Pretend as if all refs are in refs/heads are listed on the command line as <commit>'
250	250	-> complete -f -c git -n '__fish_git_using_command log' -l tags -d 'Pretend as if all refs are in ref/tags are listed on the command line as <commit>'
236	236	-> complete -f -c git -n '__fish_git_using_command log' -l remotes -d 'Pretend as if all refs in refs/remotes  are listed on the command line as <commit>'
229	229	-> complete -x -c git -n '__fish_git_using_command log' -l glob -d 'Pretend as if all refs matching shell glob are listed on the command line as <commit>'
226	226	-> complete -x -c git -n '__fish_git_using_command log' -l exclude -d 'Do not include refs matching given glob pattern'
231	231	-> complete -c git -n '__fish_git_using_command log' -l reflog -d 'Pretend as if all objcets mentioned by reflogs are listed on the command line as <commit>'
225	225	-> complete -c git -n '__fish_git_using_command log' -l ingnore-missing -d 'Ignore invalid object names'
158	158	-> complete -c git -n '__fish_git_using_command log' -l bisect
208	208	-> complete -c git -n '__fish_git_using_command log' -l stdin -d 'Read commits from stdin'
140	140	-> complete -c git -n '__fish_git_using_command log' -l cherry-mark -d 'Mark equivalent commits with = and inequivalent with +'
198	198	-> complete -c git -n '__fish_git_using_command log' -l cherry-pick -d 'Omit equivalent commits'
239	239	-> complete -c git -n '__fish_git_using_command log' -l left-only
156	156	-> complete -c git -n '__fish_git_using_command log' -l rigth-only
189	189	-> complete -c git -n '__fish_git_using_command log' -l cherry
405	405	-> complete -c git -n '__fish_git_using_command log' -l walk-reflogs -s g
220	220	-> complete -c git -n '__fish_git_using_command log' -l merge
167	167	-> complete -c git -n '__fish_git_using_command log' -l boundary
197	197	-> complete -c git -n '__fish_git_using_command log' -l simplify-by-decoration
231	231	-> complete -c git -n '__fish_git_using_command log' -l full-history
175	175	-> complete -c git -n '__fish_git_using_command log' -l dense
201	201	-> complete -c git -n '__fish_git_using_command log' -l sparse
195	195	-> complete -c git -n '__fish_git_using_command log' -l simplify-merges
206	206	-> complete -c git -n '__fish_git_using_command log' -l ancestry-path
200	200	-> complete -c git -n '__fish_git_using_command log' -l date-order
214	214	-> complete -c git -n '__fish_git_using_command log' -l author-date-order
199	199	-> complete -c git -n '__fish_git_using_command log' -l topo-order
177	177	-> complete -c git -n '__fish_git_using_command log' -l reverse
211	211	-> complete -f -c git -n '__fish_git_using_command log' -l no-walk -a "sorted unsorted"
206	206	-> complete -c git -n '__fish_git_using_command log' -l do-walk
143	143	-> complete -c git -n '__fish_git_using_command log' -l format
184	184	-> complete -c git -n '__fish_git_using_command log' -l abbrev-commit
116	116	-> complete -c git -n '__fish_git_using_command log' -l no-abbrev-commit
99	99	-> complete -c git -n '__fish_git_using_command log' -l oneline
264	264	-> complete -x -c git -n '__fish_git_using_command log' -l encoding -a '(__fish_print_encodings)'
125	125	-> complete -f -c git -n '__fish_git_using_command log' -l expand-tabs
102	102	-> complete -c git -n '__fish_git_using_command log' -l no-expand-tabs
185	185	-> complete -f -c git -n '__fish_git_using_command log' -l notes
152	152	-> complete -c git -n '__fish_git_using_command log' -l no-notes
105	105	-> complete -f -c git -n '__fish_git_using_command log' -l show-notes
166	166	-> complete -c git -n '__fish_git_using_command log' -l standard-notes
168	168	-> complete -c git -n '__fish_git_using_command log' -l no-standard-notes
108	108	-> complete -c git -n '__fish_git_using_command log' -l show-signature
109	109	-> complete -c git -n '__fish_git_using_command log' -l relative-date
350	350	-> complete -x -c git -n '__fish_git_using_command log' -l date -a '
  relative
  local
  iso
  iso-local
  iso8601
  iso8601-local
  iso-strict
  iso-strict-local
  iso8601-strict
  iso8601-strict-local
  rfc-local
  rfc2822-local
  short
  short-local
  raw
  unix
  format:
  default
  default-local
'
116	116	-> complete -c git -n '__fish_git_using_command log' -l parents
218	218	-> complete -c git -n '__fish_git_using_command log' -l children
126	126	-> complete -c git -n '__fish_git_using_command log' -l left-right
103	103	-> complete -c git -n '__fish_git_using_command log' -l graph
102	102	-> complete -f -c git -n '__fish_git_using_command log' -l show-linear-break
99	99	-> complete -c git -n '__fish_git_using_command log' -s c
193	193	-> complete -c git -n '__fish_git_using_command log' -l cc
178	178	-> complete -c git -n '__fish_git_using_command log' -s m
147	147	-> complete -c git -n '__fish_git_using_command log' -s r
168	168	-> complete -c git -n '__fish_git_using_command log' -s t
141	141	-> complete -c git -n '__fish_git_using_command log' -l patch -s p
102	102	-> complete -c git -n '__fish_git_using_command log' -s u
107	107	-> complete -c git -n '__fish_git_using_command log' -l no-patch -s s
130	130	-> complete -x -c git -n '__fish_git_using_command log' -l unified -s U
209	209	-> complete -c git -n '__fish_git_using_command log' -l raw
116	116	-> complete -c git -n '__fish_git_using_command log' -l patch-with-raw
99	99	-> complete -c git -n '__fish_git_using_command log' -l indent-heuristic
122	122	-> complete -c git -n '__fish_git_using_command log' -l no-indent-heuristic
189	189	-> complete -c git -n '__fish_git_using_command log' -l compaction-heuristic
167	167	-> complete -c git -n '__fish_git_using_command log' -l no-compaction-heuristic
202	202	-> complete -c git -n '__fish_git_using_command log' -l minimal
183	183	-> complete -c git -n '__fish_git_using_command log' -l patience
155	155	-> complete -c git -n '__fish_git_using_command log' -l histogram
301	301	-> complete -x -c git -n '__fish_git_using_command log' -l diff-algorithm -a '
  default\tBasic\ greedy\ diff\ algorithm
  myers\tBasic\ greedy\ diff\ algorithm
  minimal\tMake\ smallest\ diff\ possible
  patience\tPatience\ diff\ algorithm
  histogram\tPatience\ algorithm\ with\ low-occurrence\ common\ elements
'
168	168	-> complete -f -x -c git -n '__fish_git_using_command log' -l stat
173	173	-> complete -c git -n '__fish_git_using_command log' -l numstat
178	178	-> complete -c git -n '__fish_git_using_command log' -l shortstat
248	248	-> complete -f -c git -n '__fish_git_using_command log' -l dirstat -a '(__fish_append , changes lines files cumulative)'
149	149	-> complete -c git -n '__fish_git_using_command log' -l summary
186	186	-> complete -c git -n '__fish_git_using_command log' -l patch-with-stat
185	185	-> complete -c git -n '__fish_git_using_command log' -s z
113	113	-> complete -c git -n '__fish_git_using_command log' -l name-only
99	99	-> complete -c git -n '__fish_git_using_command log' -l name-status
132	132	-> complete -f -c git -n '__fish_git_using_command log' -l submodule -a 'short diff log'
205	205	-> complete -f -c git -n '__fish_git_using_command log' -l color -a 'always never auto'
296	296	-> complete -c git -n '__fish_git_using_command log' -l no-color
443	443	-> complete -f -c git -n '__fish_git_using_command log' -l word-diff -a '
  color
  plain
  porcelain
  none
'
196	196	-> complete -f -c git -n '__fish_git_using_command log' -l color-words
211	211	-> complete -c git -n '__fish_git_using_command log' -l no-renames
168	168	-> complete -c git -n '__fish_git_using_command log' -l check
246	246	-> complete -f -c git -n '__fish_git_using_command log' -l ws-error-highlight -a '(__fish_append , old new context)'
141	141	-> complete -c git -n '__fish_git_using_command log' -l full-index
151	151	-> complete -c git -n '__fish_git_using_command log' -l binary
152	152	-> complete -f -c git -n '__fish_git_using_command log' -l abbrev
107	107	-> complete -f -c git -n '__fish_git_using_command log' -l break-rewrittes -s B
107	107	-> complete -f -c git -n '__fish_git_using_command log' -l find-renames -s M
117	117	-> complete -f -c git -n '__fish_git_using_command log' -l find-copies -s C
117	117	-> complete -c git -n '__fish_git_using_command log' -l find-copies-harder
121	121	-> complete -c git -n '__fish_git_using_command log' -l irreversible-delete -s D
120	120	-> complete -f -c git -n '__fish_git_using_command log' -s l
96	96	-> function __fish__git_append_letters_nosep...
365	365	-> complete -x -c git -n '__fish_git_using_command log' -l diff-filter -a '(__fish__git_append_letters_nosep a\tExclude\ added c\tExclude\ copied d\tExclude\ deleted m\tExclude\ modified r\tExclude\ renamed t\tExclude\ type\ changed u\tExclude\ unmerged x\tExclude\ unknown b\tExclude\ broken A\tAdded C\tCopied D\tDeleted M\tModified R\tRenamed T\tType\ Changed U\tUnmerged X\tUnknown B\tBroken)'
137	137	-> complete -x -c git -n '__fish_git_using_command log' -s S
114	114	-> complete -x -c git -n '__fish_git_using_command log' -s G
123	123	-> complete -c git -n '__fish_git_using_command log' -l pickaxe-all
138	138	-> complete -f -c git -n '__fish_git_using_command log' -s O
262	262	-> complete -c git -n '__fish_git_using_command log' -s R
185	185	-> complete -c git -n '__fish_git_using_command log' -l relative
117	117	-> complete -c git -n '__fish_git_using_command log' -l text -s a
96	96	-> complete -c git -n '__fish_git_using_command log' -l ignore-space-at-eol
103	103	-> complete -c git -n '__fish_git_using_command log' -l ignore-space-change -s b
102	102	-> complete -c git -n '__fish_git_using_command log' -l ignore-all-space -s w
97	97	-> complete -c git -n '__fish_git_using_command log' -l ignore-blank-lines
157	157	-> complete -x -c git -n '__fish_git_using_command log' -l inter-hunk-context
127	127	-> complete -c git -n '__fish_git_using_command log' -l function-context -s W
97	97	-> complete -c git -n '__fish_git_using_command log' -l ext-diff
96	96	-> complete -c git -n '__fish_git_using_command log' -l no-ext-diff
94	94	-> complete -c git -n '__fish_git_using_command log' -l textconv
94	94	-> complete -c git -n '__fish_git_using_command log' -l no-textconv
143	143	-> complete -f -c git -n '__fish_git_using_command log' -l ignore-submodules -a '
  none
  untracked
  dirty
  all
'
101	101	-> complete -x -c git -n '__fish_git_using_command log' -l src-prefix
117	117	-> complete -x -c git -n '__fish_git_using_command log' -l dst-prefix
123	123	-> complete -c git -n '__fish_git_using_command log' -l no-prefix
101	101	-> complete -x -c git -n '__fish_git_using_command log' -l line-prefix
95	95	-> complete -c git -n '__fish_git_using_command log' -l ita-invisible-in-index
136	136	-> complete -f -c git -n '__fish_git_needs_command' -a merge -d 'Join two or more development histories together'
151	151	-> complete -f -c git -n '__fish_git_using_command merge' -a '(__fish_git_branches)' -d 'Branch'
166	166	-> complete -f -c git -n '__fish_git_using_command merge' -a '(__fish_git_unique_remote_branches)' -d 'Remote branch'
112	112	-> complete -f -c git -n '__fish_git_using_command merge' -l commit -d "Autocommit the merge"
186	186	-> complete -f -c git -n '__fish_git_using_command merge' -l no-commit -d "Don't autocommit the merge"
119	119	-> complete -f -c git -n '__fish_git_using_command merge' -l edit -d 'Edit auto-generated merge message'
123	123	-> complete -f -c git -n '__fish_git_using_command merge' -l no-edit -d "Don't edit auto-generated merge message"
111	111	-> complete -f -c git -n '__fish_git_using_command merge' -l ff -d "Don't generate a merge commit if merge is fast-forward"
110	110	-> complete -f -c git -n '__fish_git_using_command merge' -l no-ff -d "Generate a merge commit even if merge is fast-forward"
120	120	-> complete -f -c git -n '__fish_git_using_command merge' -l ff-only -d 'Refuse to merge unless fast-forward possible'
113	113	-> complete -f -c git -n '__fish_git_using_command merge' -l log -d 'Populate the log message with one-line descriptions'
122	122	-> complete -f -c git -n '__fish_git_using_command merge' -l no-log -d "Don't populate the log message with one-line descriptions"
111	111	-> complete -f -c git -n '__fish_git_using_command merge' -l stat -d "Show diffstat of the merge"
124	124	-> complete -f -c git -n '__fish_git_using_command merge' -s n -l no-stat -d "Don't show diffstat of the merge"
113	113	-> complete -f -c git -n '__fish_git_using_command merge' -l squash -d "Squash changes from other branch as a single commit"
110	110	-> complete -f -c git -n '__fish_git_using_command merge' -l no-squash -d "Don't squash changes"
117	117	-> complete -f -c git -n '__fish_git_using_command merge' -s q -l quiet -d 'Be quiet'
115	115	-> complete -f -c git -n '__fish_git_using_command merge' -s v -l verbose -d 'Be verbose'
108	108	-> complete -f -c git -n '__fish_git_using_command merge' -l progress -d 'Force progress status'
126	126	-> complete -f -c git -n '__fish_git_using_command merge' -l no-progress -d 'Force no progress status'
109	109	-> complete -f -c git -n '__fish_git_using_command merge' -s m -d 'Set the commit message'
109	109	-> complete -f -c git -n '__fish_git_using_command merge' -l abort -d 'Abort the current conflict resolution process'
33	33	-> function __fish_git_mergetools...
37	37	-> function __fish_git_status --argument-names "statusmarker"...
122	122	-> complete -f -c git -n '__fish_git_needs_command' -a mergetool -d 'Run merge conflict resolution tools to resolve merge conflicts'
160	160	-> complete -f -c git -n '__fish_git_using_command mergetool' -s t -l tool -d "Use specific merge resolution program" -a "(__fish_git_mergetools)"
154	154	-> complete -f -c git -n '__fish_git_using_command mergetool' -a "(__fish_git_status 'UU')" -d "File"
128	128	-> complete -c git -n '__fish_git_needs_command' -a mv -d 'Move or rename a file, a directory, or a symlink'
119	119	-> complete -f -c git -n '__fish_git_needs_command' -a prune -d 'Prune all unreachable objects from the object database'
116	116	-> complete -f -c git -n '__fish_git_needs_command' -a pull -d 'Fetch from and merge with another repository or a local branch'
116	116	-> complete -f -c git -n '__fish_git_using_command pull' -s q -l quiet -d 'Be quiet'
116	116	-> complete -f -c git -n '__fish_git_using_command pull' -s v -l verbose -d 'Be verbose'
108	108	-> complete -f -c git -n '__fish_git_using_command pull' -l all -d 'Fetch all remotes'
117	117	-> complete -f -c git -n '__fish_git_using_command pull' -s a -l append -d 'Append ref names and object names'
115	115	-> complete -f -c git -n '__fish_git_using_command pull' -s f -l force -d 'Force update of local branches'
141	141	-> complete -f -c git -n '__fish_git_using_command pull' -s k -l keep -d 'Keep downloaded pack'
113	113	-> complete -f -c git -n '__fish_git_using_command pull' -l no-tags -d 'Disable automatic tag following'
110	110	-> complete -f -c git -n '__fish_git_using_command pull' -l progress -d 'Force progress status'
179	179	-> complete -f -c git -n '__fish_git_using_command pull; and not __fish_git_branch_for_remote' -a '(__fish_git_remotes)' -d 'Remote alias'
167	167	-> complete -f -c git -n '__fish_git_using_command pull; and __fish_git_branch_for_remote' -a '(__fish_git_branch_for_remote)' -d 'Branch'
116	116	-> complete -f -c git -n '__fish_git_needs_command' -a push -d 'Update remote refs along with associated objects'
171	171	-> complete -f -c git -n '__fish_git_using_command push; and not __fish_git_branch_for_remote' -a '(__fish_git_remotes)' -d 'Remote alias'
175	175	-> complete -f -c git -n '__fish_git_using_command push; and __fish_git_branch_for_remote' -a '(__fish_git_branches)' -d 'Branch'
233	233	-> complete -f -c git -n '__fish_git_using_command push; and __fish_git_branch_for_remote; and string match -q "+*" -- (commandline -ct)' -a '+(__fish_git_branches)' -d 'Force-push branch'
245	245	-> complete -f -c git -n '__fish_git_using_command push; and __fish_git_branch_for_remote; and string match -q "+*:*" -- (commandline -ct)' -a '+(__fish_git_branches):(__fish_git_branch_for_remote)' -d 'Force-push local branch to remote branch'
246	246	-> complete -f -c git -n '__fish_git_using_command push; and __fish_git_branch_for_remote; and string match -q "*:*" -- (commandline -ct)' -a '(__fish_git_branches):(__fish_git_branch_for_remote)' -d 'Push local branch to remote branch'
128	128	-> complete -f -c git -n '__fish_git_using_command push' -l all -d 'Push all refs under refs/heads/'
112	112	-> complete -f -c git -n '__fish_git_using_command push' -l prune -d "Remove remote branches that don't have a local counterpart"
110	110	-> complete -f -c git -n '__fish_git_using_command push' -l mirror -d 'Push all refs under refs/'
109	109	-> complete -f -c git -n '__fish_git_using_command push' -l delete -d 'Delete all listed refs from the remote repository'
109	109	-> complete -f -c git -n '__fish_git_using_command push' -l tags -d 'Push all refs under refs/tags'
109	109	-> complete -f -c git -n '__fish_git_using_command push' -l follow-tags -d 'Push all usual refs plus the ones under refs/tags'
117	117	-> complete -f -c git -n '__fish_git_using_command push' -s n -l dry-run -d 'Do everything except actually send the updates'
110	110	-> complete -f -c git -n '__fish_git_using_command push' -l porcelain -d 'Produce machine-readable output'
158	158	-> complete -f -c git -n '__fish_git_using_command push' -s f -l force -d 'Force update of remote refs'
126	126	-> complete -f -c git -n '__fish_git_using_command push' -s f -l force-with-lease -d 'Force update of remote refs, stopping if other\'s changes would be overwritten'
118	118	-> complete -f -c git -n '__fish_git_using_command push' -s u -l set-upstream -d 'Add upstream (tracking) reference'
115	115	-> complete -f -c git -n '__fish_git_using_command push' -s q -l quiet -d 'Be quiet'
114	114	-> complete -f -c git -n '__fish_git_using_command push' -s v -l verbose -d 'Be verbose'
109	109	-> complete -f -c git -n '__fish_git_using_command push' -l progress -d 'Force progress status'
115	115	-> complete -f -c git -n '__fish_git_needs_command' -a rebase -d 'Forward-port local commits to the updated upstream head'
142	142	-> complete -f -c git -n '__fish_git_using_command rebase' -a '(__fish_git_remotes)' -d 'Remote alias'
228	228	-> complete -f -c git -n '__fish_git_using_command rebase' -a '(__fish_git_branches)' -d 'Branch'
212	212	-> complete -f -c git -n '__fish_git_using_command rebase' -a '(__fish_git_heads)' -d 'Head'
196	196	-> complete -f -c git -n '__fish_git_using_command rebase' -a '(__fish_git_tags)' -d 'Tag'
119	119	-> complete -f -c git -n '__fish_git_using_command rebase' -l continue -d 'Restart the rebasing process'
111	111	-> complete -f -c git -n '__fish_git_using_command rebase' -l abort -d 'Abort the rebase operation'
128	128	-> complete -f -c git -n '__fish_git_using_command rebase' -l keep-empty -d "Keep the commits that don't cahnge anything"
114	114	-> complete -f -c git -n '__fish_git_using_command rebase' -l skip -d 'Restart the rebasing process by skipping the current patch'
117	117	-> complete -f -c git -n '__fish_git_using_command rebase' -s m -l merge -d 'Use merging strategies to rebase'
117	117	-> complete -f -c git -n '__fish_git_using_command rebase' -s q -l quiet -d 'Be quiet'
117	117	-> complete -f -c git -n '__fish_git_using_command rebase' -s v -l verbose -d 'Be verbose'
110	110	-> complete -f -c git -n '__fish_git_using_command rebase' -l stat -d "Show diffstat of the rebase"
119	119	-> complete -f -c git -n '__fish_git_using_command rebase' -s n -l no-stat -d "Don't show diffstat of the rebase"
112	112	-> complete -f -c git -n '__fish_git_using_command rebase' -l verify -d "Allow the pre-rebase hook to run"
161	161	-> complete -f -c git -n '__fish_git_using_command rebase' -l no-verify -d "Don't allow the pre-rebase hook to run"
123	123	-> complete -f -c git -n '__fish_git_using_command rebase' -s f -l force-rebase -d 'Force the rebase'
118	118	-> complete -f -c git -n '__fish_git_using_command rebase' -s i -l interactive -d 'Interactive mode'
118	118	-> complete -f -c git -n '__fish_git_using_command rebase' -s p -l preserve-merges -d 'Try to recreate merges'
112	112	-> complete -f -c git -n '__fish_git_using_command rebase' -l root -d 'Rebase all reachable commits'
111	111	-> complete -f -c git -n '__fish_git_using_command rebase' -l autosquash -d 'Automatic squashing'
113	113	-> complete -f -c git -n '__fish_git_using_command rebase' -l no-autosquash -d 'No automatic squashing'
128	128	-> complete -f -c git -n '__fish_git_using_command rebase' -l no-ff -d 'No fast-forward'
136	136	-> complete -c git -n '__fish_git_needs_command' -a reset -d 'Reset current HEAD to the specified state'
164	164	-> complete -f -c git -n '__fish_git_using_command reset' -l hard -d 'Reset files in working directory'
183	183	-> complete -c git -n '__fish_git_using_command reset' -a '(__fish_git_branches)' -d 'Branch'
155	155	-> complete -f -c git -n '__fish_git_using_command reset' -a '(__fish_git_staged_files)' -d 'File'
158	158	-> complete -f -c git -n '__fish_git_using_command reset' -a '(__fish_git_modified_files --cached)' -d 'File'
170	170	-> complete -f -c git -n '__fish_git_using_command reset' -a '(__fish_git_reflog)' -d 'Reflog'
131	131	-> complete -f -c git -n '__fish_git_needs_command' -a revert -d 'Revert an existing commit'
143	143	-> complete -f -c git -n '__fish_git_using_command revert' -a '(__fish_git_commits)'
127	127	-> complete -c git -n '__fish_git_needs_command' -a rm -d 'Remove files from the working tree and from the index'
105	105	-> complete -c git -n '__fish_git_using_command rm' -f
119	119	-> complete -c git -n '__fish_git_using_command rm' -l cached -d 'Keep local copies'
140	140	-> complete -c git -n '__fish_git_using_command rm' -l ignore-unmatch -d 'Exit with a zero status even if no files matched'
226	226	-> complete -c git -n '__fish_git_using_command rm' -s r -d 'Allow recursive removal'
173	173	-> complete -c git -n '__fish_git_using_command rm' -s q -l quiet -d 'Be quiet'
165	165	-> complete -c git -n '__fish_git_using_command rm' -s f -l force -d 'Override the up-to-date check'
162	162	-> complete -c git -n '__fish_git_using_command rm' -s n -l dry-run -d 'Dry run'
165	165	-> complete -f -c git -n '__fish_git_needs_command' -a status -d 'Show the working tree status'
193	193	-> complete -f -c git -n '__fish_git_using_command status' -s s -l short -d 'Give the output in the short-format'
225	225	-> complete -f -c git -n '__fish_git_using_command status' -s b -l branch -d 'Show the branch and tracking info even in short-format'
322	322	-> complete -f -c git -n '__fish_git_using_command status' -l porcelain -d 'Give the output in a stable, easy-to-parse format'
165	165	-> complete -f -c git -n '__fish_git_using_command status' -s z -d 'Terminate entries with null character'
196	196	-> complete -f -c git -n '__fish_git_using_command status' -s u -l untracked-files -x -a 'no normal all' -d 'The untracked files handling mode'
160	160	-> complete -f -c git -n '__fish_git_using_command status' -l ignore-submodules -x -a 'none untracked dirty all' -d 'Ignore changes to submodules'
121	121	-> complete -f -c git -n '__fish_git_needs_command' -a tag -d 'Create, list, delete or verify a tag object signed with GPG'
330	330	-> complete -f -c git -n '__fish_git_using_command tag; and __fish_not_contain_opt -s d; and __fish_not_contain_opt -s v; and test (count (commandline -opc | string match -r -v \'^-\')) -eq 3' -a '(__fish_git_branches)' -d 'Branch'
121	121	-> complete -f -c git -n '__fish_git_using_command tag' -s a -l annotate -d 'Make an unsigned, annotated tag object'
117	117	-> complete -f -c git -n '__fish_git_using_command tag' -s s -l sign -d 'Make a GPG-signed tag'
134	134	-> complete -f -c git -n '__fish_git_using_command tag' -s d -l delete -d 'Remove a tag'
121	121	-> complete -f -c git -n '__fish_git_using_command tag' -s v -l verify -d 'Verify signature of a tag'
122	122	-> complete -f -c git -n '__fish_git_using_command tag' -s f -l force -d 'Force overwriting exising tag'
118	118	-> complete -f -c git -n '__fish_git_using_command tag' -s l -l list -d 'List tags'
151	151	-> complete -f -c git -n '__fish_git_using_command tag' -l contains -xa '(__fish_git_commits)' -d 'List tags that contain a commit'
181	181	-> complete -f -c git -n '__fish_git_using_command tag; and __fish_contains_opt -s d' -a '(__fish_git_tags)' -d 'Tag'
178	178	-> complete -f -c git -n '__fish_git_using_command tag; and __fish_contains_opt -s v' -a '(__fish_git_tags)' -d 'Tag'
169	169	-> complete -c git -n '__fish_git_needs_command' -a stash -d 'Stash away changes'
158	158	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a list -d 'List stashes'
150	150	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a show -d 'Show the changes recorded in the stash'
147	147	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a pop -d 'Apply and remove a single stashed state'
145	145	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a apply -d 'Apply a single stashed state'
175	175	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a clear -d 'Remove all stashed states'
315	315	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a drop -d 'Remove a single stashed state from the stash list'
266	266	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a create -d 'Create a stash'
248	248	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a save -d 'Save a new stash'
261	261	-> complete -f -c git -n '__fish_git_using_command stash; and __fish_git_stash_not_using_subcommand' -a branch -d 'Create a new branch from a stash'
237	237	-> complete -f -c git -n '__fish_git_stash_using_command apply' -a '(__fish_git_complete_stashes)'
233	233	-> complete -f -c git -n '__fish_git_stash_using_command branch' -a '(__fish_git_complete_stashes)'
206	206	-> complete -f -c git -n '__fish_git_stash_using_command drop' -a '(__fish_git_complete_stashes)'
243	243	-> complete -f -c git -n '__fish_git_stash_using_command pop' -a '(__fish_git_complete_stashes)'
220	220	-> complete -f -c git -n '__fish_git_stash_using_command show' -a '(__fish_git_complete_stashes)'
209	209	-> complete -f -c git -n '__fish_git_needs_command' -a config -d 'Set and read git configuration variables'
213	213	-> complete -f -c git -n '__fish_git_needs_command' -a format-patch -d 'Generate patch series to send upstream'
278	278	-> complete -f -c git -n '__fish_git_using_command format-patch' -a '(__fish_git_branches)' -d 'Branch'
201	201	-> complete -f -c git -n '__fish_git_using_command format-patch' -s p -l no-stat -d "Generate plain patches without diffstat"
205	205	-> complete -f -c git -n '__fish_git_using_command format-patch' -s s -l no-patch -d "Suppress diff output"
198	198	-> complete -f -c git -n '__fish_git_using_command format-patch' -l minimal -d "Spend more time to create smaller diffs"
186	186	-> complete -f -c git -n '__fish_git_using_command format-patch' -l patience -d "Generate diff with the 'patience' algorithm"
187	187	-> complete -f -c git -n '__fish_git_using_command format-patch' -l histogram -d "Generate diff with the 'histogram' algorithm"
176	176	-> complete -f -c git -n '__fish_git_using_command format-patch' -l stdout -d "Print all commits to stdout in mbox format"
176	176	-> complete -f -c git -n '__fish_git_using_command format-patch' -l numstat -d "Show number of added/deleted lines in decimal notation"
201	201	-> complete -f -c git -n '__fish_git_using_command format-patch' -l shortstat -d "Output only last line of the stat"
185	185	-> complete -f -c git -n '__fish_git_using_command format-patch' -l summary -d "Output a condensed summary of extended header information"
180	180	-> complete -f -c git -n '__fish_git_using_command format-patch' -l no-renames -d "Disable rename detection"
177	177	-> complete -f -c git -n '__fish_git_using_command format-patch' -l full-index -d "Show full blob object names"
180	180	-> complete -f -c git -n '__fish_git_using_command format-patch' -l binary -d "Output a binary diff for use with git apply"
181	181	-> complete -f -c git -n '__fish_git_using_command format-patch' -l find-copies-harder -d "Also inspect unmodified files as source for a copy"
196	196	-> complete -f -c git -n '__fish_git_using_command format-patch' -l text -s a -d "Treat all files as text"
179	179	-> complete -f -c git -n '__fish_git_using_command format-patch' -l ignore-space-at-eol -d "Ignore changes in whitespace at EOL"
190	190	-> complete -f -c git -n '__fish_git_using_command format-patch' -l ignore-space-change -s b -d "Ignore changes in amount of whitespace"
193	193	-> complete -f -c git -n '__fish_git_using_command format-patch' -l ignore-all-space -s w -d "Ignore whitespace when comparing lines"
184	184	-> complete -f -c git -n '__fish_git_using_command format-patch' -l ignore-blank-lines -d "Ignore changes whose lines are all blank"
197	197	-> complete -f -c git -n '__fish_git_using_command format-patch' -l function-context -s W -d "Show whole surrounding functions of changes"
187	187	-> complete -f -c git -n '__fish_git_using_command format-patch' -l ext-diff -d "Allow an external diff helper to be executed"
181	181	-> complete -f -c git -n '__fish_git_using_command format-patch' -l no-ext-diff -d "Disallow external diff helpers"
183	183	-> complete -f -c git -n '__fish_git_using_command format-patch' -l no-textconv -d "Disallow external text conversion filters for binary files (Default)"
189	189	-> complete -f -c git -n '__fish_git_using_command format-patch' -l textconv -d "Allow external text conversion filters for binary files (Resulting diff is unappliable)"
191	191	-> complete -f -c git -n '__fish_git_using_command format-patch' -l no-prefix -d "Do not show source or destination prefix"
195	195	-> complete -f -c git -n '__fish_git_using_command format-patch' -l numbered -s n -d "Name output in [Patch n/m] format, even with a single patch"
196	196	-> complete -f -c git -n '__fish_git_using_command format-patch' -l no-numbered -s N -d "Name output in [Patch] format, even with multiple patches"
165	165	-> set -l submodulecommands add status init update summary foreach sync
201	201	-> complete -f -c git -n '__fish_git_needs_command' -a submodule -d 'Initialize, update or inspect submodules'
363	363	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'add' -d 'Add a submodule'
356	356	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'status' -d 'Show submodule status'
364	364	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'init' -d 'Initialize all submodules'
317	317	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'update' -d 'Update all submodules'
298	298	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'summary' -d 'Show commit summary'
282	282	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'foreach' -d 'Run command on each submodule'
327	327	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -a 'sync' -d 'Sync submodules\' URL with .gitmodules'
246	246	-> complete -f -c git -n "__fish_git_using_command submodule; and not __fish_seen_subcommand_from $submodulecommands" -s q -l quiet -d "Only print error messages"
252	252	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -l init -d "Initialize all submodules"
401	401	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -l checkout -d "Checkout the superproject's commit on a detached HEAD in the submodule"
224	224	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -l merge -d "Merge the superproject's commit into the current branch of the submodule"
195	195	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -l rebase -d "Rebase current branch onto the superproject's commit"
144	144	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -s N -l no-fetch -d "Don't fetch new objects from the remote"
143	143	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -l remote -d "Instead of using superproject's SHA-1, use the state of the submodule's remote-tracking branch"
170	170	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from update' -l force -d "Throw away local changes when switching to a different commit and always run checkout"
135	135	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from add' -l force -d "Also add ignored submodule path"
136	136	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from deinit' -l force -d "Remove even with local changes"
138	138	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from status summary' -l cached -d "Use the commit stored in the index"
133	133	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from summary' -l files -d "Compare the commit in the index with submodule HEAD"
142	142	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from foreach update status' -l recursive -d "Traverse submodules recursively"
283	283	-> complete -f -c git -n '__fish_git_using_command submodule; and __fish_seen_subcommand_from foreach' -a "(__fish_complete_subcommand --fcs-skip=3)"
125	125	-> complete -f -c git -n '__fish_git_needs_command' -a whatchanged -d 'Show logs with difference each commit introduces'
126	126	-> complete -c git -n '__fish_git_needs_command' -a '(__fish_git_aliases)'
113	113	-> complete -f -c git -n '__fish_git_needs_command' -a clean -d 'Remove untracked files from the working tree'
115	115	-> complete -f -c git -n '__fish_git_using_command clean' -s f -l force -d 'Force run'
116	116	-> complete -f -c git -n '__fish_git_using_command clean' -s i -l interactive -d 'Show what would be done and clean files interactively'
120	120	-> complete -f -c git -n '__fish_git_using_command clean' -s n -l dry-run -d 'Don\'t actually remove anything, just show what would be done'
120	120	-> complete -f -c git -n '__fish_git_using_command clean' -s q -l quite -d 'Be quiet, only report errors'
109	109	-> complete -f -c git -n '__fish_git_using_command clean' -s d -d 'Remove untracked directories in addition to untracked files'
107	107	-> complete -f -c git -n '__fish_git_using_command clean' -s x -d 'Remove ignored files, as well'
106	106	-> complete -f -c git -n '__fish_git_using_command clean' -s X -d 'Remove only ignored files'
113	113	-> complete -f -c git -n '__fish_git_needs_command' -a blame -d 'Show what revision and author last modified each line of a file'
106	106	-> complete -f -c git -n '__fish_git_using_command blame' -s b -d 'Show blank SHA-1 for boundary commits'
108	108	-> complete -f -c git -n '__fish_git_using_command blame' -l root -d 'Do not treat root commits as boundaries'
106	106	-> complete -f -c git -n '__fish_git_using_command blame' -l show-stats -d 'Include additional statistics'
151	151	-> complete -f -c git -n '__fish_git_using_command blame' -s L -d 'Annotate only the given line range'
106	106	-> complete -f -c git -n '__fish_git_using_command blame' -s l -d 'Show long rev'
107	107	-> complete -f -c git -n '__fish_git_using_command blame' -s t -d 'Show raw timestamp'
107	107	-> complete -r -c git -n '__fish_git_using_command blame' -s S -d 'Use revisions from named file instead of calling rev-list'
131	131	-> complete -f -c git -n '__fish_git_using_command blame' -l reverse -d 'Walk history forward instead of backward'
120	120	-> complete -f -c git -n '__fish_git_using_command blame' -s p -l porcelain -d 'Show in a format designed for machine consumption'
111	111	-> complete -f -c git -n '__fish_git_using_command blame' -l line-porcelain -d 'Show the porcelain format'
119	119	-> complete -f -c git -n '__fish_git_using_command blame' -l incremental -d 'Show the result incrementally'
115	115	-> complete -r -c git -n '__fish_git_using_command blame' -l contents -d 'Instead of working tree, use the contents of the named file'
110	110	-> complete -x -c git -n '__fish_git_using_command blame' -l date -d 'Specifies the format used to output dates'
111	111	-> complete -f -c git -n '__fish_git_using_command blame' -s M -d 'Detect moved or copied lines within a file'
112	112	-> complete -f -c git -n '__fish_git_using_command blame' -s C -d 'Detect lines moved or copied from other files that were modified in the same commit'
110	110	-> complete -f -c git -n '__fish_git_using_command blame' -s h -d 'Show help message'
110	110	-> complete -f -c git -n '__fish_git_using_command blame' -s c -d 'Use the same output mode as git-annotate'
119	119	-> complete -f -c git -n '__fish_git_using_command blame' -s f -l show-name -d 'Show the filename in the original commit'
128	128	-> complete -f -c git -n '__fish_git_using_command blame' -s n -l show-number -d 'Show the line number in the original commit'
114	114	-> complete -f -c git -n '__fish_git_using_command blame' -s s -d 'Suppress the author name and timestamp from the output'
117	117	-> complete -f -c git -n '__fish_git_using_command blame' -s e -l show-email -d 'Show the author email instead of author name'
109	109	-> complete -f -c git -n '__fish_git_using_command blame' -s w -d 'Ignore whitespace changes'
144	144	-> complete -c git -n '__fish_git_needs_command' -a '(__fish_git_custom_commands)' -d 'Custom command'
124	2233	> __fish_disable_bracketed_paste 'git --v'
2109	2109	-> printf "\e[?2004l"
2155	2155	> echo $_ " "
3579	152009	> __fish_pwd
148430	148430	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
294106	294106	> git --v
93	184	> __fish_enable_bracketed_paste
91	91	-> printf "\e[?2004h"
325	150743	> fish_mode_prompt
45	150418	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
144215	144215	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
56	6158	--> switch $fish_bind_mode...
624	6102	---> prompt_segment green black "I"
93	93	----> set -l bg
70	70	----> set -l fg
39	2305	----> if [ -n "$argv[1]" ]...
2161	2161	-----> [ -n "$argv[1]" ]
105	105	-----> set bg $argv[1]
35	215	----> if [ -n "$argv[2]" ]...
88	88	-----> [ -n "$argv[2]" ]
92	92	-----> set fg $argv[2]
57	2481	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
151	151	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2109	2109	-----> set_color -b $bg
90	90	-----> set_color $fg
74	74	-----> echo -n " "
102	102	----> set current_bg $argv[1]
34	212	----> if [ -n "$argv[3]" ]...
88	88	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
453	5017243	> fish_prompt
141	141	-> set -g RETVAL $status
400	425334	-> prompt_status
83	2932	--> if [ $RETVAL -ne 0 ]...
214	214	---> [ $RETVAL -ne 0 ]
913	2635	---> prompt_segment black red "✘"
138	138	----> set -l bg
79	79	----> set -l fg
38	287	----> if [ -n "$argv[1]" ]...
98	98	-----> [ -n "$argv[1]" ]
151	151	-----> set bg $argv[1]
31	205	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
82	724	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
166	166	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
88	88	-----> set_color -b $bg
81	81	-----> set_color $current_bg
124	124	-----> echo -n "$segment_separator "
102	102	-----> set_color -b $bg
81	81	-----> set_color $fg
91	91	----> set current_bg $argv[1]
31	198	----> if [ -n "$argv[3]" ]...
81	81	-----> [ -n "$argv[3]" ]
86	86	-----> echo -n -s $argv[3] " "
888	98756	--> set -l uid (id -u $USER)
97868	97868	---> id -u $USER
28	151	--> if [ $uid -eq 0 ]...
123	123	---> [ $uid -eq 0 ]
25	323095	--> if [ (jobs -l | wc -l) -gt 0 ]...
809	323070	---> [ (jobs -l | wc -l) -gt 0 ]
322261	322261	----> jobs -l | wc -l
193	136784	-> prompt_virtual_env
30	136591	--> if test "$VIRTUAL_ENV"...
136561	136561	---> test "$VIRTUAL_ENV"
484	1408	-> prompt_user
93	93	--> set -l BG 444444
74	74	--> set -l FG BCBCBC
37	757	--> if [ "$theme_display_user" = "yes" ]...
102	102	---> [ "$theme_display_user" = "yes" ]
225	528	---> get_hostname
94	94	----> set -g HOSTNAME_PROMPT ""
24	209	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
185	185	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	90	---> if [ $HOSTNAME_PROMPT ]...
68	68	----> [ $HOSTNAME_PROMPT ]
115	12453	-> prompt_dir
1229	12338	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2472	9581	---> prompt_pwd
110	110	----> set -l options 'h/help'
3411	3411	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
37	148	----> if set -q _flag_help...
111	111	-----> set -q _flag_help
89	89	----> set -q fish_prompt_pwd_dir_length
108	108	----> or set -l fish_prompt_pwd_dir_length 1
328	328	----> set realhome ~
731	2639	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
1908	1908	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	276	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
96	96	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
143	143	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
85	85	---> set -l bg
67	67	---> set -l fg
33	216	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
32	204	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
88	88	----> set fg $argv[2]
73	660	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
99	99	----> set_color -b $bg
87	87	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
85	85	----> set_color $fg
91	91	---> set current_bg $argv[1]
33	205	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
89	89	----> echo -n -s $argv[3] " "
183	55221	-> __exists hg
55038	55038	--> command -v "$name" ^/dev/null >&2
536	1662911	-> and prompt_hg
92	92	--> set -l branch
74	74	--> set -l state
65	1662209	--> if command hg id >/dev/null 2>&1...
1662144	1662144	---> command hg id >/dev/null 2>&1
288	52487	-> __exists git
52199	52199	--> command -v "$name" ^/dev/null >&2
1557	2403074	-> and prompt_git
131	131	--> set -l ref
150	2401386	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
308932	308932	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1042	308280	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
307238	307238	----> command git symbolic-ref HEAD 2> /dev/null
28	139	---> if [ $status -gt 0 ]...
111	111	----> [ $status -gt 0 ]
132250	132250	---> set branch_symbol \uE0A0
875	149677	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
148802	148802	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
131	131	---> set -l BG PROMPT
1469	396361	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
394892	394892	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
197	1103234	---> if [ "$dirty" = "" ]...
180	180	----> [ "$dirty" = "" ]
109	109	----> set BG yellow
116	116	----> set dirty ''
77	77	----> set -l empty 0
308783	308783	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
105	105	----> set -l target
95	323602	----> if [ $empty = 1 ]...
107	107	-----> [ $empty = 1 ]
86	86	-----> set target 'HEAD'
90	90	-----> set -l unstaged 0
322825	322825	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
132	132	-----> or set unstaged 1
46	267	-----> if [ $unstaged = 1 ]...
97	97	------> [ $unstaged = 1 ]
124	124	------> set dirty $dirty'●'
93	93	----> set -l staged 0
326514	326514	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	148	----> if [ $staged = 1 ]...
116	116	-----> [ $staged = 1 ]
42	143310	----> if [ "$dirty" = "" ]...
96	96	-----> [ "$dirty" = "" ]
143172	143172	-----> set PROMPT "$branch $dirty"
675	2232	---> prompt_segment $BG black $PROMPT
92	92	----> set -l bg
71	71	----> set -l fg
34	226	----> if [ -n "$argv[1]" ]...
99	99	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
31	207	----> if [ -n "$argv[2]" ]...
87	87	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
72	660	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	-----> set_color -b $bg
96	96	-----> set_color $current_bg
85	85	-----> echo -n "$segment_separator "
82	82	-----> set_color -b $bg
80	80	-----> set_color $fg
92	92	----> set current_bg $argv[1]
31	209	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
93	93	-----> echo -n -s $argv[3] " "
176	42389	-> __exists svn
42213	42213	--> command -v "$name" ^/dev/null >&2
307	223692	-> and prompt_svn
89	89	--> set -l ref
45	223296	--> if command svn ls . >/dev/null 2>&1...
223251	223251	---> command svn ls . >/dev/null 2>&1
275	896	-> prompt_finish
82	469	--> if [ -n $current_bg ]...
105	105	---> [ -n $current_bg ]
98	98	---> set_color -b normal
93	93	---> set_color $current_bg
91	91	---> echo -n "$segment_separator "
71	71	--> set_color normal
81	81	--> set -g current_bg NONE
139	139	> echo $_ " "
189	292338	> __fish_pwd
292149	292149	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
118	191	> __fish_disable_bracketed_paste 'git --version'
73	73	-> printf "\e[?2004l"
118	118	> echo $_ " "
162	141338	> __fish_pwd
141176	141176	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
304891	304891	> git --version
95	190	> __fish_enable_bracketed_paste
95	95	-> printf "\e[?2004h"
333	140684	> fish_mode_prompt
43	140351	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
138274	138274	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	2034	--> switch $fish_bind_mode...
626	1977	---> prompt_segment green black "I"
88	88	----> set -l bg
70	70	----> set -l fg
34	230	----> if [ -n "$argv[1]" ]...
104	104	-----> [ -n "$argv[1]" ]
92	92	-----> set bg $argv[1]
32	205	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
87	87	-----> set fg $argv[2]
53	454	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
85	85	-----> set_color $fg
72	72	-----> echo -n " "
93	93	----> set current_bg $argv[1]
34	211	----> if [ -n "$argv[3]" ]...
90	90	-----> [ -n "$argv[3]" ]
87	87	-----> echo -n -s $argv[3] " "
434	5953498	> fish_prompt
123	123	-> set -g RETVAL $status
361	395528	-> prompt_status
41	179	--> if [ $RETVAL -ne 0 ]...
138	138	---> [ $RETVAL -ne 0 ]
2151	119843	--> set -l uid (id -u $USER)
117692	117692	---> id -u $USER
38	185	--> if [ $uid -eq 0 ]...
147	147	---> [ $uid -eq 0 ]
30	274960	--> if [ (jobs -l | wc -l) -gt 0 ]...
909	274930	---> [ (jobs -l | wc -l) -gt 0 ]
274021	274021	----> jobs -l | wc -l
206	149923	-> prompt_virtual_env
31	149717	--> if test "$VIRTUAL_ENV"...
149686	149686	---> test "$VIRTUAL_ENV"
491	1515	-> prompt_user
95	95	--> set -l BG 444444
76	76	--> set -l FG BCBCBC
38	853	--> if [ "$theme_display_user" = "yes" ]...
115	115	---> [ "$theme_display_user" = "yes" ]
240	608	---> get_hostname
118	118	----> set -g HOSTNAME_PROMPT ""
26	250	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
224	224	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	92	---> if [ $HOSTNAME_PROMPT ]...
70	70	----> [ $HOSTNAME_PROMPT ]
177	7671	-> prompt_dir
1545	7494	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
801	3365	---> prompt_pwd
302	302	----> set -l options 'h/help'
199	199	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
62	216	----> if set -q _flag_help...
154	154	-----> set -q _flag_help
131	131	----> set -q fish_prompt_pwd_dir_length
99	99	----> or set -l fish_prompt_pwd_dir_length 1
420	420	----> set realhome ~
759	929	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
170	170	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	268	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
93	93	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
139	139	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
114	114	---> set -l bg
72	72	---> set -l fg
33	241	---> if [ -n "$argv[1]" ]...
104	104	----> [ -n "$argv[1]" ]
104	104	----> set bg $argv[1]
35	234	---> if [ -n "$argv[2]" ]...
98	98	----> [ -n "$argv[2]" ]
101	101	----> set fg $argv[2]
127	1118	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
180	180	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
126	126	----> set_color -b $bg
96	96	----> set_color $current_bg
101	101	----> echo -n "$segment_separator "
136	136	----> set_color -b $bg
352	352	----> set_color $fg
213	213	---> set current_bg $argv[1]
78	592	---> if [ -n "$argv[3]" ]...
181	181	----> [ -n "$argv[3]" ]
333	333	----> echo -n -s $argv[3] " "
271	60729	-> __exists hg
60458	60458	--> command -v "$name" ^/dev/null >&2
692	1867769	-> and prompt_hg
179	179	--> set -l branch
97	97	--> set -l state
56	1866801	--> if command hg id >/dev/null 2>&1...
1866745	1866745	---> command hg id >/dev/null 2>&1
282	51558	-> __exists git
51276	51276	--> command -v "$name" ^/dev/null >&2
1139	2994370	-> and prompt_git
3338	3338	--> set -l ref
184	2989893	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
347200	347200	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1192	361919	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
360727	360727	----> command git symbolic-ref HEAD 2> /dev/null
52	208	---> if [ $status -gt 0 ]...
156	156	----> [ $status -gt 0 ]
172351	172351	---> set branch_symbol \uE0A0
887	160674	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
159787	159787	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
112	112	---> set -l BG PROMPT
1457	523718	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
522261	522261	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
276	1406402	---> if [ "$dirty" = "" ]...
217	217	----> [ "$dirty" = "" ]
121	121	----> set BG yellow
116	116	----> set dirty ''
131	131	----> set -l empty 0
490241	490241	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
131	131	----> set -l target
111	382035	----> if [ $empty = 1 ]...
2909	2909	-----> [ $empty = 1 ]
131	131	-----> set target 'HEAD'
111	111	-----> set -l unstaged 0
378415	378415	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
120	120	-----> or set unstaged 1
41	238	-----> if [ $unstaged = 1 ]...
98	98	------> [ $unstaged = 1 ]
99	99	------> set dirty $dirty'●'
87	87	----> set -l staged 0
350708	350708	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
38	188	----> if [ $staged = 1 ]...
150	150	-----> [ $staged = 1 ]
62	182151	----> if [ "$dirty" = "" ]...
318	318	-----> [ "$dirty" = "" ]
181771	181771	-----> set PROMPT "$branch $dirty"
1113	17125	---> prompt_segment $BG black $PROMPT
148	148	----> set -l bg
150	150	----> set -l fg
60	388	----> if [ -n "$argv[1]" ]...
165	165	-----> [ -n "$argv[1]" ]
163	163	-----> set bg $argv[1]
54	349	----> if [ -n "$argv[2]" ]...
137	137	-----> [ -n "$argv[2]" ]
158	158	-----> set fg $argv[2]
151	14379	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
289	289	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
5918	5918	-----> set_color -b $bg
319	319	-----> set_color $current_bg
7404	7404	-----> echo -n "$segment_separator "
165	165	-----> set_color -b $bg
133	133	-----> set_color $fg
189	189	----> set current_bg $argv[1]
67	409	----> if [ -n "$argv[3]" ]...
147	147	-----> [ -n "$argv[3]" ]
195	195	-----> echo -n -s $argv[3] " "
316	83304	-> __exists svn
82988	82988	--> command -v "$name" ^/dev/null >&2
538	339471	-> and prompt_svn
166	166	--> set -l ref
64	338767	--> if command svn ls . >/dev/null 2>&1...
338703	338703	---> command svn ls . >/dev/null 2>&1
368	1103	-> prompt_finish
68	544	--> if [ -n $current_bg ]...
139	139	---> [ -n $current_bg ]
113	113	---> set_color -b normal
115	115	---> set_color $current_bg
109	109	---> echo -n "$segment_separator "
89	89	--> set_color normal
102	102	--> set -g current_bg NONE
163	163	> echo $_ " "
2194	376213	> __fish_pwd
374019	374019	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
4148	4244	> source /usr/share/fish/vendor_functions.d/sudo.fish
96	96	-> function sudo --description "Run a command with administrative privileges"...
1656	5488	> source /usr/share/fish/completions/sudo.fish
2020	2020	-> complete -c sudo -s A -d "Ask for password via the askpass or \$SSH_ASKPASS program"
158	158	-> complete -c sudo -s C -d "Close all file descriptors greater or equal to the given number" -a "(seq 0 255)"
85	85	-> complete -c sudo -s E -d "Preserve environment"
84	84	-> complete -c sudo -s H -d "Set home"
78	78	-> complete -c sudo -s K -d "Remove the credential timestamp entirely"
76	76	-> complete -c sudo -s P -d "Preserve group vector"
75	75	-> complete -c sudo -s S -d "Read password from stdin"
75	75	-> complete -c sudo -s b -d "Run command in the background"
76	76	-> complete -c sudo -s e -r -d "Edit"
126	126	-> complete -c sudo -s g -a "(__fish_complete_groups)" -x -d "Run command as group"
107	107	-> complete -c sudo -s h -n "__fish_no_arguments" -d "Display help and exit"
76	76	-> complete -c sudo -s i -d "Run a login shell"
75	75	-> complete -c sudo -s k -d "Reset or ignore the credential timestamp"
78	78	-> complete -c sudo -s l -d "List the allowed and forbidden commands for the given user, or the full path to the given command if it is allowed"
122	122	-> complete -c sudo -s n -d "Do not prompt for a password - if one is needed, fail"
88	88	-> complete -c sudo -s p -d "Specify a custom password prompt"
76	76	-> complete -c sudo -s s -d "Run the given command in a shell"
123	123	-> complete -c sudo -s u -a "(__fish_complete_users)" -x -d "Run command as user"
105	105	-> complete -c sudo -s v -n "__fish_no_arguments" -d "Validate the credentials, extending timeout"
129	129	-> complete -c sudo -d "Command to run" -x -a "(__fish_complete_subcommand_root -u -g)"
215	4225	> __fish_disable_bracketed_paste 'apt-cyf '
4010	4010	-> printf "\e[?2004l"
3295	3295	> echo $_ " "
-57441	196182	> __fish_pwd
192591	192591	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
106	61032	-> __fish_command_not_found_handler apt-cyf
142	60926	--> __fish_default_command_not_found_handler $argv[1]
60784	60784	---> echo "fish: Unknown command '$argv'" >&2
90	174	> __fish_enable_bracketed_paste
84	84	-> printf "\e[?2004h"
478	173143	> fish_mode_prompt
47	172665	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
164508	164508	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
61	8110	--> switch $fish_bind_mode...
644	8049	---> prompt_segment green black "I"
2046	2046	----> set -l bg
77	77	----> set -l fg
38	2154	----> if [ -n "$argv[1]" ]...
2011	2011	-----> [ -n "$argv[1]" ]
105	105	-----> set bg $argv[1]
34	215	----> if [ -n "$argv[2]" ]...
90	90	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
59	2570	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2165	2165	-----> set_color -b $bg
102	102	-----> set_color $fg
94	94	-----> echo -n " "
94	94	----> set current_bg $argv[1]
38	249	----> if [ -n "$argv[3]" ]...
103	103	-----> [ -n "$argv[3]" ]
108	108	-----> echo -n -s $argv[3] " "
453	5680687	> fish_prompt
128	128	-> set -g RETVAL $status
371	442442	-> prompt_status
36	3229	--> if [ $RETVAL -ne 0 ]...
99	99	---> [ $RETVAL -ne 0 ]
873	3094	---> prompt_segment black red "✘"
166	166	----> set -l bg
83	83	----> set -l fg
49	344	----> if [ -n "$argv[1]" ]...
166	166	-----> [ -n "$argv[1]" ]
129	129	-----> set bg $argv[1]
47	364	----> if [ -n "$argv[2]" ]...
171	171	-----> [ -n "$argv[2]" ]
146	146	-----> set fg $argv[2]
104	823	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
158	158	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
103	103	-----> set_color -b $bg
100	100	-----> set_color $current_bg
107	107	-----> echo -n "$segment_separator "
126	126	-----> set_color -b $bg
125	125	-----> set_color $fg
153	153	----> set current_bg $argv[1]
45	288	----> if [ -n "$argv[3]" ]...
121	121	-----> [ -n "$argv[3]" ]
122	122	-----> echo -n -s $argv[3] " "
1673	115472	--> set -l uid (id -u $USER)
113799	113799	---> id -u $USER
49	188	--> if [ $uid -eq 0 ]...
139	139	---> [ $uid -eq 0 ]
34	323182	--> if [ (jobs -l | wc -l) -gt 0 ]...
1410	323148	---> [ (jobs -l | wc -l) -gt 0 ]
321738	321738	----> jobs -l | wc -l
176	147213	-> prompt_virtual_env
26	147037	--> if test "$VIRTUAL_ENV"...
147011	147011	---> test "$VIRTUAL_ENV"
474	1369	-> prompt_user
87	87	--> set -l BG 444444
76	76	--> set -l FG BCBCBC
36	732	--> if [ "$theme_display_user" = "yes" ]...
96	96	---> [ "$theme_display_user" = "yes" ]
222	513	---> get_hostname
85	85	----> set -g HOSTNAME_PROMPT ""
22	206	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
184	184	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
21	87	---> if [ $HOSTNAME_PROMPT ]...
66	66	----> [ $HOSTNAME_PROMPT ]
136	17448	-> prompt_dir
2147	17312	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2542	12317	---> prompt_pwd
112	112	----> set -l options 'h/help'
2124	2124	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
36	137	----> if set -q _flag_help...
101	101	-----> set -q _flag_help
66	66	----> set -q fish_prompt_pwd_dir_length
80	80	----> or set -l fish_prompt_pwd_dir_length 1
321	321	----> set realhome ~
1257	6471	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
5214	5214	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
64	464	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
168	168	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
232	232	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
195	195	---> set -l bg
147	147	---> set -l fg
63	378	---> if [ -n "$argv[1]" ]...
159	159	----> [ -n "$argv[1]" ]
156	156	----> set bg $argv[1]
48	320	---> if [ -n "$argv[2]" ]...
139	139	----> [ -n "$argv[2]" ]
133	133	----> set fg $argv[2]
120	1233	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
240	240	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
159	159	----> set_color -b $bg
143	143	----> set_color $current_bg
273	273	----> echo -n "$segment_separator "
151	151	----> set_color -b $bg
147	147	----> set_color $fg
150	150	---> set current_bg $argv[1]
53	425	---> if [ -n "$argv[3]" ]...
142	142	----> [ -n "$argv[3]" ]
230	230	----> echo -n -s $argv[3] " "
278	66857	-> __exists hg
66579	66579	--> command -v "$name" ^/dev/null >&2
907	1858311	-> and prompt_hg
151	151	--> set -l branch
128	128	--> set -l state
54	1857125	--> if command hg id >/dev/null 2>&1...
1857071	1857071	---> command hg id >/dev/null 2>&1
286	63493	-> __exists git
63207	63207	--> command -v "$name" ^/dev/null >&2
1465	2753060	-> and prompt_git
132	132	--> set -l ref
144	2751463	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
382668	382668	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
981	347455	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
346474	346474	----> command git symbolic-ref HEAD 2> /dev/null
28	129	---> if [ $status -gt 0 ]...
101	101	----> [ $status -gt 0 ]
145312	145312	---> set branch_symbol \uE0A0
941	153365	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
152424	152424	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
129	129	---> set -l BG PROMPT
1291	448055	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
446764	446764	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
200	1271927	---> if [ "$dirty" = "" ]...
142	142	----> [ "$dirty" = "" ]
80	80	----> set BG yellow
79	79	----> set dirty ''
71	71	----> set -l empty 0
355109	355109	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
104	104	----> set -l target
132	377012	----> if [ $empty = 1 ]...
92	92	-----> [ $empty = 1 ]
87	87	-----> set target 'HEAD'
104	104	-----> set -l unstaged 0
375838	375838	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
282	282	-----> or set unstaged 1
77	477	-----> if [ $unstaged = 1 ]...
215	215	------> [ $unstaged = 1 ]
185	185	------> set dirty $dirty'●'
173	173	----> set -l staged 0
386587	386587	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
30	137	----> if [ $staged = 1 ]...
107	107	-----> [ $staged = 1 ]
41	152233	----> if [ "$dirty" = "" ]...
94	94	-----> [ "$dirty" = "" ]
152098	152098	-----> set PROMPT "$branch $dirty"
664	2279	---> prompt_segment $BG black $PROMPT
102	102	----> set -l bg
72	72	----> set -l fg
33	226	----> if [ -n "$argv[1]" ]...
99	99	-----> [ -n "$argv[1]" ]
94	94	-----> set bg $argv[1]
32	207	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
90	90	-----> set fg $argv[2]
77	704	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
89	89	-----> set_color $current_bg
130	130	-----> echo -n "$segment_separator "
84	84	-----> set_color -b $bg
80	80	-----> set_color $fg
93	93	----> set current_bg $argv[1]
32	211	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
177	61466	-> __exists svn
61289	61289	--> command -v "$name" ^/dev/null >&2
336	266989	-> and prompt_svn
91	91	--> set -l ref
61	266562	--> if command svn ls . >/dev/null 2>&1...
266501	266501	---> command svn ls . >/dev/null 2>&1
470	1458	-> prompt_finish
89	727	--> if [ -n $current_bg ]...
161	161	---> [ -n $current_bg ]
149	149	---> set_color -b normal
186	186	---> set_color $current_bg
142	142	---> echo -n "$segment_separator "
119	119	--> set_color normal
142	142	--> set -g current_bg NONE
171	171	> echo $_ " "
259	299745	> __fish_pwd
299486	299486	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
161	293	> __fish_disable_bracketed_paste ''
132	132	-> printf "\e[?2004l"
197	197	> echo $_ " "
203	157484	> __fish_pwd
157281	157281	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
87	165	> __fish_enable_bracketed_paste
78	78	-> printf "\e[?2004h"
321	148850	> fish_mode_prompt
44	148529	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
146385	146385	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	2100	--> switch $fish_bind_mode...
632	2043	---> prompt_segment green black "I"
90	90	----> set -l bg
71	71	----> set -l fg
36	221	----> if [ -n "$argv[1]" ]...
94	94	-----> [ -n "$argv[1]" ]
91	91	-----> set bg $argv[1]
31	205	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
56	521	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
130	130	-----> set_color $fg
90	90	-----> echo -n " "
97	97	----> set current_bg $argv[1]
34	206	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
87	87	-----> echo -n -s $argv[3] " "
391	5743048	> fish_prompt
106	106	-> set -g RETVAL $status
366	456779	-> prompt_status
31	2214	--> if [ $RETVAL -ne 0 ]...
90	90	---> [ $RETVAL -ne 0 ]
605	2093	---> prompt_segment black red "✘"
76	76	----> set -l bg
67	67	----> set -l fg
34	210	----> if [ -n "$argv[1]" ]...
88	88	-----> [ -n "$argv[1]" ]
88	88	-----> set bg $argv[1]
36	208	----> if [ -n "$argv[2]" ]...
84	84	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
71	630	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
87	87	-----> set_color -b $bg
84	84	-----> set_color $current_bg
81	81	-----> echo -n "$segment_separator "
80	80	-----> set_color -b $bg
79	79	-----> set_color $fg
92	92	----> set current_bg $argv[1]
33	205	----> if [ -n "$argv[3]" ]...
83	83	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
677	96505	--> set -l uid (id -u $USER)
95828	95828	---> id -u $USER
27	126	--> if [ $uid -eq 0 ]...
99	99	---> [ $uid -eq 0 ]
33	357568	--> if [ (jobs -l | wc -l) -gt 0 ]...
862	357535	---> [ (jobs -l | wc -l) -gt 0 ]
356673	356673	----> jobs -l | wc -l
249	144223	-> prompt_virtual_env
56	143974	--> if test "$VIRTUAL_ENV"...
143918	143918	---> test "$VIRTUAL_ENV"
481	1404	-> prompt_user
94	94	--> set -l BG 444444
73	73	--> set -l FG BCBCBC
36	756	--> if [ "$theme_display_user" = "yes" ]...
100	100	---> [ "$theme_display_user" = "yes" ]
232	530	---> get_hostname
88	88	----> set -g HOSTNAME_PROMPT ""
23	210	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
187	187	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	90	---> if [ $HOSTNAME_PROMPT ]...
68	68	----> [ $HOSTNAME_PROMPT ]
121	6059	-> prompt_dir
1512	5938	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
520	2475	---> prompt_pwd
100	100	----> set -l options 'h/help'
120	120	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
22	87	----> if set -q _flag_help...
65	65	-----> set -q _flag_help
59	59	----> set -q fish_prompt_pwd_dir_length
75	75	----> or set -l fish_prompt_pwd_dir_length 1
336	336	----> set realhome ~
720	887	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
167	167	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
41	291	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
105	105	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
145	145	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
235	235	---> set -l bg
76	76	---> set -l fg
36	306	---> if [ -n "$argv[1]" ]...
120	120	----> [ -n "$argv[1]" ]
150	150	----> set bg $argv[1]
32	220	---> if [ -n "$argv[2]" ]...
96	96	----> [ -n "$argv[2]" ]
92	92	----> set fg $argv[2]
75	773	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
101	101	----> set_color -b $bg
145	145	----> set_color $current_bg
105	105	----> echo -n "$segment_separator "
97	97	----> set_color -b $bg
100	100	----> set_color $fg
105	105	---> set current_bg $argv[1]
35	236	---> if [ -n "$argv[3]" ]...
99	99	----> [ -n "$argv[3]" ]
102	102	----> echo -n -s $argv[3] " "
267	48072	-> __exists hg
47805	47805	--> command -v "$name" ^/dev/null >&2
723	1909580	-> and prompt_hg
157	157	--> set -l branch
126	126	--> set -l state
84	1908574	--> if command hg id >/dev/null 2>&1...
1908490	1908490	---> command hg id >/dev/null 2>&1
204	58935	-> __exists git
58731	58731	--> command -v "$name" ^/dev/null >&2
1447	2798769	-> and prompt_git
244	244	--> set -l ref
139	2797078	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
356156	356156	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
807	384237	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
383430	383430	----> command git symbolic-ref HEAD 2> /dev/null
26	128	---> if [ $status -gt 0 ]...
102	102	----> [ $status -gt 0 ]
150254	150254	---> set branch_symbol \uE0A0
801	152644	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
151843	151843	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
112	112	---> set -l BG PROMPT
1401	454431	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
453030	453030	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
259	1296737	---> if [ "$dirty" = "" ]...
184	184	----> [ "$dirty" = "" ]
121	121	----> set BG yellow
117	117	----> set dirty ''
125	125	----> set -l empty 0
385039	385039	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
154	154	----> set -l target
111	361729	----> if [ $empty = 1 ]...
144	144	-----> [ $empty = 1 ]
144	144	-----> set target 'HEAD'
119	119	-----> set -l unstaged 0
360800	360800	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
116	116	-----> or set unstaged 1
47	295	-----> if [ $unstaged = 1 ]...
97	97	------> [ $unstaged = 1 ]
151	151	------> set dirty $dirty'●'
108	108	----> set -l staged 0
393485	393485	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
29	158	----> if [ $staged = 1 ]...
129	129	-----> [ $staged = 1 ]
46	155258	----> if [ "$dirty" = "" ]...
172	172	-----> [ "$dirty" = "" ]
155040	155040	-----> set PROMPT "$branch $dirty"
679	2240	---> prompt_segment $BG black $PROMPT
96	96	----> set -l bg
72	72	----> set -l fg
35	229	----> if [ -n "$argv[1]" ]...
100	100	-----> [ -n "$argv[1]" ]
94	94	-----> set bg $argv[1]
33	207	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
71	656	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
151	151	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
97	97	-----> set_color -b $bg
91	91	-----> set_color $current_bg
84	84	-----> echo -n "$segment_separator "
81	81	-----> set_color -b $bg
81	81	-----> set_color $fg
92	92	----> set current_bg $argv[1]
33	209	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
92	92	-----> echo -n -s $argv[3] " "
215	60224	-> __exists svn
60009	60009	--> command -v "$name" ^/dev/null >&2
417	257599	-> and prompt_svn
112	112	--> set -l ref
48	257070	--> if command svn ls . >/dev/null 2>&1...
257022	257022	---> command svn ls . >/dev/null 2>&1
277	907	-> prompt_finish
53	436	--> if [ -n $current_bg ]...
111	111	---> [ -n $current_bg ]
94	94	---> set_color -b normal
90	90	---> set_color $current_bg
88	88	---> echo -n "$segment_separator "
113	113	--> set_color normal
81	81	--> set -g current_bg NONE
148	148	> echo $_ " "
238	305978	> __fish_pwd
305740	305740	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
4817	14853	> up-or-search
6323	6390	-> source /usr/share/fish/functions/up-or-search.fish
67	67	--> function up-or-search -d "Depending on cursor position and current mode, either search backward or move up one line"...
32	2708	-> if commandline --search-mode...
2676	2676	--> commandline --search-mode
25	59	-> if commandline --paging-mode...
34	34	--> commandline --paging-mode
694	788	-> set lineno (commandline -L)
94	94	--> commandline -L
47	91	-> switch $lineno...
44	44	--> commandline -f history-search-backward
119	2361	> __fish_disable_bracketed_paste 'apt-cyg update git'
2242	2242	-> printf "\e[?2004l"
2970	2970	> echo $_ " "
3135	204215	> __fish_pwd
201080	201080	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
13299422	13299422	> apt-cyg update git
123	217	> __fish_enable_bracketed_paste
94	94	-> printf "\e[?2004h"
350	176924	> fish_mode_prompt
44	176574	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
166404	166404	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
56	10126	--> switch $fish_bind_mode...
642	10070	---> prompt_segment green black "I"
2657	2657	----> set -l bg
77	77	----> set -l fg
58	3475	----> if [ -n "$argv[1]" ]...
3261	3261	-----> [ -n "$argv[1]" ]
156	156	-----> set bg $argv[1]
39	258	----> if [ -n "$argv[2]" ]...
111	111	-----> [ -n "$argv[2]" ]
108	108	-----> set fg $argv[2]
61	2643	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
187	187	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2228	2228	-----> set_color -b $bg
93	93	-----> set_color $fg
74	74	-----> echo -n " "
101	101	----> set current_bg $argv[1]
36	217	----> if [ -n "$argv[3]" ]...
88	88	-----> [ -n "$argv[3]" ]
93	93	-----> echo -n -s $argv[3] " "
428	5558720	> fish_prompt
115	115	-> set -g RETVAL $status
408	416066	-> prompt_status
22	112	--> if [ $RETVAL -ne 0 ]...
90	90	---> [ $RETVAL -ne 0 ]
733	95916	--> set -l uid (id -u $USER)
95183	95183	---> id -u $USER
33	161	--> if [ $uid -eq 0 ]...
128	128	---> [ $uid -eq 0 ]
34	319469	--> if [ (jobs -l | wc -l) -gt 0 ]...
1079	319435	---> [ (jobs -l | wc -l) -gt 0 ]
318356	318356	----> jobs -l | wc -l
316	167734	-> prompt_virtual_env
40	167418	--> if test "$VIRTUAL_ENV"...
167378	167378	---> test "$VIRTUAL_ENV"
654	1844	-> prompt_user
114	114	--> set -l BG 444444
92	92	--> set -l FG BCBCBC
49	984	--> if [ "$theme_display_user" = "yes" ]...
127	127	---> [ "$theme_display_user" = "yes" ]
305	690	---> get_hostname
108	108	----> set -g HOSTNAME_PROMPT ""
32	277	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
245	245	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
33	118	---> if [ $HOSTNAME_PROMPT ]...
85	85	----> [ $HOSTNAME_PROMPT ]
125	13668	-> prompt_dir
1211	13543	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2556	10800	---> prompt_pwd
111	111	----> set -l options 'h/help'
2213	2213	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
38	165	----> if set -q _flag_help...
127	127	-----> set -q _flag_help
111	111	----> set -q fish_prompt_pwd_dir_length
226	226	----> or set -l fish_prompt_pwd_dir_length 1
710	710	----> set realhome ~
924	4418	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
3494	3494	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	290	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
95	95	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
158	158	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
69	69	---> set -l fg
33	215	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
30	204	---> if [ -n "$argv[2]" ]...
85	85	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
71	666	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
156	156	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
90	90	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
83	83	----> set_color -b $bg
86	86	----> set_color $fg
91	91	---> set current_bg $argv[1]
31	203	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
89	89	----> echo -n -s $argv[3] " "
201	60291	-> __exists hg
60090	60090	--> command -v "$name" ^/dev/null >&2
802	1777848	-> and prompt_hg
170	170	--> set -l branch
125	125	--> set -l state
69	1776751	--> if command hg id >/dev/null 2>&1...
1776682	1776682	---> command hg id >/dev/null 2>&1
296	52173	-> __exists git
51877	51877	--> command -v "$name" ^/dev/null >&2
1099	2716178	-> and prompt_git
98	98	--> set -l ref
150	2714981	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
326385	326385	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1209	330349	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
329140	329140	----> command git symbolic-ref HEAD 2> /dev/null
40	226	---> if [ $status -gt 0 ]...
186	186	----> [ $status -gt 0 ]
145295	145295	---> set branch_symbol \uE0A0
1003	172906	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
171903	171903	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
138	138	---> set -l BG PROMPT
1956	436807	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
434851	434851	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
221	1300482	---> if [ "$dirty" = "" ]...
192	192	----> [ "$dirty" = "" ]
116	116	----> set BG yellow
125	125	----> set dirty ''
110	110	----> set -l empty 0
365515	365515	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
106	106	----> set -l target
97	387311	----> if [ $empty = 1 ]...
94	94	-----> [ $empty = 1 ]
89	89	-----> set target 'HEAD'
74	74	-----> set -l unstaged 0
386518	386518	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
114	114	-----> or set unstaged 1
46	325	-----> if [ $unstaged = 1 ]...
94	94	------> [ $unstaged = 1 ]
185	185	------> set dirty $dirty'●'
135	135	----> set -l staged 0
368466	368466	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
39	180	----> if [ $staged = 1 ]...
141	141	-----> [ $staged = 1 ]
47	178005	----> if [ "$dirty" = "" ]...
145	145	-----> [ "$dirty" = "" ]
177813	177813	-----> set PROMPT "$branch $dirty"
668	2243	---> prompt_segment $BG black $PROMPT
100	100	----> set -l bg
72	72	----> set -l fg
34	224	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
32	207	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
75	668	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
90	90	-----> set_color $current_bg
92	92	-----> echo -n "$segment_separator "
86	86	-----> set_color -b $bg
82	82	-----> set_color $fg
94	94	----> set current_bg $argv[1]
32	210	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
205	66542	-> __exists svn
66337	66337	--> command -v "$name" ^/dev/null >&2
439	284654	-> and prompt_svn
130	130	--> set -l ref
60	284085	--> if command svn ls . >/dev/null 2>&1...
284025	284025	---> command svn ls . >/dev/null 2>&1
387	1179	-> prompt_finish
72	581	--> if [ -n $current_bg ]...
136	136	---> [ -n $current_bg ]
125	125	---> set_color -b normal
127	127	---> set_color $current_bg
121	121	---> echo -n "$segment_separator "
98	98	--> set_color normal
113	113	--> set -g current_bg NONE
118	118	> echo $_ " "
2695	305080	> __fish_pwd
302385	302385	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
4438	7386	> up-or-search
48	2089	-> if commandline --search-mode...
2041	2041	--> commandline --search-mode
24	55	-> if commandline --paging-mode...
31	31	--> commandline --paging-mode
636	722	-> set lineno (commandline -L)
86	86	--> commandline -L
46	82	-> switch $lineno...
36	36	--> commandline -f history-search-backward
392	602	> up-or-search
72	210	-> if commandline --search-mode...
64	64	--> commandline --search-mode
50	50	--> commandline -f history-search-backward
24	24	--> return
345	494	> up-or-search
48	149	-> if commandline --search-mode...
46	46	--> commandline --search-mode
38	38	--> commandline -f history-search-backward
17	17	--> return
126	2380	> __fish_disable_bracketed_paste 'git --version'
2254	2254	-> printf "\e[?2004l"
121	121	> echo $_ " "
267	171695	> __fish_pwd
171428	171428	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
361513	361513	> git --version
170	317	> __fish_enable_bracketed_paste
147	147	-> printf "\e[?2004h"
574	206121	> fish_mode_prompt
52	205547	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
193379	193379	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	12116	--> switch $fish_bind_mode...
659	12059	---> prompt_segment green black "I"
2175	2175	----> set -l bg
79	79	----> set -l fg
54	3856	----> if [ -n "$argv[1]" ]...
3609	3609	-----> [ -n "$argv[1]" ]
193	193	-----> set bg $argv[1]
77	399	----> if [ -n "$argv[2]" ]...
151	151	-----> [ -n "$argv[2]" ]
171	171	-----> set fg $argv[2]
110	4516	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
292	292	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
3741	3741	-----> set_color -b $bg
212	212	-----> set_color $fg
161	161	-----> echo -n " "
106	106	----> set current_bg $argv[1]
53	269	----> if [ -n "$argv[3]" ]...
113	113	-----> [ -n "$argv[3]" ]
103	103	-----> echo -n -s $argv[3] " "
427	5874608	> fish_prompt
103	103	-> set -g RETVAL $status
389	412608	-> prompt_status
22	108	--> if [ $RETVAL -ne 0 ]...
86	86	---> [ $RETVAL -ne 0 ]
693	102418	--> set -l uid (id -u $USER)
101725	101725	---> id -u $USER
31	138	--> if [ $uid -eq 0 ]...
107	107	---> [ $uid -eq 0 ]
44	309555	--> if [ (jobs -l | wc -l) -gt 0 ]...
905	309511	---> [ (jobs -l | wc -l) -gt 0 ]
308606	308606	----> jobs -l | wc -l
319	152048	-> prompt_virtual_env
35	151729	--> if test "$VIRTUAL_ENV"...
151694	151694	---> test "$VIRTUAL_ENV"
501	1456	-> prompt_user
91	91	--> set -l BG 444444
80	80	--> set -l FG BCBCBC
37	784	--> if [ "$theme_display_user" = "yes" ]...
96	96	---> [ "$theme_display_user" = "yes" ]
249	561	---> get_hostname
85	85	----> set -g HOSTNAME_PROMPT ""
22	227	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
205	205	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
23	90	---> if [ $HOSTNAME_PROMPT ]...
67	67	----> [ $HOSTNAME_PROMPT ]
116	11978	-> prompt_dir
1442	11862	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2364	8303	---> prompt_pwd
111	111	----> set -l options 'h/help'
2097	2097	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	95	----> if set -q _flag_help...
70	70	-----> set -q _flag_help
60	60	----> set -q fish_prompt_pwd_dir_length
78	78	----> or set -l fish_prompt_pwd_dir_length 1
303	303	----> set realhome ~
724	2809	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2085	2085	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
54	386	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
123	123	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
209	209	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
126	126	---> set -l bg
135	135	---> set -l fg
36	237	---> if [ -n "$argv[1]" ]...
106	106	----> [ -n "$argv[1]" ]
95	95	----> set bg $argv[1]
32	208	---> if [ -n "$argv[2]" ]...
87	87	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
128	1030	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
183	183	----> set_color -b $bg
151	151	----> set_color $current_bg
111	111	----> echo -n "$segment_separator "
151	151	----> set_color -b $bg
158	158	----> set_color $fg
124	124	---> set current_bg $argv[1]
35	257	---> if [ -n "$argv[3]" ]...
99	99	----> [ -n "$argv[3]" ]
123	123	----> echo -n -s $argv[3] " "
204	60062	-> __exists hg
59858	59858	--> command -v "$name" ^/dev/null >&2
732	2013938	-> and prompt_hg
127	127	--> set -l branch
104	104	--> set -l state
56	2012975	--> if command hg id >/dev/null 2>&1...
2012919	2012919	---> command hg id >/dev/null 2>&1
264	48497	-> __exists git
48233	48233	--> command -v "$name" ^/dev/null >&2
1586	2834860	-> and prompt_git
119	119	--> set -l ref
139	2833155	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
367631	367631	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1047	351403	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
350356	350356	----> command git symbolic-ref HEAD 2> /dev/null
40	178	---> if [ $status -gt 0 ]...
138	138	----> [ $status -gt 0 ]
160691	160691	---> set branch_symbol \uE0A0
867	160972	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
160105	160105	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
83	83	---> set -l BG PROMPT
1452	525346	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
523894	523894	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
295	1263198	---> if [ "$dirty" = "" ]...
176	176	----> [ "$dirty" = "" ]
97	97	----> set BG yellow
108	108	----> set dirty ''
91	91	----> set -l empty 0
359241	359241	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
232	232	----> set -l target
120	376559	----> if [ $empty = 1 ]...
173	173	-----> [ $empty = 1 ]
147	147	-----> set target 'HEAD'
111	111	-----> set -l unstaged 0
375665	375665	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
113	113	-----> or set unstaged 1
38	230	-----> if [ $unstaged = 1 ]...
99	99	------> [ $unstaged = 1 ]
93	93	------> set dirty $dirty'●'
86	86	----> set -l staged 0
364542	364542	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
31	139	----> if [ $staged = 1 ]...
108	108	-----> [ $staged = 1 ]
68	161632	----> if [ "$dirty" = "" ]...
91	91	-----> [ "$dirty" = "" ]
161473	161473	-----> set PROMPT "$branch $dirty"
965	3514	---> prompt_segment $BG black $PROMPT
133	133	----> set -l bg
79	79	----> set -l fg
55	324	----> if [ -n "$argv[1]" ]...
122	122	-----> [ -n "$argv[1]" ]
147	147	-----> set bg $argv[1]
50	439	----> if [ -n "$argv[2]" ]...
237	237	-----> [ -n "$argv[2]" ]
152	152	-----> set fg $argv[2]
89	1194	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
181	181	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
139	139	-----> set_color -b $bg
93	93	-----> set_color $current_bg
155	155	-----> echo -n "$segment_separator "
421	421	-----> set_color -b $bg
116	116	-----> set_color $fg
117	117	----> set current_bg $argv[1]
37	263	----> if [ -n "$argv[3]" ]...
126	126	-----> [ -n "$argv[3]" ]
100	100	-----> echo -n -s $argv[3] " "
186	50826	-> __exists svn
50640	50640	--> command -v "$name" ^/dev/null >&2
382	286648	-> and prompt_svn
105	105	--> set -l ref
52	286161	--> if command svn ls . >/dev/null 2>&1...
286109	286109	---> command svn ls . >/dev/null 2>&1
388	1157	-> prompt_finish
71	570	--> if [ -n $current_bg ]...
137	137	---> [ -n $current_bg ]
118	118	---> set_color -b normal
123	123	---> set_color $current_bg
121	121	---> echo -n "$segment_separator "
94	94	--> set_color normal
105	105	--> set -g current_bg NONE
122	122	> echo $_ " "
2514	309193	> __fish_pwd
306679	306679	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2683	100162	> __fish_start_bracketed_paste
2082	2082	-> set -g __fish_last_bind_mode $fish_bind_mode
3726	95397	-> __fish_commandline_is_singlequoted
69	69	--> set -l state normal
862	88451	--> for char in (commandline -ct | string split "")...
87412	87412	---> commandline -ct | string split ""
116	177	---> switch $char...
61	61	----> switch $state...
54	3151	--> if contains -- $state single single-escaped...
3059	3059	---> contains -- $state single single-escaped
38	38	---> return 1
3677	8605	> __fish_commandline_insert_escaped \\ $__fish_paste_quoted
1500	4928	-> if set -q argv[2]...
56	56	--> set -q argv[2]
3372	3372	--> commandline -i $argv[1]
7563	7563	> commandline -i \n
3751	3928	> __fish_stop_bracketed_paste
88	88	-> set fish_bind_mode $__fish_last_bind_mode
47	47	-> set -e __fish_paste_quoted
42	42	-> commandline -f force-repaint
422	13510	> fish_mode_prompt
43	13088	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
2423	2423	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	10622	--> switch $fish_bind_mode...
857	10565	---> prompt_segment green black "I"
107	107	----> set -l bg
85	85	----> set -l fg
40	2633	----> if [ -n "$argv[1]" ]...
2483	2483	-----> [ -n "$argv[1]" ]
110	110	-----> set bg $argv[1]
37	431	----> if [ -n "$argv[2]" ]...
91	91	-----> [ -n "$argv[2]" ]
303	303	-----> set fg $argv[2]
69	5733	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
170	170	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2679	2679	-----> set_color -b $bg
265	265	-----> set_color $fg
2550	2550	-----> echo -n " "
145	145	----> set current_bg $argv[1]
46	574	----> if [ -n "$argv[3]" ]...
395	395	-----> [ -n "$argv[3]" ]
133	133	-----> echo -n -s $argv[3] " "
774	5168474	> fish_prompt
163	163	-> set -g RETVAL $status
394	438770	-> prompt_status
45	141	--> if [ $RETVAL -ne 0 ]...
96	96	---> [ $RETVAL -ne 0 ]
1130	104995	--> set -l uid (id -u $USER)
103865	103865	---> id -u $USER
26	118	--> if [ $uid -eq 0 ]...
92	92	---> [ $uid -eq 0 ]
30	333122	--> if [ (jobs -l | wc -l) -gt 0 ]...
846	333092	---> [ (jobs -l | wc -l) -gt 0 ]
332246	332246	----> jobs -l | wc -l
235	136644	-> prompt_virtual_env
31	136409	--> if test "$VIRTUAL_ENV"...
136378	136378	---> test "$VIRTUAL_ENV"
486	1421	-> prompt_user
93	93	--> set -l BG 444444
77	77	--> set -l FG BCBCBC
37	765	--> if [ "$theme_display_user" = "yes" ]...
102	102	---> [ "$theme_display_user" = "yes" ]
228	535	---> get_hostname
95	95	----> set -g HOSTNAME_PROMPT ""
24	212	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
188	188	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	91	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
115	9907	-> prompt_dir
1188	9792	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2529	7081	---> prompt_pwd
118	118	----> set -l options 'h/help'
2157	2157	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
32	127	----> if set -q _flag_help...
95	95	-----> set -q _flag_help
92	92	----> set -q fish_prompt_pwd_dir_length
332	332	----> or set -l fish_prompt_pwd_dir_length 1
507	507	----> set realhome ~
763	948	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
185	185	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	271	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
90	90	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
144	144	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
81	81	---> set -l bg
68	68	---> set -l fg
33	217	---> if [ -n "$argv[1]" ]...
94	94	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
32	203	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
75	658	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
145	145	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	----> set_color -b $bg
87	87	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
87	87	----> set_color $fg
92	92	---> set current_bg $argv[1]
31	204	---> if [ -n "$argv[3]" ]...
84	84	----> [ -n "$argv[3]" ]
89	89	----> echo -n -s $argv[3] " "
174	42806	-> __exists hg
42632	42632	--> command -v "$name" ^/dev/null >&2
511	1710816	-> and prompt_hg
93	93	--> set -l branch
73	73	--> set -l state
49	1710139	--> if command hg id >/dev/null 2>&1...
1710090	1710090	---> command hg id >/dev/null 2>&1
260	54438	-> __exists git
54178	54178	--> command -v "$name" ^/dev/null >&2
1135	2487518	-> and prompt_git
99	99	--> set -l ref
138	2486284	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
312113	312113	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
898	317586	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
316688	316688	----> command git symbolic-ref HEAD 2> /dev/null
36	177	---> if [ $status -gt 0 ]...
141	141	----> [ $status -gt 0 ]
136219	136219	---> set branch_symbol \uE0A0
996	158347	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
157351	157351	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
87	87	---> set -l BG PROMPT
1106	404136	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
403030	403030	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
356	1155244	---> if [ "$dirty" = "" ]...
135	135	----> [ "$dirty" = "" ]
79	79	----> set BG yellow
80	80	----> set dirty ''
74	74	----> set -l empty 0
310675	310675	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
356	356	----> set -l target
107	351623	----> if [ $empty = 1 ]...
158	158	-----> [ $empty = 1 ]
98	98	-----> set target 'HEAD'
89	89	-----> set -l unstaged 0
350705	350705	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
138	138	-----> or set unstaged 1
55	328	-----> if [ $unstaged = 1 ]...
128	128	------> [ $unstaged = 1 ]
145	145	------> set dirty $dirty'●'
87	87	----> set -l staged 0
348979	348979	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
42	227	----> if [ $staged = 1 ]...
185	185	-----> [ $staged = 1 ]
48	142573	----> if [ "$dirty" = "" ]...
132	132	-----> [ "$dirty" = "" ]
142393	142393	-----> set PROMPT "$branch $dirty"
674	2237	---> prompt_segment $BG black $PROMPT
94	94	----> set -l bg
73	73	----> set -l fg
32	224	----> if [ -n "$argv[1]" ]...
98	98	-----> [ -n "$argv[1]" ]
94	94	-----> set bg $argv[1]
32	207	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
72	658	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
151	151	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
96	96	-----> set_color $current_bg
85	85	-----> echo -n "$segment_separator "
81	81	-----> set_color -b $bg
79	79	-----> set_color $fg
96	96	----> set current_bg $argv[1]
31	211	----> if [ -n "$argv[3]" ]...
87	87	-----> [ -n "$argv[3]" ]
93	93	-----> echo -n -s $argv[3] " "
192	53440	-> __exists svn
53248	53248	--> command -v "$name" ^/dev/null >&2
586	230140	-> and prompt_svn
133	133	--> set -l ref
75	229421	--> if command svn ls . >/dev/null 2>&1...
229346	229346	---> command svn ls . >/dev/null 2>&1
646	1637	-> prompt_finish
86	720	--> if [ -n $current_bg ]...
161	161	---> [ -n $current_bg ]
152	152	---> set_color -b normal
161	161	---> set_color $current_bg
160	160	---> echo -n "$segment_separator "
121	121	--> set_color normal
150	150	--> set -g current_bg NONE
202	202	> echo $_ " "
3848	293916	> __fish_pwd
290068	290068	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2285	3285	> up-or-search
26	75	-> if commandline --search-mode...
49	49	--> commandline --search-mode
22	52	-> if commandline --paging-mode...
30	30	--> commandline --paging-mode
682	774	-> set lineno (commandline -L)
92	92	--> commandline -L
61	99	-> switch $lineno...
38	38	--> commandline -f up-line
361	1308	> up-or-search
26	71	-> if commandline --search-mode...
45	45	--> commandline --search-mode
22	52	-> if commandline --paging-mode...
30	30	--> commandline --paging-mode
657	741	-> set lineno (commandline -L)
84	84	--> commandline -L
46	83	-> switch $lineno...
37	37	--> commandline -f history-search-backward
161	4508	> __fish_disable_bracketed_paste et\ isyg\ all\ libcurl4-gnutls-dev\ libexpat1-dev\ gettext\ \\\n\ \ libz-dev\ libssl-dev
4347	4347	-> printf "\e[?2004l"
1932	1932	> echo $_ " "
-58317	152490	> __fish_pwd
150471	150471	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
122	60336	-> __fish_command_not_found_handler et isyg all libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
152	60214	--> __fish_default_command_not_found_handler $argv[1]
60062	60062	---> echo "fish: Unknown command '$argv'" >&2
91	183	> __fish_enable_bracketed_paste
92	92	-> printf "\e[?2004h"
342	153168	> fish_mode_prompt
42	152826	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
143654	143654	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
81	9130	--> switch $fish_bind_mode...
678	9049	---> prompt_segment green black "I"
3321	3321	----> set -l bg
76	76	----> set -l fg
38	2048	----> if [ -n "$argv[1]" ]...
1911	1911	-----> [ -n "$argv[1]" ]
99	99	-----> set bg $argv[1]
34	206	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
87	87	-----> set fg $argv[2]
54	2412	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2037	2037	-----> set_color -b $bg
99	99	-----> set_color $fg
75	75	-----> echo -n " "
98	98	----> set current_bg $argv[1]
34	210	----> if [ -n "$argv[3]" ]...
87	87	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
415	5167067	> fish_prompt
110	110	-> set -g RETVAL $status
344	418295	-> prompt_status
31	2214	--> if [ $RETVAL -ne 0 ]...
91	91	---> [ $RETVAL -ne 0 ]
605	2092	---> prompt_segment black red "✘"
75	75	----> set -l bg
67	67	----> set -l fg
33	211	----> if [ -n "$argv[1]" ]...
88	88	-----> [ -n "$argv[1]" ]
90	90	-----> set bg $argv[1]
31	207	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
70	633	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
89	89	-----> set_color -b $bg
85	85	-----> set_color $current_bg
82	82	-----> echo -n "$segment_separator "
79	79	-----> set_color -b $bg
80	80	-----> set_color $fg
90	90	----> set current_bg $argv[1]
32	204	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
707	90631	--> set -l uid (id -u $USER)
89924	89924	---> id -u $USER
26	132	--> if [ $uid -eq 0 ]...
106	106	---> [ $uid -eq 0 ]
25	324974	--> if [ (jobs -l | wc -l) -gt 0 ]...
787	324949	---> [ (jobs -l | wc -l) -gt 0 ]
324162	324162	----> jobs -l | wc -l
187	137430	-> prompt_virtual_env
31	137243	--> if test "$VIRTUAL_ENV"...
137212	137212	---> test "$VIRTUAL_ENV"
588	2218	-> prompt_user
187	187	--> set -l BG 444444
116	116	--> set -l FG BCBCBC
59	1327	--> if [ "$theme_display_user" = "yes" ]...
267	267	---> [ "$theme_display_user" = "yes" ]
486	908	---> get_hostname
155	155	----> set -g HOSTNAME_PROMPT ""
26	267	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
241	241	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
24	93	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
122	11083	-> prompt_dir
1257	10961	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2401	8090	---> prompt_pwd
122	122	----> set -l options 'h/help'
2020	2020	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	96	----> if set -q _flag_help...
71	71	-----> set -q _flag_help
61	61	----> set -q fish_prompt_pwd_dir_length
77	77	----> or set -l fish_prompt_pwd_dir_length 1
304	304	----> set realhome ~
695	2740	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2045	2045	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	269	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
140	140	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
69	69	---> set -l fg
33	216	---> if [ -n "$argv[1]" ]...
93	93	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
33	204	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
122	736	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
172	172	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
99	99	----> set_color -b $bg
89	89	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
86	86	----> set_color $fg
91	91	---> set current_bg $argv[1]
33	214	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
98	98	----> echo -n -s $argv[3] " "
182	53112	-> __exists hg
52930	52930	--> command -v "$name" ^/dev/null >&2
544	1759539	-> and prompt_hg
126	126	--> set -l branch
117	117	--> set -l state
48	1758752	--> if command hg id >/dev/null 2>&1...
1758704	1758704	---> command hg id >/dev/null 2>&1
225	54646	-> __exists git
54421	54421	--> command -v "$name" ^/dev/null >&2
1568	2447728	-> and prompt_git
118	118	--> set -l ref
128	2446042	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
294708	294708	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
837	318392	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
317555	317555	----> command git symbolic-ref HEAD 2> /dev/null
29	127	---> if [ $status -gt 0 ]...
98	98	----> [ $status -gt 0 ]
136034	136034	---> set branch_symbol \uE0A0
788	153774	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
152986	152986	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
125	125	---> set -l BG PROMPT
1229	392868	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
391639	391639	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
201	1147650	---> if [ "$dirty" = "" ]...
144	144	----> [ "$dirty" = "" ]
78	78	----> set BG yellow
83	83	----> set dirty ''
73	73	----> set -l empty 0
319758	319758	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
137	137	----> set -l target
109	337136	----> if [ $empty = 1 ]...
139	139	-----> [ $empty = 1 ]
129	129	-----> set target 'HEAD'
106	106	-----> set -l unstaged 0
336306	336306	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
116	116	-----> or set unstaged 1
40	231	-----> if [ $unstaged = 1 ]...
96	96	------> [ $unstaged = 1 ]
95	95	------> set dirty $dirty'●'
82	82	----> set -l staged 0
345662	345662	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	148	----> if [ $staged = 1 ]...
116	116	-----> [ $staged = 1 ]
42	144148	----> if [ "$dirty" = "" ]...
100	100	-----> [ "$dirty" = "" ]
144006	144006	-----> set PROMPT "$branch $dirty"
669	2236	---> prompt_segment $BG black $PROMPT
105	105	----> set -l bg
72	72	----> set -l fg
33	225	----> if [ -n "$argv[1]" ]...
99	99	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
33	205	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
87	87	-----> set fg $argv[2]
73	659	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
88	88	-----> set_color $current_bg
92	92	-----> echo -n "$segment_separator "
83	83	-----> set_color -b $bg
80	80	-----> set_color $fg
92	92	----> set current_bg $argv[1]
33	209	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
179	52538	-> __exists svn
52359	52359	--> command -v "$name" ^/dev/null >&2
321	228815	-> and prompt_svn
93	93	--> set -l ref
49	228401	--> if command svn ls . >/dev/null 2>&1...
228352	228352	---> command svn ls . >/dev/null 2>&1
369	1138	-> prompt_finish
72	549	--> if [ -n $current_bg ]...
136	136	---> [ -n $current_bg ]
111	111	---> set_color -b normal
117	117	---> set_color $current_bg
113	113	---> echo -n "$segment_separator "
90	90	--> set_color normal
130	130	--> set -g current_bg NONE
141	141	> echo $_ " "
212	301062	> __fish_pwd
300850	300850	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2530	5553	> up-or-search
28	2080	-> if commandline --search-mode...
2052	2052	--> commandline --search-mode
23	56	-> if commandline --paging-mode...
33	33	--> commandline --paging-mode
703	803	-> set lineno (commandline -L)
100	100	--> commandline -L
47	84	-> switch $lineno...
37	37	--> commandline -f history-search-backward
145	2592	> __fish_disable_bracketed_paste apt-syg\ all\ libcurl4-gnutls-dev\ libexpat1-dev\ gettext\ \\\n\ \ libz-dev\ libssl-dev
2447	2447	-> printf "\e[?2004l"
2177	2177	> echo $_ " "
-40228	139687	> __fish_pwd
137782	137782	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
152	42133	-> __fish_command_not_found_handler apt-syg all libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
322	41981	--> __fish_default_command_not_found_handler $argv[1]
41659	41659	---> echo "fish: Unknown command '$argv'" >&2
118	219	> __fish_enable_bracketed_paste
101	101	-> printf "\e[?2004h"
328	157326	> fish_mode_prompt
45	156998	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
148937	148937	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
58	8016	--> switch $fish_bind_mode...
687	7958	---> prompt_segment green black "I"
2058	2058	----> set -l bg
87	87	----> set -l fg
38	2048	----> if [ -n "$argv[1]" ]...
1888	1888	-----> [ -n "$argv[1]" ]
122	122	-----> set bg $argv[1]
34	214	----> if [ -n "$argv[2]" ]...
89	89	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
56	2531	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2155	2155	-----> set_color -b $bg
95	95	-----> set_color $fg
75	75	-----> echo -n " "
98	98	----> set current_bg $argv[1]
37	235	----> if [ -n "$argv[3]" ]...
107	107	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
431	5093153	> fish_prompt
115	115	-> set -g RETVAL $status
348	395670	-> prompt_status
31	2343	--> if [ $RETVAL -ne 0 ]...
92	92	---> [ $RETVAL -ne 0 ]
674	2220	---> prompt_segment black red "✘"
93	93	----> set -l bg
71	71	----> set -l fg
33	215	----> if [ -n "$argv[1]" ]...
91	91	-----> [ -n "$argv[1]" ]
91	91	-----> set bg $argv[1]
30	204	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
71	662	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
170	170	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
92	92	-----> set_color -b $bg
86	86	-----> set_color $current_bg
84	84	-----> echo -n "$segment_separator "
80	80	-----> set_color -b $bg
79	79	-----> set_color $fg
93	93	----> set current_bg $argv[1]
33	208	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
797	100964	--> set -l uid (id -u $USER)
100167	100167	---> id -u $USER
36	175	--> if [ $uid -eq 0 ]...
139	139	---> [ $uid -eq 0 ]
27	291840	--> if [ (jobs -l | wc -l) -gt 0 ]...
1343	291813	---> [ (jobs -l | wc -l) -gt 0 ]
290470	290470	----> jobs -l | wc -l
193	166212	-> prompt_virtual_env
33	166019	--> if test "$VIRTUAL_ENV"...
165986	165986	---> test "$VIRTUAL_ENV"
705	1732	-> prompt_user
132	132	--> set -l BG 444444
119	119	--> set -l FG BCBCBC
37	776	--> if [ "$theme_display_user" = "yes" ]...
106	106	---> [ "$theme_display_user" = "yes" ]
231	542	---> get_hostname
90	90	----> set -g HOSTNAME_PROMPT ""
23	221	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
198	198	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	91	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
115	11422	-> prompt_dir
1191	11307	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2464	8587	---> prompt_pwd
112	112	----> set -l options 'h/help'
2056	2056	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
26	97	----> if set -q _flag_help...
71	71	-----> set -q _flag_help
62	62	----> set -q fish_prompt_pwd_dir_length
77	77	----> or set -l fish_prompt_pwd_dir_length 1
308	308	----> set realhome ~
669	3138	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2469	2469	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
39	273	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
95	95	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
139	139	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
69	69	---> set -l fg
33	216	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
33	203	---> if [ -n "$argv[2]" ]...
83	83	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
71	663	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
146	146	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
95	95	----> set_color $current_bg
85	85	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
86	86	----> set_color $fg
91	91	---> set current_bg $argv[1]
32	203	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
88	88	----> echo -n -s $argv[3] " "
170	51488	-> __exists hg
51318	51318	--> command -v "$name" ^/dev/null >&2
512	1656901	-> and prompt_hg
86	86	--> set -l branch
105	105	--> set -l state
45	1656198	--> if command hg id >/dev/null 2>&1...
1656153	1656153	---> command hg id >/dev/null 2>&1
211	45511	-> __exists git
45300	45300	--> command -v "$name" ^/dev/null >&2
1117	2481676	-> and prompt_git
99	99	--> set -l ref
127	2480460	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
334077	334077	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
856	313420	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
312564	312564	----> command git symbolic-ref HEAD 2> /dev/null
26	127	---> if [ $status -gt 0 ]...
101	101	----> [ $status -gt 0 ]
135041	135041	---> set branch_symbol \uE0A0
774	138023	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
137249	137249	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
88	88	---> set -l BG PROMPT
1310	426399	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
425089	425089	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
219	1130518	---> if [ "$dirty" = "" ]...
179	179	----> [ "$dirty" = "" ]
106	106	----> set BG yellow
109	109	----> set dirty ''
115	115	----> set -l empty 0
319795	319795	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
134	134	----> set -l target
97	320189	----> if [ $empty = 1 ]...
149	149	-----> [ $empty = 1 ]
115	115	-----> set target 'HEAD'
76	76	-----> set -l unstaged 0
319413	319413	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
114	114	-----> or set unstaged 1
37	225	-----> if [ $unstaged = 1 ]...
95	95	------> [ $unstaged = 1 ]
93	93	------> set dirty $dirty'●'
86	86	----> set -l staged 0
355564	355564	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	149	----> if [ $staged = 1 ]...
117	117	-----> [ $staged = 1 ]
42	133873	----> if [ "$dirty" = "" ]...
97	97	-----> [ "$dirty" = "" ]
133734	133734	-----> set PROMPT "$branch $dirty"
704	2640	---> prompt_segment $BG black $PROMPT
88	88	----> set -l bg
82	82	----> set -l fg
66	513	----> if [ -n "$argv[1]" ]...
188	188	-----> [ -n "$argv[1]" ]
259	259	-----> set bg $argv[1]
34	240	----> if [ -n "$argv[2]" ]...
93	93	-----> [ -n "$argv[2]" ]
113	113	-----> set fg $argv[2]
72	706	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
170	170	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
93	93	-----> set_color -b $bg
111	111	-----> set_color $current_bg
93	93	-----> echo -n "$segment_separator "
85	85	-----> set_color -b $bg
82	82	-----> set_color $fg
92	92	----> set current_bg $argv[1]
34	215	----> if [ -n "$argv[3]" ]...
86	86	-----> [ -n "$argv[3]" ]
95	95	-----> echo -n -s $argv[3] " "
194	54429	-> __exists svn
54235	54235	--> command -v "$name" ^/dev/null >&2
303	226665	-> and prompt_svn
182	182	--> set -l ref
50	226180	--> if command svn ls . >/dev/null 2>&1...
226130	226130	---> command svn ls . >/dev/null 2>&1
283	901	-> prompt_finish
52	456	--> if [ -n $current_bg ]...
107	107	---> [ -n $current_bg ]
101	101	---> set_color -b normal
92	92	---> set_color $current_bg
104	104	---> echo -n "$segment_separator "
65	65	--> set_color normal
97	97	--> set -g current_bg NONE
152	152	> echo $_ " "
158	270336	> __fish_pwd
270178	270178	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2504	5612	> up-or-search
28	2181	-> if commandline --search-mode...
2153	2153	--> commandline --search-mode
25	61	-> if commandline --paging-mode...
36	36	--> commandline --paging-mode
683	779	-> set lineno (commandline -L)
96	96	--> commandline -L
47	87	-> switch $lineno...
40	40	--> commandline -f history-search-backward
3298	14446	> down-or-search
4599	4646	-> source /usr/share/fish/functions/down-or-search.fish
47	47	--> function down-or-search -d "Depending on cursor position and current mode, either search forward or move down one line"...
24	72	-> if commandline --search-mode...
48	48	--> commandline --search-mode
21	49	-> if commandline --paging-mode...
28	28	--> commandline --paging-mode
2788	2888	-> set lineno (commandline -L)
100	100	--> commandline -L
579	3393	-> set line_count (count (commandline))
2709	2814	--> count (commandline)
105	105	---> commandline
60	100	-> switch $lineno...
40	40	--> commandline -f history-search-forward
373	521	> up-or-search
44	148	-> if commandline --search-mode...
52	52	--> commandline --search-mode
35	35	--> commandline -f history-search-backward
17	17	--> return
118	2141	> __fish_disable_bracketed_paste \ \ \ \ \ \ \ apt-syg\ all\ libcurl4-gnutls-dev\ libexpat1-dev\ gettext\ \\\n\ \ libz-dev\ libssl-dev
2023	2023	-> printf "\e[?2004l"
2031	2031	> echo $_ " "
-41941	148658	> __fish_pwd
146667	146667	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
130	43932	-> __fish_command_not_found_handler apt-syg all libcurl4-gnutls-dev libexpat1-dev gettext libz-dev libssl-dev
189	43802	--> __fish_default_command_not_found_handler $argv[1]
43613	43613	---> echo "fish: Unknown command '$argv'" >&2
94	178	> __fish_enable_bracketed_paste
84	84	-> printf "\e[?2004h"
374	154249	> fish_mode_prompt
48	153875	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
145760	145760	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
71	8067	--> switch $fish_bind_mode...
2431	7996	---> prompt_segment green black "I"
89	89	----> set -l bg
71	71	----> set -l fg
38	2268	----> if [ -n "$argv[1]" ]...
2125	2125	-----> [ -n "$argv[1]" ]
105	105	-----> set bg $argv[1]
37	244	----> if [ -n "$argv[2]" ]...
97	97	-----> [ -n "$argv[2]" ]
110	110	-----> set fg $argv[2]
57	2570	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
152	152	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2190	2190	-----> set_color -b $bg
95	95	-----> set_color $fg
76	76	-----> echo -n " "
99	99	----> set current_bg $argv[1]
34	224	----> if [ -n "$argv[3]" ]...
93	93	-----> [ -n "$argv[3]" ]
97	97	-----> echo -n -s $argv[3] " "
482	5097884	> fish_prompt
109	109	-> set -g RETVAL $status
366	422961	-> prompt_status
32	2219	--> if [ $RETVAL -ne 0 ]...
91	91	---> [ $RETVAL -ne 0 ]
603	2096	---> prompt_segment black red "✘"
76	76	----> set -l bg
69	69	----> set -l fg
31	210	----> if [ -n "$argv[1]" ]...
89	89	-----> [ -n "$argv[1]" ]
90	90	-----> set bg $argv[1]
31	201	----> if [ -n "$argv[2]" ]...
83	83	-----> [ -n "$argv[2]" ]
87	87	-----> set fg $argv[2]
73	639	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
88	88	-----> set_color -b $bg
84	84	-----> set_color $current_bg
81	81	-----> echo -n "$segment_separator "
85	85	-----> set_color -b $bg
81	81	-----> set_color $fg
93	93	----> set current_bg $argv[1]
31	205	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
804	98836	--> set -l uid (id -u $USER)
98032	98032	---> id -u $USER
35	168	--> if [ $uid -eq 0 ]...
133	133	---> [ $uid -eq 0 ]
38	321372	--> if [ (jobs -l | wc -l) -gt 0 ]...
1009	321334	---> [ (jobs -l | wc -l) -gt 0 ]
320325	320325	----> jobs -l | wc -l
231	135421	-> prompt_virtual_env
34	135190	--> if test "$VIRTUAL_ENV"...
135156	135156	---> test "$VIRTUAL_ENV"
490	1432	-> prompt_user
96	96	--> set -l BG 444444
76	76	--> set -l FG BCBCBC
36	770	--> if [ "$theme_display_user" = "yes" ]...
102	102	---> [ "$theme_display_user" = "yes" ]
228	540	---> get_hostname
91	91	----> set -g HOSTNAME_PROMPT ""
24	221	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
197	197	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
23	92	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
205	11344	-> prompt_dir
1266	11139	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2481	8197	---> prompt_pwd
111	111	----> set -l options 'h/help'
2096	2096	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
26	95	----> if set -q _flag_help...
69	69	-----> set -q _flag_help
60	60	----> set -q fish_prompt_pwd_dir_length
76	76	----> or set -l fish_prompt_pwd_dir_length 1
312	312	----> set realhome ~
650	2693	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2043	2043	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
38	273	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
143	143	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
69	69	---> set -l fg
34	223	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
97	97	----> set bg $argv[1]
32	206	---> if [ -n "$argv[2]" ]...
85	85	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
73	683	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
97	97	----> set_color -b $bg
88	88	----> set_color $current_bg
85	85	----> echo -n "$segment_separator "
86	86	----> set_color -b $bg
106	106	----> set_color $fg
92	92	---> set current_bg $argv[1]
58	319	---> if [ -n "$argv[3]" ]...
111	111	----> [ -n "$argv[3]" ]
150	150	----> echo -n -s $argv[3] " "
392	43578	-> __exists hg
43186	43186	--> command -v "$name" ^/dev/null >&2
728	1687601	-> and prompt_hg
124	124	--> set -l branch
106	106	--> set -l state
67	1686643	--> if command hg id >/dev/null 2>&1...
1686576	1686576	---> command hg id >/dev/null 2>&1
320	58297	-> __exists git
57977	57977	--> command -v "$name" ^/dev/null >&2
1148	2458772	-> and prompt_git
99	99	--> set -l ref
182	2457525	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
313344	313344	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1030	319454	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
318424	318424	----> command git symbolic-ref HEAD 2> /dev/null
41	168	---> if [ $status -gt 0 ]...
127	127	----> [ $status -gt 0 ]
133594	133594	---> set branch_symbol \uE0A0
911	138493	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
137582	137582	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
150	150	---> set -l BG PROMPT
1412	420779	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
419367	419367	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
267	1127253	---> if [ "$dirty" = "" ]...
144	144	----> [ "$dirty" = "" ]
79	79	----> set BG yellow
79	79	----> set dirty ''
72	72	----> set -l empty 0
320369	320369	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
178	178	----> set -l target
99	337566	----> if [ $empty = 1 ]...
195	195	-----> [ $empty = 1 ]
139	139	-----> set target 'HEAD'
122	122	-----> set -l unstaged 0
336682	336682	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
107	107	-----> or set unstaged 1
38	222	-----> if [ $unstaged = 1 ]...
93	93	------> [ $unstaged = 1 ]
91	91	------> set dirty $dirty'●'
108	108	----> set -l staged 0
333601	333601	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
40	186	----> if [ $staged = 1 ]...
146	146	-----> [ $staged = 1 ]
66	134604	----> if [ "$dirty" = "" ]...
132	132	-----> [ "$dirty" = "" ]
134406	134406	-----> set PROMPT "$branch $dirty"
1207	4108	---> prompt_segment $BG black $PROMPT
161	161	----> set -l bg
129	129	----> set -l fg
57	394	----> if [ -n "$argv[1]" ]...
167	167	-----> [ -n "$argv[1]" ]
170	170	-----> set bg $argv[1]
60	388	----> if [ -n "$argv[2]" ]...
157	157	-----> [ -n "$argv[2]" ]
171	171	-----> set fg $argv[2]
133	1265	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
300	300	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
164	164	-----> set_color -b $bg
164	164	-----> set_color $current_bg
146	146	-----> echo -n "$segment_separator "
198	198	-----> set_color -b $bg
160	160	-----> set_color $fg
172	172	----> set current_bg $argv[1]
60	392	----> if [ -n "$argv[3]" ]...
158	158	-----> [ -n "$argv[3]" ]
174	174	-----> echo -n -s $argv[3] " "
294	58090	-> __exists svn
57796	57796	--> command -v "$name" ^/dev/null >&2
310	218949	-> and prompt_svn
101	101	--> set -l ref
44	218538	--> if command svn ls . >/dev/null 2>&1...
218494	218494	---> command svn ls . >/dev/null 2>&1
267	848	-> prompt_finish
52	435	--> if [ -n $current_bg ]...
105	105	---> [ -n $current_bg ]
97	97	---> set_color -b normal
91	91	---> set_color $current_bg
90	90	---> echo -n "$segment_separator "
68	68	--> set_color normal
78	78	--> set -g current_bg NONE
108	108	> echo $_ " "
160	290663	> __fish_pwd
290503	290503	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
380	1428	> up-or-search
27	77	-> if commandline --search-mode...
50	50	--> commandline --search-mode
23	56	-> if commandline --paging-mode...
33	33	--> commandline --paging-mode
736	828	-> set lineno (commandline -L)
92	92	--> commandline -L
48	87	-> switch $lineno...
39	39	--> commandline -f history-search-backward
373	2714	> down-or-search
47	2341	-> if commandline --search-mode...
2238	2238	--> commandline --search-mode
40	40	--> commandline -f history-search-forward
16	16	--> return
142	224	> __fish_disable_bracketed_paste ''
82	82	-> printf "\e[?2004l"
119	119	> echo $_ " "
156	138475	> __fish_pwd
138319	138319	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
91	188	> __fish_enable_bracketed_paste
97	97	-> printf "\e[?2004h"
361	141111	> fish_mode_prompt
43	140750	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
136651	136651	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
58	4056	--> switch $fish_bind_mode...
626	3998	---> prompt_segment green black "I"
2095	2095	----> set -l bg
83	83	----> set -l fg
34	228	----> if [ -n "$argv[1]" ]...
99	99	-----> [ -n "$argv[1]" ]
95	95	-----> set bg $argv[1]
32	209	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
53	454	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
85	85	-----> set_color $fg
72	72	-----> echo -n " "
98	98	----> set current_bg $argv[1]
33	205	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
400	5244040	> fish_prompt
148	148	-> set -g RETVAL $status
342	405437	-> prompt_status
31	2214	--> if [ $RETVAL -ne 0 ]...
90	90	---> [ $RETVAL -ne 0 ]
601	2093	---> prompt_segment black red "✘"
77	77	----> set -l bg
68	68	----> set -l fg
33	211	----> if [ -n "$argv[1]" ]...
89	89	-----> [ -n "$argv[1]" ]
89	89	-----> set bg $argv[1]
32	203	----> if [ -n "$argv[2]" ]...
83	83	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
71	636	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
145	145	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
92	92	-----> set_color -b $bg
85	85	-----> set_color $current_bg
83	83	-----> echo -n "$segment_separator "
79	79	-----> set_color -b $bg
81	81	-----> set_color $fg
91	91	----> set current_bg $argv[1]
33	206	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
731	125580	--> set -l uid (id -u $USER)
124849	124849	---> id -u $USER
27	129	--> if [ $uid -eq 0 ]...
102	102	---> [ $uid -eq 0 ]
25	277172	--> if [ (jobs -l | wc -l) -gt 0 ]...
802	277147	---> [ (jobs -l | wc -l) -gt 0 ]
276345	276345	----> jobs -l | wc -l
187	137997	-> prompt_virtual_env
37	137810	--> if test "$VIRTUAL_ENV"...
137773	137773	---> test "$VIRTUAL_ENV"
477	1374	-> prompt_user
88	88	--> set -l BG 444444
71	71	--> set -l FG BCBCBC
35	738	--> if [ "$theme_display_user" = "yes" ]...
98	98	---> [ "$theme_display_user" = "yes" ]
227	518	---> get_hostname
86	86	----> set -g HOSTNAME_PROMPT ""
23	205	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
182	182	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
21	87	---> if [ $HOSTNAME_PROMPT ]...
66	66	----> [ $HOSTNAME_PROMPT ]
122	5354	-> prompt_dir
1231	5232	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
539	2468	---> prompt_pwd
116	116	----> set -l options 'h/help'
131	131	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	91	----> if set -q _flag_help...
66	66	-----> set -q _flag_help
65	65	----> set -q fish_prompt_pwd_dir_length
77	77	----> or set -l fish_prompt_pwd_dir_length 1
352	352	----> set realhome ~
654	836	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
182	182	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	261	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
89	89	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
136	136	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
82	82	---> set -l bg
69	69	---> set -l fg
33	214	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
89	89	----> set bg $argv[1]
30	203	---> if [ -n "$argv[2]" ]...
85	85	----> [ -n "$argv[2]" ]
88	88	----> set fg $argv[2]
74	671	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
161	161	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
87	87	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
85	85	----> set_color $fg
92	92	---> set current_bg $argv[1]
31	202	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
88	88	----> echo -n -s $argv[3] " "
198	54263	-> __exists hg
54065	54065	--> command -v "$name" ^/dev/null >&2
743	1712756	-> and prompt_hg
128	128	--> set -l branch
101	101	--> set -l state
59	1711784	--> if command hg id >/dev/null 2>&1...
1711725	1711725	---> command hg id >/dev/null 2>&1
257	55560	-> __exists git
55303	55303	--> command -v "$name" ^/dev/null >&2
1093	2544212	-> and prompt_git
105	105	--> set -l ref
124	2543014	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
307245	307245	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
900	307314	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
306414	306414	----> command git symbolic-ref HEAD 2> /dev/null
27	127	---> if [ $status -gt 0 ]...
100	100	----> [ $status -gt 0 ]
166837	166837	---> set branch_symbol \uE0A0
780	128224	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
127444	127444	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
87	87	---> set -l BG PROMPT
1237	398409	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
397172	397172	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
226	1230311	---> if [ "$dirty" = "" ]...
180	180	----> [ "$dirty" = "" ]
107	107	----> set BG yellow
109	109	----> set dirty ''
100	100	----> set -l empty 0
317815	317815	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
135	135	----> set -l target
113	346368	----> if [ $empty = 1 ]...
132	132	-----> [ $empty = 1 ]
162	162	-----> set target 'HEAD'
111	111	-----> set -l unstaged 0
345360	345360	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
139	139	-----> or set unstaged 1
66	351	-----> if [ $unstaged = 1 ]...
125	125	------> [ $unstaged = 1 ]
160	160	------> set dirty $dirty'●'
103	103	----> set -l staged 0
426072	426072	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
33	155	----> if [ $staged = 1 ]...
122	122	-----> [ $staged = 1 ]
43	138941	----> if [ "$dirty" = "" ]...
104	104	-----> [ "$dirty" = "" ]
138794	138794	-----> set PROMPT "$branch $dirty"
724	4336	---> prompt_segment $BG black $PROMPT
97	97	----> set -l bg
71	71	----> set -l fg
33	237	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
107	107	-----> set bg $argv[1]
32	202	----> if [ -n "$argv[2]" ]...
84	84	-----> [ -n "$argv[2]" ]
86	86	-----> set fg $argv[2]
114	2679	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
171	171	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
91	91	-----> set_color -b $bg
86	86	-----> set_color $current_bg
2012	2012	-----> echo -n "$segment_separator "
119	119	-----> set_color -b $bg
86	86	-----> set_color $fg
103	103	----> set current_bg $argv[1]
36	223	----> if [ -n "$argv[3]" ]...
91	91	-----> [ -n "$argv[3]" ]
96	96	-----> echo -n -s $argv[3] " "
184	53728	-> __exists svn
53544	53544	--> command -v "$name" ^/dev/null >&2
317	271707	-> and prompt_svn
92	92	--> set -l ref
53	271298	--> if command svn ls . >/dev/null 2>&1...
271245	271245	---> command svn ls . >/dev/null 2>&1
376	1104	-> prompt_finish
65	540	--> if [ -n $current_bg ]...
136	136	---> [ -n $current_bg ]
116	116	---> set_color -b normal
113	113	---> set_color $current_bg
110	110	---> echo -n "$segment_separator "
88	88	--> set_color normal
100	100	--> set -g current_bg NONE
126	126	> echo $_ " "
2000	314098	> __fish_pwd
312098	312098	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
126	2295	> __fish_disable_bracketed_paste ''
2169	2169	-> printf "\e[?2004l"
124	124	> echo $_ " "
164	142863	> __fish_pwd
142699	142699	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
97	182	> __fish_enable_bracketed_paste
85	85	-> printf "\e[?2004h"
348	164890	> fish_mode_prompt
53	164542	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
154176	154176	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
77	10313	--> switch $fish_bind_mode...
955	10236	---> prompt_segment green black "I"
127	127	----> set -l bg
105	105	----> set -l fg
96	4291	----> if [ -n "$argv[1]" ]...
3823	3823	-----> [ -n "$argv[1]" ]
372	372	-----> set bg $argv[1]
82	396	----> if [ -n "$argv[2]" ]...
168	168	-----> [ -n "$argv[2]" ]
146	146	-----> set fg $argv[2]
85	3914	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
258	258	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
3329	3329	-----> set_color -b $bg
135	135	-----> set_color $fg
107	107	-----> echo -n " "
142	142	----> set current_bg $argv[1]
51	306	----> if [ -n "$argv[3]" ]...
125	125	-----> [ -n "$argv[3]" ]
130	130	-----> echo -n -s $argv[3] " "
559	5499591	> fish_prompt
156	156	-> set -g RETVAL $status
473	433568	-> prompt_status
44	3587	--> if [ $RETVAL -ne 0 ]...
125	125	---> [ $RETVAL -ne 0 ]
878	3418	---> prompt_segment black red "✘"
108	108	----> set -l bg
90	90	----> set -l fg
55	350	----> if [ -n "$argv[1]" ]...
127	127	-----> [ -n "$argv[1]" ]
168	168	-----> set bg $argv[1]
55	382	----> if [ -n "$argv[2]" ]...
169	169	-----> [ -n "$argv[2]" ]
158	158	-----> set fg $argv[2]
121	1103	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
261	261	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
150	150	-----> set_color -b $bg
153	153	-----> set_color $current_bg
139	139	-----> echo -n "$segment_separator "
140	140	-----> set_color -b $bg
139	139	-----> set_color $fg
152	152	----> set current_bg $argv[1]
51	355	----> if [ -n "$argv[3]" ]...
142	142	-----> [ -n "$argv[3]" ]
162	162	-----> echo -n -s $argv[3] " "
985	121320	--> set -l uid (id -u $USER)
120335	120335	---> id -u $USER
33	153	--> if [ $uid -eq 0 ]...
120	120	---> [ $uid -eq 0 ]
30	308035	--> if [ (jobs -l | wc -l) -gt 0 ]...
1291	308005	---> [ (jobs -l | wc -l) -gt 0 ]
306714	306714	----> jobs -l | wc -l
201	137349	-> prompt_virtual_env
31	137148	--> if test "$VIRTUAL_ENV"...
137117	137117	---> test "$VIRTUAL_ENV"
551	1536	-> prompt_user
96	96	--> set -l BG 444444
107	107	--> set -l FG BCBCBC
40	782	--> if [ "$theme_display_user" = "yes" ]...
115	115	---> [ "$theme_display_user" = "yes" ]
231	536	---> get_hostname
91	91	----> set -g HOSTNAME_PROMPT ""
22	214	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
192	192	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	91	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
116	13840	-> prompt_dir
1285	13724	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2774	10754	---> prompt_pwd
182	182	----> set -l options 'h/help'
3249	3249	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
42	312	----> if set -q _flag_help...
270	270	-----> set -q _flag_help
102	102	----> set -q fish_prompt_pwd_dir_length
162	162	----> or set -l fish_prompt_pwd_dir_length 1
640	640	----> set realhome ~
831	3070	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2239	2239	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	263	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
135	135	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
98	98	---> set -l bg
71	71	---> set -l fg
33	224	---> if [ -n "$argv[1]" ]...
97	97	----> [ -n "$argv[1]" ]
94	94	----> set bg $argv[1]
30	205	---> if [ -n "$argv[2]" ]...
86	86	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
108	748	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
185	185	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
105	105	----> set_color -b $bg
92	92	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
87	87	----> set_color -b $bg
87	87	----> set_color $fg
93	93	---> set current_bg $argv[1]
32	246	---> if [ -n "$argv[3]" ]...
116	116	----> [ -n "$argv[3]" ]
98	98	----> echo -n -s $argv[3] " "
181	56087	-> __exists hg
55906	55906	--> command -v "$name" ^/dev/null >&2
582	1684906	-> and prompt_hg
218	218	--> set -l branch
201	201	--> set -l state
83	1683905	--> if command hg id >/dev/null 2>&1...
1683822	1683822	---> command hg id >/dev/null 2>&1
272	55425	-> __exists git
55153	55153	--> command -v "$name" ^/dev/null >&2
1142	2590124	-> and prompt_git
91	91	--> set -l ref
179	2588891	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
306161	306161	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
969	304739	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
303770	303770	----> command git symbolic-ref HEAD 2> /dev/null
50	308	---> if [ $status -gt 0 ]...
258	258	----> [ $status -gt 0 ]
166183	166183	---> set branch_symbol \uE0A0
1055	136687	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
135632	135632	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
157	157	---> set -l BG PROMPT
1278	406775	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
405497	405497	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
246	1263460	---> if [ "$dirty" = "" ]...
235	235	----> [ "$dirty" = "" ]
137	137	----> set BG yellow
104	104	----> set dirty ''
77	77	----> set -l empty 0
336047	336047	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
157	157	----> set -l target
135	365291	----> if [ $empty = 1 ]...
158	158	-----> [ $empty = 1 ]
148	148	-----> set target 'HEAD'
127	127	-----> set -l unstaged 0
364256	364256	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
147	147	-----> or set unstaged 1
51	320	-----> if [ $unstaged = 1 ]...
136	136	------> [ $unstaged = 1 ]
133	133	------> set dirty $dirty'●'
108	108	----> set -l staged 0
379314	379314	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
30	135	----> if [ $staged = 1 ]...
105	105	-----> [ $staged = 1 ]
53	181609	----> if [ "$dirty" = "" ]...
94	94	-----> [ "$dirty" = "" ]
181462	181462	-----> set PROMPT "$branch $dirty"
1261	4242	---> prompt_segment $BG black $PROMPT
172	172	----> set -l bg
145	145	----> set -l fg
63	397	----> if [ -n "$argv[1]" ]...
151	151	-----> [ -n "$argv[1]" ]
183	183	-----> set bg $argv[1]
76	409	----> if [ -n "$argv[2]" ]...
163	163	-----> [ -n "$argv[2]" ]
170	170	-----> set fg $argv[2]
137	1275	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
309	309	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
172	172	-----> set_color -b $bg
175	175	-----> set_color $current_bg
162	162	-----> echo -n "$segment_separator "
164	164	-----> set_color -b $bg
156	156	-----> set_color $fg
175	175	----> set current_bg $argv[1]
60	408	----> if [ -n "$argv[3]" ]...
160	160	-----> [ -n "$argv[3]" ]
188	188	-----> echo -n -s $argv[3] " "
309	83781	-> __exists svn
83472	83472	--> command -v "$name" ^/dev/null >&2
592	441096	-> and prompt_svn
161	161	--> set -l ref
87	440343	--> if command svn ls . >/dev/null 2>&1...
440256	440256	---> command svn ls . >/dev/null 2>&1
321	1164	-> prompt_finish
87	597	--> if [ -n $current_bg ]...
155	155	---> [ -n $current_bg ]
131	131	---> set_color -b normal
102	102	---> set_color $current_bg
122	122	---> echo -n "$segment_separator "
89	89	--> set_color normal
157	157	--> set -g current_bg NONE
320	320	> echo $_ " "
271	368093	> __fish_pwd
367822	367822	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2519	110487	> __fish_start_bracketed_paste
2169	2169	-> set -g __fish_last_bind_mode $fish_bind_mode
3311	105799	-> __fish_commandline_is_singlequoted
76	76	--> set -l state normal
952	99078	--> for char in (commandline -ct | string split "")...
97946	97946	---> commandline -ct | string split ""
120	180	---> switch $char...
60	60	----> switch $state...
202	3334	--> if contains -- $state single single-escaped...
3090	3090	---> contains -- $state single single-escaped
42	42	---> return 1
4222	4567	> __fish_stop_bracketed_paste
159	159	-> set fish_bind_mode $__fish_last_bind_mode
99	99	-> set -e __fish_paste_quoted
87	87	-> commandline -f force-repaint
350	11590	> fish_mode_prompt
40	11240	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
2261	2261	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
55	8939	--> switch $fish_bind_mode...
670	8884	---> prompt_segment green black "I"
90	90	----> set -l bg
73	73	----> set -l fg
38	2357	----> if [ -n "$argv[1]" ]...
2210	2210	-----> [ -n "$argv[1]" ]
109	109	-----> set bg $argv[1]
34	217	----> if [ -n "$argv[2]" ]...
91	91	-----> [ -n "$argv[2]" ]
92	92	-----> set fg $argv[2]
101	4876	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2088	2088	-----> set_color -b $bg
93	93	-----> set_color $fg
2444	2444	-----> echo -n " "
325	325	----> set current_bg $argv[1]
54	276	----> if [ -n "$argv[3]" ]...
97	97	-----> [ -n "$argv[3]" ]
125	125	-----> echo -n -s $argv[3] " "
586	5108792	> fish_prompt
181	181	-> set -g RETVAL $status
488	381341	-> prompt_status
43	2392	--> if [ $RETVAL -ne 0 ]...
149	149	---> [ $RETVAL -ne 0 ]
692	2200	---> prompt_segment black red "✘"
90	90	----> set -l bg
74	74	----> set -l fg
33	237	----> if [ -n "$argv[1]" ]...
115	115	-----> [ -n "$argv[1]" ]
89	89	-----> set bg $argv[1]
32	199	----> if [ -n "$argv[2]" ]...
82	82	-----> [ -n "$argv[2]" ]
85	85	-----> set fg $argv[2]
69	617	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
144	144	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
90	90	-----> set_color -b $bg
82	82	-----> set_color $current_bg
80	80	-----> echo -n "$segment_separator "
77	77	-----> set_color -b $bg
75	75	-----> set_color $fg
94	94	----> set current_bg $argv[1]
30	197	----> if [ -n "$argv[3]" ]...
80	80	-----> [ -n "$argv[3]" ]
87	87	-----> echo -n -s $argv[3] " "
751	90977	--> set -l uid (id -u $USER)
90226	90226	---> id -u $USER
33	168	--> if [ $uid -eq 0 ]...
135	135	---> [ $uid -eq 0 ]
29	287316	--> if [ (jobs -l | wc -l) -gt 0 ]...
848	287287	---> [ (jobs -l | wc -l) -gt 0 ]
286439	286439	----> jobs -l | wc -l
222	157092	-> prompt_virtual_env
36	156870	--> if test "$VIRTUAL_ENV"...
156834	156834	---> test "$VIRTUAL_ENV"
903	2627	-> prompt_user
166	166	--> set -l BG 444444
146	146	--> set -l FG BCBCBC
60	1412	--> if [ "$theme_display_user" = "yes" ]...
178	178	---> [ "$theme_display_user" = "yes" ]
420	982	---> get_hostname
169	169	----> set -g HOSTNAME_PROMPT ""
36	393	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
357	357	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
55	192	---> if [ $HOSTNAME_PROMPT ]...
137	137	----> [ $HOSTNAME_PROMPT ]
208	17247	-> prompt_dir
1964	17039	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
4535	12272	---> prompt_pwd
210	210	----> set -l options 'h/help'
4882	4882	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
50	176	----> if set -q _flag_help...
126	126	-----> set -q _flag_help
133	133	----> set -q fish_prompt_pwd_dir_length
167	167	----> or set -l fish_prompt_pwd_dir_length 1
542	542	----> set realhome ~
942	1190	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
248	248	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
59	437	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
148	148	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
230	230	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
160	160	---> set -l bg
93	93	---> set -l fg
49	284	---> if [ -n "$argv[1]" ]...
104	104	----> [ -n "$argv[1]" ]
131	131	----> set bg $argv[1]
68	422	---> if [ -n "$argv[2]" ]...
180	180	----> [ -n "$argv[2]" ]
174	174	----> set fg $argv[2]
120	1056	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
204	204	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
109	109	----> set_color -b $bg
118	118	----> set_color $current_bg
158	158	----> echo -n "$segment_separator "
162	162	----> set_color -b $bg
185	185	----> set_color $fg
367	367	---> set current_bg $argv[1]
59	421	---> if [ -n "$argv[3]" ]...
190	190	----> [ -n "$argv[3]" ]
172	172	----> echo -n -s $argv[3] " "
248	46752	-> __exists hg
46504	46504	--> command -v "$name" ^/dev/null >&2
539	1676010	-> and prompt_hg
97	97	--> set -l branch
78	78	--> set -l state
52	1675296	--> if command hg id >/dev/null 2>&1...
1675244	1675244	---> command hg id >/dev/null 2>&1
303	46461	-> __exists git
46158	46158	--> command -v "$name" ^/dev/null >&2
1056	2499463	-> and prompt_git
94	94	--> set -l ref
146	2498313	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
337732	337732	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1227	318716	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
317489	317489	----> command git symbolic-ref HEAD 2> /dev/null
35	139	---> if [ $status -gt 0 ]...
104	104	----> [ $status -gt 0 ]
132947	132947	---> set branch_symbol \uE0A0
841	141228	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
140387	140387	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
125	125	---> set -l BG PROMPT
1425	425959	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
424534	424534	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
298	1139096	---> if [ "$dirty" = "" ]...
180	180	----> [ "$dirty" = "" ]
108	108	----> set BG yellow
108	108	----> set dirty ''
100	100	----> set -l empty 0
314462	314462	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
241	241	----> set -l target
94	324701	----> if [ $empty = 1 ]...
191	191	-----> [ $empty = 1 ]
90	90	-----> set target 'HEAD'
76	76	-----> set -l unstaged 0
323895	323895	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
119	119	-----> or set unstaged 1
38	236	-----> if [ $unstaged = 1 ]...
94	94	------> [ $unstaged = 1 ]
104	104	------> set dirty $dirty'●'
84	84	----> set -l staged 0
365552	365552	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
39	186	----> if [ $staged = 1 ]...
147	147	-----> [ $staged = 1 ]
48	133076	----> if [ "$dirty" = "" ]...
178	178	-----> [ "$dirty" = "" ]
132850	132850	-----> set PROMPT "$branch $dirty"
667	2225	---> prompt_segment $BG black $PROMPT
97	97	----> set -l bg
73	73	----> set -l fg
34	225	----> if [ -n "$argv[1]" ]...
98	98	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
32	206	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
70	656	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
89	89	-----> set_color $current_bg
89	89	-----> echo -n "$segment_separator "
84	84	-----> set_color -b $bg
80	80	-----> set_color $fg
92	92	----> set current_bg $argv[1]
33	209	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
92	92	-----> echo -n -s $argv[3] " "
179	53505	-> __exists svn
53326	53326	--> command -v "$name" ^/dev/null >&2
313	226652	-> and prompt_svn
92	92	--> set -l ref
40	226247	--> if command svn ls . >/dev/null 2>&1...
226207	226207	---> command svn ls . >/dev/null 2>&1
279	875	-> prompt_finish
53	418	--> if [ -n $current_bg ]...
96	96	---> [ -n $current_bg ]
87	87	---> set_color -b normal
92	92	---> set_color $current_bg
90	90	---> echo -n "$segment_separator "
66	66	--> set_color normal
112	112	--> set -g current_bg NONE
172	172	> echo $_ " "
2907	281319	> __fish_pwd
278412	278412	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
216	3962	> __fish_disable_bracketed_paste 'git clone git://git.kernel.org/pub/scm/git/git.git'
3746	3746	-> printf "\e[?2004l"
125	125	> echo $_ " "
187	137841	> __fish_pwd
137654	137654	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
237723560	237723560	> git clone git://git.kernel.org/pub/scm/git/git.git
103	2314	> __fish_enable_bracketed_paste
2211	2211	-> printf "\e[?2004h"
339	201678	> fish_mode_prompt
45	201339	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
190932	190932	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	10362	--> switch $fish_bind_mode...
637	10305	---> prompt_segment green black "I"
2159	2159	----> set -l bg
79	79	----> set -l fg
38	2284	----> if [ -n "$argv[1]" ]...
2139	2139	-----> [ -n "$argv[1]" ]
107	107	-----> set bg $argv[1]
35	216	----> if [ -n "$argv[2]" ]...
89	89	-----> [ -n "$argv[2]" ]
92	92	-----> set fg $argv[2]
62	4588	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
152	152	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2103	2103	-----> set_color -b $bg
100	100	-----> set_color $fg
2171	2171	-----> echo -n " "
119	119	----> set current_bg $argv[1]
36	223	----> if [ -n "$argv[3]" ]...
94	94	-----> [ -n "$argv[3]" ]
93	93	-----> echo -n -s $argv[3] " "
529	5232540	> fish_prompt
191	191	-> set -g RETVAL $status
447	395711	-> prompt_status
25	146	--> if [ $RETVAL -ne 0 ]...
121	121	---> [ $RETVAL -ne 0 ]
885	98628	--> set -l uid (id -u $USER)
97743	97743	---> id -u $USER
26	129	--> if [ $uid -eq 0 ]...
103	103	---> [ $uid -eq 0 ]
25	296361	--> if [ (jobs -l | wc -l) -gt 0 ]...
773	296336	---> [ (jobs -l | wc -l) -gt 0 ]
295563	295563	----> jobs -l | wc -l
202	138508	-> prompt_virtual_env
29	138306	--> if test "$VIRTUAL_ENV"...
138277	138277	---> test "$VIRTUAL_ENV"
498	1443	-> prompt_user
100	100	--> set -l BG 444444
77	77	--> set -l FG BCBCBC
38	768	--> if [ "$theme_display_user" = "yes" ]...
101	101	---> [ "$theme_display_user" = "yes" ]
226	537	---> get_hostname
91	91	----> set -g HOSTNAME_PROMPT ""
24	220	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
196	196	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
23	92	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
114	12251	-> prompt_dir
1216	12137	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
3784	9391	---> prompt_pwd
131	131	----> set -l options 'h/help'
1930	1930	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	92	----> if set -q _flag_help...
67	67	-----> set -q _flag_help
60	60	----> set -q fish_prompt_pwd_dir_length
75	75	----> or set -l fish_prompt_pwd_dir_length 1
325	325	----> set realhome ~
695	2717	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2022	2022	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	277	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
98	98	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
142	142	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
72	72	---> set -l fg
33	217	---> if [ -n "$argv[1]" ]...
93	93	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
32	204	---> if [ -n "$argv[2]" ]...
85	85	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
73	661	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
89	89	----> set_color $current_bg
82	82	----> echo -n "$segment_separator "
88	88	----> set_color -b $bg
86	86	----> set_color $fg
91	91	---> set current_bg $argv[1]
31	201	---> if [ -n "$argv[3]" ]...
82	82	----> [ -n "$argv[3]" ]
88	88	----> echo -n -s $argv[3] " "
170	59635	-> __exists hg
59465	59465	--> command -v "$name" ^/dev/null >&2
495	1724666	-> and prompt_hg
85	85	--> set -l branch
67	67	--> set -l state
43	1724019	--> if command hg id >/dev/null 2>&1...
1723976	1723976	---> command hg id >/dev/null 2>&1
220	57117	-> __exists git
56897	56897	--> command -v "$name" ^/dev/null >&2
1253	2563392	-> and prompt_git
122	122	--> set -l ref
142	2562017	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
320678	320678	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1109	352549	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
351440	351440	----> command git symbolic-ref HEAD 2> /dev/null
44	213	---> if [ $status -gt 0 ]...
169	169	----> [ $status -gt 0 ]
136245	136245	---> set branch_symbol \uE0A0
762	143111	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
142349	142349	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
90	90	---> set -l BG PROMPT
1094	418382	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
417288	417288	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
232	1188371	---> if [ "$dirty" = "" ]...
182	182	----> [ "$dirty" = "" ]
105	105	----> set BG yellow
112	112	----> set dirty ''
77	77	----> set -l empty 0
355958	355958	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
131	131	----> set -l target
116	317351	----> if [ $empty = 1 ]...
128	128	-----> [ $empty = 1 ]
201	201	-----> set target 'HEAD'
103	103	-----> set -l unstaged 0
316458	316458	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
115	115	-----> or set unstaged 1
42	230	-----> if [ $unstaged = 1 ]...
95	95	------> [ $unstaged = 1 ]
93	93	------> set dirty $dirty'●'
83	83	----> set -l staged 0
348608	348608	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
38	186	----> if [ $staged = 1 ]...
148	148	-----> [ $staged = 1 ]
52	165346	----> if [ "$dirty" = "" ]...
171	171	-----> [ "$dirty" = "" ]
165123	165123	-----> set PROMPT "$branch $dirty"
669	2236	---> prompt_segment $BG black $PROMPT
95	95	----> set -l bg
72	72	----> set -l fg
35	228	----> if [ -n "$argv[1]" ]...
100	100	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
32	207	----> if [ -n "$argv[2]" ]...
87	87	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
71	662	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
156	156	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
91	91	-----> set_color $current_bg
87	87	-----> echo -n "$segment_separator "
80	80	-----> set_color -b $bg
82	82	-----> set_color $fg
92	92	----> set current_bg $argv[1]
32	211	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
206	55640	-> __exists svn
55434	55434	--> command -v "$name" ^/dev/null >&2
412	222292	-> and prompt_svn
130	130	--> set -l ref
54	221750	--> if command svn ls . >/dev/null 2>&1...
221696	221696	---> command svn ls . >/dev/null 2>&1
372	1165	-> prompt_finish
72	583	--> if [ -n $current_bg ]...
140	140	---> [ -n $current_bg ]
132	132	---> set_color -b normal
122	122	---> set_color $current_bg
117	117	---> echo -n "$segment_separator "
97	97	--> set_color normal
113	113	--> set -g current_bg NONE
153	153	> echo $_ " "
2525	278935	> __fish_pwd
276410	276410	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
872	12141	> __fish_git_needs_command
4746	6634	-> set cmd (commandline -opc)
1888	1888	--> commandline -opc
39	4635	-> if [ (count $cmd) -eq 1 ]...
2528	4544	--> [ (count $cmd) -eq 1 ]
2016	2016	---> count $cmd
52	52	--> return 0
216	108589	> __fish_git_custom_commands
774	108373	-> for name in (string replace -r "^.*/git-([^/]*)" '$1' $PATH/git-*)...
103479	103479	--> string replace -r "^.*/git-([^/]*)" '$1' $PATH/git-*
83	3195	--> switch $name...
3112	3112	---> echo $name
70	151	--> switch $name...
81	81	---> echo $name
62	136	--> switch $name...
74	74	---> echo $name
60	130	--> switch $name...
70	70	---> echo $name
57	125	--> switch $name...
68	68	---> echo $name
60	134	--> switch $name...
74	74	---> echo $name
59	126	--> switch $name...
67	67	---> echo $name
57	123	--> switch $name...
66	66	---> echo $name
342	5070	> __fish_git_using_command blame
576	2572	-> set -l cmd (__fish_git_needs_command)
517	1996	--> __fish_git_needs_command
613	712	---> set cmd (commandline -opc)
99	99	----> commandline -opc
37	767	---> if [ (count $cmd) -eq 1 ]...
583	679	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
51	51	----> return 0
2102	2102	-> test -z "$cmd"
54	54	-> and return 1
336	3076	> __fish_git_using_command clean
595	2608	-> set -l cmd (__fish_git_needs_command)
561	2013	--> __fish_git_needs_command
595	690	---> set cmd (commandline -opc)
95	95	----> commandline -opc
36	762	---> if [ (count $cmd) -eq 1 ]...
579	676	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
50	50	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
294	185554	> __fish_git_aliases
56046	185260	-> command git config -z --get-regexp '^alias\.' ^/dev/null | while read -lz key value
        begin
            set -l name (string replace -r '^.*\.' '' -- $key)
            printf "%s\t%s\n" $name "Alias for $value"
        end
    end
129214	129214	--> read -lz key value
517	140825	> __fish_git_using_command submodule
751	140169	-> set -l cmd (__fish_git_needs_command)
518	139418	--> __fish_git_needs_command
137874	138000	---> set cmd (commandline -opc)
126	126	----> commandline -opc
42	900	---> if [ (count $cmd) -eq 1 ]...
692	806	----> [ (count $cmd) -eq 1 ]
114	114	-----> count $cmd
52	52	----> return 0
91	91	-> test -z "$cmd"
48	48	-> and return 1
341	2995	> __fish_git_using_command submodule
560	2524	-> set -l cmd (__fish_git_needs_command)
504	1964	--> __fish_git_needs_command
604	700	---> set cmd (commandline -opc)
96	96	----> commandline -opc
34	760	---> if [ (count $cmd) -eq 1 ]...
581	677	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
49	49	----> return 0
84	84	-> test -z "$cmd"
46	46	-> and return 1
327	2952	> __fish_git_using_command submodule
551	2492	-> set -l cmd (__fish_git_needs_command)
500	1941	--> __fish_git_needs_command
595	688	---> set cmd (commandline -opc)
93	93	----> commandline -opc
35	753	---> if [ (count $cmd) -eq 1 ]...
573	669	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
49	49	----> return 0
86	86	-> test -z "$cmd"
47	47	-> and return 1
418	4405	> __fish_git_using_command submodule
639	3860	-> set -l cmd (__fish_git_needs_command)
535	3221	--> __fish_git_needs_command
1613	1745	---> set cmd (commandline -opc)
132	132	----> commandline -opc
37	941	---> if [ (count $cmd) -eq 1 ]...
740	856	----> [ (count $cmd) -eq 1 ]
116	116	-----> count $cmd
48	48	----> return 0
83	83	-> test -z "$cmd"
44	44	-> and return 1
344	2830	> __fish_git_using_command submodule
514	2354	-> set -l cmd (__fish_git_needs_command)
499	1840	--> __fish_git_needs_command
535	623	---> set cmd (commandline -opc)
88	88	----> commandline -opc
36	718	---> if [ (count $cmd) -eq 1 ]...
523	611	----> [ (count $cmd) -eq 1 ]
88	88	-----> count $cmd
71	71	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
326	3021	> __fish_git_using_command submodule
542	2558	-> set -l cmd (__fish_git_needs_command)
566	2016	--> __fish_git_needs_command
602	696	---> set cmd (commandline -opc)
94	94	----> commandline -opc
36	754	---> if [ (count $cmd) -eq 1 ]...
571	668	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
50	50	----> return 0
85	85	-> test -z "$cmd"
52	52	-> and return 1
325	2935	> __fish_git_using_command submodule
545	2479	-> set -l cmd (__fish_git_needs_command)
499	1934	--> __fish_git_needs_command
587	682	---> set cmd (commandline -opc)
95	95	----> commandline -opc
37	753	---> if [ (count $cmd) -eq 1 ]...
571	667	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
49	49	----> return 0
85	85	-> test -z "$cmd"
46	46	-> and return 1
429	3377	> __fish_git_using_command submodule
600	2649	-> set -l cmd (__fish_git_needs_command)
508	2049	--> __fish_git_needs_command
626	721	---> set cmd (commandline -opc)
95	95	----> commandline -opc
36	820	---> if [ (count $cmd) -eq 1 ]...
637	736	----> [ (count $cmd) -eq 1 ]
99	99	-----> count $cmd
48	48	----> return 0
161	161	-> test -z "$cmd"
138	138	-> and return 1
344	3169	> __fish_git_using_command format-patch
712	2694	-> set -l cmd (__fish_git_needs_command)
509	1982	--> __fish_git_needs_command
604	707	---> set cmd (commandline -opc)
103	103	----> commandline -opc
35	766	---> if [ (count $cmd) -eq 1 ]...
586	681	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
50	50	----> return 0
85	85	-> test -z "$cmd"
46	46	-> and return 1
336	5114	> __fish_git_stash_using_command show
589	681	-> set cmd (commandline -opc)
92	92	--> commandline -opc
357	4031	-> __fish_git_using_command stash
645	3464	--> set -l cmd (__fish_git_needs_command)
648	2819	---> __fish_git_needs_command
886	1022	----> set cmd (commandline -opc)
136	136	-----> commandline -opc
55	1149	----> if [ (count $cmd) -eq 1 ]...
877	1017	-----> [ (count $cmd) -eq 1 ]
140	140	------> count $cmd
77	77	-----> return 0
137	137	--> test -z "$cmd"
73	73	--> and return 1
66	66	-> or return 2
573	6960	> __fish_git_stash_using_command pop
1036	1187	-> set cmd (commandline -opc)
151	151	--> commandline -opc
666	5022	-> __fish_git_using_command stash
952	3938	--> set -l cmd (__fish_git_needs_command)
758	2986	---> __fish_git_needs_command
896	1042	----> set cmd (commandline -opc)
146	146	-----> commandline -opc
54	1186	----> if [ (count $cmd) -eq 1 ]...
901	1050	-----> [ (count $cmd) -eq 1 ]
149	149	------> count $cmd
82	82	-----> return 0
267	267	--> test -z "$cmd"
151	151	--> and return 1
178	178	-> or return 2
1198	7388	> __fish_git_stash_using_command drop
1113	1293	-> set cmd (commandline -opc)
180	180	--> commandline -opc
545	4824	-> __fish_git_using_command stash
905	4060	--> set -l cmd (__fish_git_needs_command)
825	3155	---> __fish_git_needs_command
952	1096	----> set cmd (commandline -opc)
144	144	-----> commandline -opc
59	1234	----> if [ (count $cmd) -eq 1 ]...
933	1076	-----> [ (count $cmd) -eq 1 ]
143	143	------> count $cmd
99	99	-----> return 0
133	133	--> test -z "$cmd"
86	86	--> and return 1
73	73	-> or return 2
542	7630	> __fish_git_stash_using_command branch
957	1106	-> set cmd (commandline -opc)
149	149	--> commandline -opc
547	5902	-> __fish_git_using_command stash
956	5121	--> set -l cmd (__fish_git_needs_command)
826	4165	---> __fish_git_needs_command
932	1084	----> set cmd (commandline -opc)
152	152	-----> commandline -opc
64	2255	----> if [ (count $cmd) -eq 1 ]...
1422	2094	-----> [ (count $cmd) -eq 1 ]
672	672	------> count $cmd
97	97	-----> return 0
156	156	--> test -z "$cmd"
78	78	--> and return 1
80	80	-> or return 2
550	6632	> __fish_git_stash_using_command apply
970	1118	-> set cmd (commandline -opc)
148	148	--> commandline -opc
505	4876	-> __fish_git_using_command stash
1008	4188	--> set -l cmd (__fish_git_needs_command)
806	3180	---> __fish_git_needs_command
967	1119	----> set cmd (commandline -opc)
152	152	-----> commandline -opc
65	1255	----> if [ (count $cmd) -eq 1 ]...
961	1114	-----> [ (count $cmd) -eq 1 ]
153	153	------> count $cmd
76	76	-----> return 0
130	130	--> test -z "$cmd"
53	53	--> and return 1
88	88	-> or return 2
553	4537	> __fish_git_using_command stash
913	3829	-> set -l cmd (__fish_git_needs_command)
698	2916	--> __fish_git_needs_command
944	1089	---> set cmd (commandline -opc)
145	145	----> commandline -opc
49	1129	---> if [ (count $cmd) -eq 1 ]...
860	1014	----> [ (count $cmd) -eq 1 ]
154	154	-----> count $cmd
66	66	----> return 0
91	91	-> test -z "$cmd"
64	64	-> and return 1
529	6006	> __fish_git_using_command tag
1073	5225	-> set -l cmd (__fish_git_needs_command)
1166	4152	--> __fish_git_needs_command
1559	1750	---> set cmd (commandline -opc)
191	191	----> commandline -opc
68	1236	---> if [ (count $cmd) -eq 1 ]...
943	1086	----> [ (count $cmd) -eq 1 ]
143	143	-----> count $cmd
82	82	----> return 0
164	164	-> test -z "$cmd"
88	88	-> and return 1
509	5033	> __fish_git_using_command tag
952	4277	-> set -l cmd (__fish_git_needs_command)
924	3325	--> __fish_git_needs_command
994	1144	---> set cmd (commandline -opc)
150	150	----> commandline -opc
59	1257	---> if [ (count $cmd) -eq 1 ]...
918	1095	----> [ (count $cmd) -eq 1 ]
177	177	-----> count $cmd
103	103	----> return 0
159	159	-> test -z "$cmd"
88	88	-> and return 1
526	4945	> __fish_git_using_command tag
987	4191	-> set -l cmd (__fish_git_needs_command)
848	3204	--> __fish_git_needs_command
974	1123	---> set cmd (commandline -opc)
149	149	----> commandline -opc
57	1233	---> if [ (count $cmd) -eq 1 ]...
924	1094	----> [ (count $cmd) -eq 1 ]
170	170	-----> count $cmd
82	82	----> return 0
134	134	-> test -z "$cmd"
94	94	-> and return 1
744	5517	> __fish_git_using_command tag
1135	4530	-> set -l cmd (__fish_git_needs_command)
837	3395	--> __fish_git_needs_command
1020	1193	---> set cmd (commandline -opc)
173	173	----> commandline -opc
62	1365	---> if [ (count $cmd) -eq 1 ]...
1046	1201	----> [ (count $cmd) -eq 1 ]
155	155	-----> count $cmd
102	102	----> return 0
148	148	-> test -z "$cmd"
95	95	-> and return 1
569	4436	> __fish_git_using_command status
882	3652	-> set -l cmd (__fish_git_needs_command)
618	2770	--> __fish_git_needs_command
881	1035	---> set cmd (commandline -opc)
154	154	----> commandline -opc
45	1117	---> if [ (count $cmd) -eq 1 ]...
848	1016	----> [ (count $cmd) -eq 1 ]
168	168	-----> count $cmd
56	56	----> return 0
143	143	-> test -z "$cmd"
72	72	-> and return 1
596	6825	> __fish_git_using_command rm
965	6032	-> set -l cmd (__fish_git_needs_command)
840	5067	--> __fish_git_needs_command
1051	1213	---> set cmd (commandline -opc)
162	162	----> commandline -opc
59	3014	---> if [ (count $cmd) -eq 1 ]...
2647	2835	----> [ (count $cmd) -eq 1 ]
188	188	-----> count $cmd
120	120	----> return 0
125	125	-> test -z "$cmd"
72	72	-> and return 1
502	4260	> __fish_git_using_command revert
730	3626	-> set -l cmd (__fish_git_needs_command)
771	2896	--> __fish_git_needs_command
918	1088	---> set cmd (commandline -opc)
170	170	----> commandline -opc
44	1037	---> if [ (count $cmd) -eq 1 ]...
803	940	----> [ (count $cmd) -eq 1 ]
137	137	-----> count $cmd
53	53	----> return 0
86	86	-> test -z "$cmd"
46	46	-> and return 1
336	3049	> __fish_git_using_command reset
590	2581	-> set -l cmd (__fish_git_needs_command)
506	1991	--> __fish_git_needs_command
608	707	---> set cmd (commandline -opc)
99	99	----> commandline -opc
37	778	---> if [ (count $cmd) -eq 1 ]...
592	691	----> [ (count $cmd) -eq 1 ]
99	99	-----> count $cmd
50	50	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
342	3055	> __fish_git_using_command rebase
574	2538	-> set -l cmd (__fish_git_needs_command)
513	1964	--> __fish_git_needs_command
590	684	---> set cmd (commandline -opc)
94	94	----> commandline -opc
38	767	---> if [ (count $cmd) -eq 1 ]...
582	680	----> [ (count $cmd) -eq 1 ]
98	98	-----> count $cmd
49	49	----> return 0
124	124	-> test -z "$cmd"
51	51	-> and return 1
504	3811	> __fish_git_using_command push
1038	3174	-> set -l cmd (__fish_git_needs_command)
553	2136	--> __fish_git_needs_command
688	805	---> set cmd (commandline -opc)
117	117	----> commandline -opc
37	778	---> if [ (count $cmd) -eq 1 ]...
591	691	----> [ (count $cmd) -eq 1 ]
100	100	-----> count $cmd
50	50	----> return 0
86	86	-> test -z "$cmd"
47	47	-> and return 1
326	3029	> __fish_git_using_command push
556	2571	-> set -l cmd (__fish_git_needs_command)
511	2015	--> __fish_git_needs_command
648	744	---> set cmd (commandline -opc)
96	96	----> commandline -opc
36	760	---> if [ (count $cmd) -eq 1 ]...
577	674	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
50	50	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
332	2964	> __fish_git_using_command push
550	2503	-> set -l cmd (__fish_git_needs_command)
501	1953	--> __fish_git_needs_command
590	684	---> set cmd (commandline -opc)
94	94	----> commandline -opc
37	768	---> if [ (count $cmd) -eq 1 ]...
578	681	----> [ (count $cmd) -eq 1 ]
103	103	-----> count $cmd
50	50	----> return 0
83	83	-> test -z "$cmd"
46	46	-> and return 1
325	2998	> __fish_git_using_command push
549	2542	-> set -l cmd (__fish_git_needs_command)
552	1993	--> __fish_git_needs_command
593	687	---> set cmd (commandline -opc)
94	94	----> commandline -opc
37	754	---> if [ (count $cmd) -eq 1 ]...
569	666	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
51	51	----> return 0
85	85	-> test -z "$cmd"
46	46	-> and return 1
347	5163	> __fish_git_using_command push
554	4676	-> set -l cmd (__fish_git_needs_command)
772	4122	--> __fish_git_needs_command
1193	1359	---> set cmd (commandline -opc)
166	166	----> commandline -opc
104	1991	---> if [ (count $cmd) -eq 1 ]...
1612	1802	----> [ (count $cmd) -eq 1 ]
190	190	-----> count $cmd
85	85	----> return 0
86	86	-> test -z "$cmd"
54	54	-> and return 1
350	2997	> __fish_git_using_command push
611	2513	-> set -l cmd (__fish_git_needs_command)
506	1902	--> __fish_git_needs_command
550	642	---> set cmd (commandline -opc)
92	92	----> commandline -opc
56	754	---> if [ (count $cmd) -eq 1 ]...
542	632	----> [ (count $cmd) -eq 1 ]
90	90	-----> count $cmd
66	66	----> return 0
87	87	-> test -z "$cmd"
47	47	-> and return 1
327	2990	> __fish_git_using_command pull
536	2511	-> set -l cmd (__fish_git_needs_command)
539	1975	--> __fish_git_needs_command
582	677	---> set cmd (commandline -opc)
95	95	----> commandline -opc
47	759	---> if [ (count $cmd) -eq 1 ]...
567	663	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
49	49	----> return 0
103	103	-> test -z "$cmd"
49	49	-> and return 1
325	2942	> __fish_git_using_command pull
548	2487	-> set -l cmd (__fish_git_needs_command)
503	1939	--> __fish_git_needs_command
586	680	---> set cmd (commandline -opc)
94	94	----> commandline -opc
36	756	---> if [ (count $cmd) -eq 1 ]...
576	671	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
49	49	----> return 0
84	84	-> test -z "$cmd"
46	46	-> and return 1
336	3408	> __fish_git_using_command pull
691	2932	-> set -l cmd (__fish_git_needs_command)
604	2241	--> __fish_git_needs_command
629	726	---> set cmd (commandline -opc)
97	97	----> commandline -opc
61	911	---> if [ (count $cmd) -eq 1 ]...
662	756	----> [ (count $cmd) -eq 1 ]
94	94	-----> count $cmd
94	94	----> return 0
92	92	-> test -z "$cmd"
48	48	-> and return 1
338	3041	> __fish_git_using_command mergetool
567	2571	-> set -l cmd (__fish_git_needs_command)
552	2004	--> __fish_git_needs_command
592	703	---> set cmd (commandline -opc)
111	111	----> commandline -opc
37	749	---> if [ (count $cmd) -eq 1 ]...
567	663	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
49	49	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
356	2979	> __fish_git_using_command merge
540	2493	-> set -l cmd (__fish_git_needs_command)
521	1953	--> __fish_git_needs_command
585	679	---> set cmd (commandline -opc)
94	94	----> commandline -opc
36	753	---> if [ (count $cmd) -eq 1 ]...
570	667	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
50	50	----> return 0
84	84	-> test -z "$cmd"
46	46	-> and return 1
329	3045	> __fish_git_using_command log
552	2551	-> set -l cmd (__fish_git_needs_command)
505	1999	--> __fish_git_needs_command
612	725	---> set cmd (commandline -opc)
113	113	----> commandline -opc
48	769	---> if [ (count $cmd) -eq 1 ]...
570	664	----> [ (count $cmd) -eq 1 ]
94	94	-----> count $cmd
57	57	----> return 0
83	83	-> test -z "$cmd"
82	82	-> and return 1
370	3034	> __fish_git_using_command difftool
552	2530	-> set -l cmd (__fish_git_needs_command)
547	1978	--> __fish_git_needs_command
596	689	---> set cmd (commandline -opc)
93	93	----> commandline -opc
38	742	---> if [ (count $cmd) -eq 1 ]...
561	656	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
48	48	----> return 0
86	86	-> test -z "$cmd"
48	48	-> and return 1
381	4615	> __fish_git_using_command diff
1129	4108	-> set -l cmd (__fish_git_needs_command)
843	2979	--> __fish_git_needs_command
1053	1212	---> set cmd (commandline -opc)
159	159	----> commandline -opc
52	924	---> if [ (count $cmd) -eq 1 ]...
722	820	----> [ (count $cmd) -eq 1 ]
98	98	-----> count $cmd
52	52	----> return 0
81	81	-> test -z "$cmd"
45	45	-> and return 1
341	2923	> __fish_git_using_command commit
508	2452	-> set -l cmd (__fish_git_needs_command)
521	1944	--> __fish_git_needs_command
549	662	---> set cmd (commandline -opc)
113	113	----> commandline -opc
37	761	---> if [ (count $cmd) -eq 1 ]...
577	674	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
50	50	----> return 0
85	85	-> test -z "$cmd"
45	45	-> and return 1
330	2959	> __fish_git_using_command commit
550	2497	-> set -l cmd (__fish_git_needs_command)
506	1947	--> __fish_git_needs_command
580	687	---> set cmd (commandline -opc)
107	107	----> commandline -opc
38	754	---> if [ (count $cmd) -eq 1 ]...
561	656	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
60	60	----> return 0
86	86	-> test -z "$cmd"
46	46	-> and return 1
363	3009	> __fish_git_using_command clone
543	2516	-> set -l cmd (__fish_git_needs_command)
523	1973	--> __fish_git_needs_command
592	685	---> set cmd (commandline -opc)
93	93	----> commandline -opc
36	765	---> if [ (count $cmd) -eq 1 ]...
583	680	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
49	49	----> return 0
83	83	-> test -z "$cmd"
47	47	-> and return 1
334	4104	> __fish_git_using_command cherry-pick
620	3635	-> set -l cmd (__fish_git_needs_command)
553	3015	--> __fish_git_needs_command
1083	1438	---> set cmd (commandline -opc)
355	355	----> commandline -opc
72	1024	---> if [ (count $cmd) -eq 1 ]...
759	861	----> [ (count $cmd) -eq 1 ]
102	102	-----> count $cmd
91	91	----> return 0
88	88	-> test -z "$cmd"
47	47	-> and return 1
329	2989	> __fish_git_using_command cherry-pick
552	2528	-> set -l cmd (__fish_git_needs_command)
542	1976	--> __fish_git_needs_command
595	690	---> set cmd (commandline -opc)
95	95	----> commandline -opc
36	744	---> if [ (count $cmd) -eq 1 ]...
564	660	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
48	48	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
358	2986	> __fish_git_using_command branch
550	2497	-> set -l cmd (__fish_git_needs_command)
501	1947	--> __fish_git_needs_command
592	687	---> set cmd (commandline -opc)
95	95	----> commandline -opc
35	759	---> if [ (count $cmd) -eq 1 ]...
564	674	----> [ (count $cmd) -eq 1 ]
110	110	-----> count $cmd
50	50	----> return 0
84	84	-> test -z "$cmd"
47	47	-> and return 1
329	3022	> __fish_git_using_command checkout
550	2562	-> set -l cmd (__fish_git_needs_command)
500	2012	--> __fish_git_needs_command
634	746	---> set cmd (commandline -opc)
112	112	----> commandline -opc
41	766	---> if [ (count $cmd) -eq 1 ]...
569	664	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
61	61	----> return 0
85	85	-> test -z "$cmd"
46	46	-> and return 1
435	3356	> __fish_git_using_command add
585	2632	-> set -l cmd (__fish_git_needs_command)
525	2047	--> __fish_git_needs_command
629	722	---> set cmd (commandline -opc)
93	93	----> commandline -opc
37	800	---> if [ (count $cmd) -eq 1 ]...
615	716	----> [ (count $cmd) -eq 1 ]
101	101	-----> count $cmd
47	47	----> return 0
170	170	-> test -z "$cmd"
119	119	-> and return 1
492	3494	> __fish_git_using_command add
733	2864	-> set -l cmd (__fish_git_needs_command)
585	2131	--> __fish_git_needs_command
646	746	---> set cmd (commandline -opc)
100	100	----> commandline -opc
37	800	---> if [ (count $cmd) -eq 1 ]...
619	711	----> [ (count $cmd) -eq 1 ]
92	92	-----> count $cmd
52	52	----> return 0
82	82	-> test -z "$cmd"
56	56	-> and return 1
345	3387	> __fish_git_using_command show-branch
637	2908	-> set -l cmd (__fish_git_needs_command)
509	2271	--> __fish_git_needs_command
628	758	---> set cmd (commandline -opc)
130	130	----> commandline -opc
37	1004	---> if [ (count $cmd) -eq 1 ]...
594	915	----> [ (count $cmd) -eq 1 ]
321	321	-----> count $cmd
52	52	----> return 0
86	86	-> test -z "$cmd"
48	48	-> and return 1
332	3068	> __fish_git_using_command show
565	2604	-> set -l cmd (__fish_git_needs_command)
504	2039	--> __fish_git_needs_command
652	756	---> set cmd (commandline -opc)
104	104	----> commandline -opc
38	779	---> if [ (count $cmd) -eq 1 ]...
594	691	----> [ (count $cmd) -eq 1 ]
97	97	-----> count $cmd
50	50	----> return 0
86	86	-> test -z "$cmd"
46	46	-> and return 1
329	3105	> __fish_git_using_command remote
566	2640	-> set -l cmd (__fish_git_needs_command)
545	2074	--> __fish_git_needs_command
600	694	---> set cmd (commandline -opc)
94	94	----> commandline -opc
37	835	---> if [ (count $cmd) -eq 1 ]...
624	747	----> [ (count $cmd) -eq 1 ]
123	123	-----> count $cmd
51	51	----> return 0
88	88	-> test -z "$cmd"
48	48	-> and return 1
459	3347	> __fish_git_using_command remote
711	2755	-> set -l cmd (__fish_git_needs_command)
511	2044	--> __fish_git_needs_command
661	766	---> set cmd (commandline -opc)
105	105	----> commandline -opc
38	767	---> if [ (count $cmd) -eq 1 ]...
567	680	----> [ (count $cmd) -eq 1 ]
113	113	-----> count $cmd
49	49	----> return 0
87	87	-> test -z "$cmd"
46	46	-> and return 1
328	3047	> __fish_git_using_command remote
555	2589	-> set -l cmd (__fish_git_needs_command)
576	2034	--> __fish_git_needs_command
610	711	---> set cmd (commandline -opc)
101	101	----> commandline -opc
35	747	---> if [ (count $cmd) -eq 1 ]...
566	662	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
50	50	----> return 0
84	84	-> test -z "$cmd"
46	46	-> and return 1
344	2963	> __fish_git_using_command remote
540	2487	-> set -l cmd (__fish_git_needs_command)
500	1947	--> __fish_git_needs_command
588	681	---> set cmd (commandline -opc)
93	93	----> commandline -opc
39	766	---> if [ (count $cmd) -eq 1 ]...
574	678	----> [ (count $cmd) -eq 1 ]
104	104	-----> count $cmd
49	49	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
326	3008	> __fish_git_using_command remote
586	2549	-> set -l cmd (__fish_git_needs_command)
543	1963	--> __fish_git_needs_command
588	680	---> set cmd (commandline -opc)
92	92	----> commandline -opc
38	740	---> if [ (count $cmd) -eq 1 ]...
559	654	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
48	48	----> return 0
86	86	-> test -z "$cmd"
47	47	-> and return 1
385	4716	> __fish_git_using_command remote
665	4139	-> set -l cmd (__fish_git_needs_command)
536	3474	--> __fish_git_needs_command
1314	1623	---> set cmd (commandline -opc)
309	309	----> commandline -opc
51	1315	---> if [ (count $cmd) -eq 1 ]...
1018	1168	----> [ (count $cmd) -eq 1 ]
150	150	-----> count $cmd
96	96	----> return 0
127	127	-> test -z "$cmd"
65	65	-> and return 1
371	3552	> __fish_git_using_command remote
672	2966	-> set -l cmd (__fish_git_needs_command)
597	2294	--> __fish_git_needs_command
549	639	---> set cmd (commandline -opc)
90	90	----> commandline -opc
59	1058	---> if [ (count $cmd) -eq 1 ]...
785	919	----> [ (count $cmd) -eq 1 ]
134	134	-----> count $cmd
80	80	----> return 0
144	144	-> test -z "$cmd"
71	71	-> and return 1
459	3771	> __fish_git_using_command remote
772	3174	-> set -l cmd (__fish_git_needs_command)
682	2402	--> __fish_git_needs_command
785	921	---> set cmd (commandline -opc)
136	136	----> commandline -opc
39	799	---> if [ (count $cmd) -eq 1 ]...
607	709	----> [ (count $cmd) -eq 1 ]
102	102	-----> count $cmd
51	51	----> return 0
90	90	-> test -z "$cmd"
48	48	-> and return 1
351	3012	> __fish_git_using_command filter-branch
558	2528	-> set -l cmd (__fish_git_needs_command)
504	1970	--> __fish_git_needs_command
601	697	---> set cmd (commandline -opc)
96	96	----> commandline -opc
38	769	---> if [ (count $cmd) -eq 1 ]...
579	680	----> [ (count $cmd) -eq 1 ]
101	101	-----> count $cmd
51	51	----> return 0
86	86	-> test -z "$cmd"
47	47	-> and return 1
335	3484	> __fish_git_using_command fetch
596	3017	-> set -l cmd (__fish_git_needs_command)
740	2421	--> __fish_git_needs_command
797	910	---> set cmd (commandline -opc)
113	113	----> commandline -opc
38	771	---> if [ (count $cmd) -eq 1 ]...
584	684	----> [ (count $cmd) -eq 1 ]
100	100	-----> count $cmd
49	49	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
328	2974	> __fish_git_using_command fetch
552	2513	-> set -l cmd (__fish_git_needs_command)
522	1961	--> __fish_git_needs_command
585	688	---> set cmd (commandline -opc)
103	103	----> commandline -opc
38	751	---> if [ (count $cmd) -eq 1 ]...
566	662	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
51	51	----> return 0
86	86	-> test -z "$cmd"
47	47	-> and return 1
355	2959	> __fish_git_using_command fetch
537	2472	-> set -l cmd (__fish_git_needs_command)
512	1935	--> __fish_git_needs_command
576	669	---> set cmd (commandline -opc)
93	93	----> commandline -opc
36	754	---> if [ (count $cmd) -eq 1 ]...
573	669	----> [ (count $cmd) -eq 1 ]
96	96	-----> count $cmd
49	49	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
342	3082	> __fish_git_using_command log show diff-tree rev-list
553	2608	-> set -l cmd (__fish_git_needs_command)
505	2055	--> __fish_git_needs_command
644	781	---> set cmd (commandline -opc)
137	137	----> commandline -opc
38	769	---> if [ (count $cmd) -eq 1 ]...
584	679	----> [ (count $cmd) -eq 1 ]
95	95	-----> count $cmd
52	52	----> return 0
85	85	-> test -z "$cmd"
47	47	-> and return 1
117	2115	> __fish_disable_bracketed_paste 'git '
1998	1998	-> printf "\e[?2004l"
125	125	> echo $_ " "
2065	144195	> __fish_pwd
142130	142130	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
284722	284722	> git
106	209	> __fish_enable_bracketed_paste
103	103	-> printf "\e[?2004h"
325	145800	> fish_mode_prompt
54	145475	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
140602	140602	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
91	4819	--> switch $fish_bind_mode...
949	4728	---> prompt_segment green black "I"
156	156	----> set -l bg
77	77	----> set -l fg
37	327	----> if [ -n "$argv[1]" ]...
183	183	-----> [ -n "$argv[1]" ]
107	107	-----> set bg $argv[1]
33	210	----> if [ -n "$argv[2]" ]...
89	89	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
55	2701	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2329	2329	-----> set_color -b $bg
93	93	-----> set_color $fg
75	75	-----> echo -n " "
97	97	----> set current_bg $argv[1]
34	211	----> if [ -n "$argv[3]" ]...
88	88	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
405	5125128	> fish_prompt
106	106	-> set -g RETVAL $status
368	403531	-> prompt_status
30	2227	--> if [ $RETVAL -ne 0 ]...
89	89	---> [ $RETVAL -ne 0 ]
603	2108	---> prompt_segment black red "✘"
76	76	----> set -l bg
69	69	----> set -l fg
33	215	----> if [ -n "$argv[1]" ]...
92	92	-----> [ -n "$argv[1]" ]
90	90	-----> set bg $argv[1]
33	210	----> if [ -n "$argv[2]" ]...
83	83	-----> [ -n "$argv[2]" ]
94	94	-----> set fg $argv[2]
73	634	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
88	88	-----> set_color -b $bg
84	84	-----> set_color $current_bg
83	83	-----> echo -n "$segment_separator "
79	79	-----> set_color -b $bg
79	79	-----> set_color $fg
90	90	----> set current_bg $argv[1]
38	211	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
763	93816	--> set -l uid (id -u $USER)
93053	93053	---> id -u $USER
46	179	--> if [ $uid -eq 0 ]...
133	133	---> [ $uid -eq 0 ]
37	306941	--> if [ (jobs -l | wc -l) -gt 0 ]...
1067	306904	---> [ (jobs -l | wc -l) -gt 0 ]
305837	305837	----> jobs -l | wc -l
272	139665	-> prompt_virtual_env
35	139393	--> if test "$VIRTUAL_ENV"...
139358	139358	---> test "$VIRTUAL_ENV"
494	1533	-> prompt_user
138	138	--> set -l BG 444444
85	85	--> set -l FG BCBCBC
37	816	--> if [ "$theme_display_user" = "yes" ]...
113	113	---> [ "$theme_display_user" = "yes" ]
253	576	---> get_hostname
93	93	----> set -g HOSTNAME_PROMPT ""
26	230	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
204	204	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	90	---> if [ $HOSTNAME_PROMPT ]...
68	68	----> [ $HOSTNAME_PROMPT ]
153	11965	-> prompt_dir
2618	11812	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
3630	7658	---> prompt_pwd
128	128	----> set -l options 'h/help'
2146	2146	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
26	100	----> if set -q _flag_help...
74	74	-----> set -q _flag_help
63	63	----> set -q fish_prompt_pwd_dir_length
79	79	----> or set -l fish_prompt_pwd_dir_length 1
349	349	----> set realhome ~
733	899	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
166	166	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	264	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
90	90	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
138	138	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
90	90	---> set -l bg
69	69	---> set -l fg
33	216	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
33	204	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
73	662	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	----> set_color -b $bg
94	94	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
85	85	----> set_color $fg
91	91	---> set current_bg $argv[1]
33	204	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
88	88	----> echo -n -s $argv[3] " "
181	53446	-> __exists hg
53265	53265	--> command -v "$name" ^/dev/null >&2
638	1675930	-> and prompt_hg
109	109	--> set -l branch
73	73	--> set -l state
42	1675110	--> if command hg id >/dev/null 2>&1...
1675068	1675068	---> command hg id >/dev/null 2>&1
225	44774	-> __exists git
44549	44549	--> command -v "$name" ^/dev/null >&2
1527	2510484	-> and prompt_git
132	132	--> set -l ref
143	2508825	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
342440	342440	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
922	307217	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
306295	306295	----> command git symbolic-ref HEAD 2> /dev/null
56	182	---> if [ $status -gt 0 ]...
126	126	----> [ $status -gt 0 ]
139144	139144	---> set branch_symbol \uE0A0
771	137042	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
136271	136271	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
85	85	---> set -l BG PROMPT
1273	433193	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
431920	431920	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
208	1147105	---> if [ "$dirty" = "" ]...
186	186	----> [ "$dirty" = "" ]
109	109	----> set BG yellow
110	110	----> set dirty ''
101	101	----> set -l empty 0
317822	317822	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
104	104	----> set -l target
89	317398	----> if [ $empty = 1 ]...
95	95	-----> [ $empty = 1 ]
90	90	-----> set target 'HEAD'
85	85	-----> set -l unstaged 0
316698	316698	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
114	114	-----> or set unstaged 1
39	227	-----> if [ $unstaged = 1 ]...
94	94	------> [ $unstaged = 1 ]
94	94	------> set dirty $dirty'●'
159	159	----> set -l staged 0
374387	374387	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	149	----> if [ $staged = 1 ]...
117	117	-----> [ $staged = 1 ]
42	136372	----> if [ "$dirty" = "" ]...
99	99	-----> [ "$dirty" = "" ]
136231	136231	-----> set PROMPT "$branch $dirty"
693	2274	---> prompt_segment $BG black $PROMPT
99	99	----> set -l bg
73	73	----> set -l fg
34	226	----> if [ -n "$argv[1]" ]...
99	99	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
31	206	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
82	674	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
100	100	-----> set_color $current_bg
84	84	-----> echo -n "$segment_separator "
82	82	-----> set_color -b $bg
81	81	-----> set_color $fg
92	92	----> set current_bg $argv[1]
31	211	----> if [ -n "$argv[3]" ]...
86	86	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
173	45431	-> __exists svn
45258	45258	--> command -v "$name" ^/dev/null >&2
315	236705	-> and prompt_svn
86	86	--> set -l ref
52	236304	--> if command svn ls . >/dev/null 2>&1...
236252	236252	---> command svn ls . >/dev/null 2>&1
384	1153	-> prompt_finish
72	566	--> if [ -n $current_bg ]...
138	138	---> [ -n $current_bg ]
120	120	---> set_color -b normal
119	119	---> set_color $current_bg
117	117	---> echo -n "$segment_separator "
96	96	--> set_color normal
107	107	--> set -g current_bg NONE
116	116	> echo $_ " "
164	297504	> __fish_pwd
297340	297340	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
121	198	> __fish_disable_bracketed_paste 'git add -A'
77	77	-> printf "\e[?2004l"
2253	2253	> echo $_ " "
169	146862	> __fish_pwd
146693	146693	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
3684577	3684577	> git add -A
101	2299	> __fish_enable_bracketed_paste
2198	2198	-> printf "\e[?2004h"
336	155417	> fish_mode_prompt
43	155081	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
146820	146820	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
58	8218	--> switch $fish_bind_mode...
640	8160	---> prompt_segment green black "I"
2124	2124	----> set -l bg
79	79	----> set -l fg
38	2201	----> if [ -n "$argv[1]" ]...
2058	2058	-----> [ -n "$argv[1]" ]
105	105	-----> set bg $argv[1]
34	213	----> if [ -n "$argv[2]" ]...
89	89	-----> [ -n "$argv[2]" ]
90	90	-----> set fg $argv[2]
63	2587	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
220	220	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2078	2078	-----> set_color -b $bg
145	145	-----> set_color $fg
81	81	-----> echo -n " "
100	100	----> set current_bg $argv[1]
34	216	----> if [ -n "$argv[3]" ]...
90	90	-----> [ -n "$argv[3]" ]
92	92	-----> echo -n -s $argv[3] " "
717	5177835	> fish_prompt
329	329	-> set -g RETVAL $status
458	403255	-> prompt_status
36	2626	--> if [ $RETVAL -ne 0 ]...
111	111	---> [ $RETVAL -ne 0 ]
878	2479	---> prompt_segment black red "✘"
108	108	----> set -l bg
74	74	----> set -l fg
45	235	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
32	204	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
87	87	-----> set fg $argv[2]
71	644	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
102	102	-----> set_color -b $bg
84	84	-----> set_color $current_bg
83	83	-----> echo -n "$segment_separator "
78	78	-----> set_color -b $bg
79	79	-----> set_color $fg
113	113	----> set current_bg $argv[1]
32	223	----> if [ -n "$argv[3]" ]...
86	86	-----> [ -n "$argv[3]" ]
105	105	-----> echo -n -s $argv[3] " "
822	100026	--> set -l uid (id -u $USER)
99204	99204	---> id -u $USER
34	158	--> if [ $uid -eq 0 ]...
124	124	---> [ $uid -eq 0 ]
40	299987	--> if [ (jobs -l | wc -l) -gt 0 ]...
985	297358	---> [ (jobs -l | wc -l) -gt 0 ]
296373	296373	----> jobs -l | wc -l
907	2589	---> prompt_segment black cyan "⚙"
135	135	----> set -l bg
98	98	----> set -l fg
50	303	----> if [ -n "$argv[1]" ]...
128	128	-----> [ -n "$argv[1]" ]
125	125	-----> set bg $argv[1]
43	277	----> if [ -n "$argv[2]" ]...
115	115	-----> [ -n "$argv[2]" ]
119	119	-----> set fg $argv[2]
60	534	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
212	212	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
106	106	-----> set_color -b $bg
86	86	-----> set_color $fg
70	70	-----> echo -n " "
112	112	----> set current_bg $argv[1]
33	223	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
105	105	-----> echo -n -s $argv[3] " "
202	154042	-> prompt_virtual_env
32	153840	--> if test "$VIRTUAL_ENV"...
153808	153808	---> test "$VIRTUAL_ENV"
685	2249	-> prompt_user
161	161	--> set -l BG 444444
141	141	--> set -l FG BCBCBC
54	1262	--> if [ "$theme_display_user" = "yes" ]...
122	122	---> [ "$theme_display_user" = "yes" ]
386	919	---> get_hostname
157	157	----> set -g HOSTNAME_PROMPT ""
37	376	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
339	339	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
39	167	---> if [ $HOSTNAME_PROMPT ]...
128	128	----> [ $HOSTNAME_PROMPT ]
174	18932	-> prompt_dir
1752	18758	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
4128	15027	---> prompt_pwd
158	158	----> set -l options 'h/help'
4477	4477	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
46	172	----> if set -q _flag_help...
126	126	-----> set -q _flag_help
191	191	----> set -q fish_prompt_pwd_dir_length
185	185	----> or set -l fish_prompt_pwd_dir_length 1
529	529	----> set realhome ~
1014	4800	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
3786	3786	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
57	387	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
125	125	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
205	205	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
137	137	---> set -l bg
123	123	---> set -l fg
40	270	---> if [ -n "$argv[1]" ]...
131	131	----> [ -n "$argv[1]" ]
99	99	----> set bg $argv[1]
41	310	---> if [ -n "$argv[2]" ]...
132	132	----> [ -n "$argv[2]" ]
137	137	----> set fg $argv[2]
74	684	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
162	162	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
98	98	----> set_color -b $bg
90	90	----> set_color $current_bg
86	86	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
89	89	----> set_color $fg
128	128	---> set current_bg $argv[1]
62	327	---> if [ -n "$argv[3]" ]...
112	112	----> [ -n "$argv[3]" ]
153	153	----> echo -n -s $argv[3] " "
181	59034	-> __exists hg
58853	58853	--> command -v "$name" ^/dev/null >&2
500	1692779	-> and prompt_hg
91	91	--> set -l branch
71	71	--> set -l state
43	1692117	--> if command hg id >/dev/null 2>&1...
1692074	1692074	---> command hg id >/dev/null 2>&1
232	46892	-> __exists git
46660	46660	--> command -v "$name" ^/dev/null >&2
1554	2514784	-> and prompt_git
140	140	--> set -l ref
140	2513090	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
325661	325661	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1072	320449	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
319377	319377	----> command git symbolic-ref HEAD 2> /dev/null
37	182	---> if [ $status -gt 0 ]...
145	145	----> [ $status -gt 0 ]
137138	137138	---> set branch_symbol \uE0A0
879	146735	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
145856	145856	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
85	85	---> set -l BG PROMPT
1083	421010	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
419927	419927	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
195	1159458	---> if [ "$dirty" = "" ]...
136	136	----> [ "$dirty" = "" ]
79	79	----> set BG yellow
79	79	----> set dirty ''
71	71	----> set -l empty 0
318523	318523	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
106	106	----> set -l target
90	330542	----> if [ $empty = 1 ]...
95	95	-----> [ $empty = 1 ]
91	91	-----> set target 'HEAD'
101	101	-----> set -l unstaged 0
329812	329812	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
117	117	-----> or set unstaged 1
41	236	-----> if [ $unstaged = 1 ]...
94	94	------> [ $unstaged = 1 ]
101	101	------> set dirty $dirty'●'
81	81	----> set -l staged 0
372560	372560	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
43	202	----> if [ $staged = 1 ]...
159	159	-----> [ $staged = 1 ]
53	136884	----> if [ "$dirty" = "" ]...
159	159	-----> [ "$dirty" = "" ]
136672	136672	-----> set PROMPT "$branch $dirty"
665	2232	---> prompt_segment $BG black $PROMPT
94	94	----> set -l bg
71	71	----> set -l fg
34	232	----> if [ -n "$argv[1]" ]...
106	106	-----> [ -n "$argv[1]" ]
92	92	-----> set bg $argv[1]
30	207	----> if [ -n "$argv[2]" ]...
88	88	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
72	658	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	-----> set_color -b $bg
89	89	-----> set_color $current_bg
85	85	-----> echo -n "$segment_separator "
81	81	-----> set_color -b $bg
86	86	-----> set_color $fg
94	94	----> set current_bg $argv[1]
33	211	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
93	93	-----> echo -n -s $argv[3] " "
181	54752	-> __exists svn
54571	54571	--> command -v "$name" ^/dev/null >&2
329	228885	-> and prompt_svn
93	93	--> set -l ref
50	228463	--> if command svn ls . >/dev/null 2>&1...
228413	228413	---> command svn ls . >/dev/null 2>&1
384	1185	-> prompt_finish
74	590	--> if [ -n $current_bg ]...
133	133	---> [ -n $current_bg ]
112	112	---> set_color -b normal
144	144	---> set_color $current_bg
127	127	---> echo -n "$segment_separator "
102	102	--> set_color normal
109	109	--> set -g current_bg NONE
117	117	> echo $_ " "
2145	289593	> __fish_pwd
287448	287448	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
131	207	> __fish_disable_bracketed_paste 'fisher -h'
76	76	-> printf "\e[?2004l"
2139	2139	> echo $_ " "
189	143837	> __fish_pwd
143648	143648	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2036	175247	> fisher -h
164844	164844	-> set -q XDG_CACHE_HOME
327	327	-> or set XDG_CACHE_HOME ~/.cache
41	41	-> set -q XDG_CONFIG_HOME
269	269	-> or set XDG_CONFIG_HOME ~/.config
80	80	-> set -g fish_config $XDG_CONFIG_HOME/fish
65	65	-> set -g fisher_cache $XDG_CACHE_HOME/fisher
61	61	-> set -g fisher_config $XDG_CONFIG_HOME/fisher
32	32	-> set -q fisher_path
59	59	-> set -g fishfile $fish_config/fishfile
221	2366	-> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
28	324	--> if test ! -d $path...
296	296	---> test ! -d $path
28	311	--> if test ! -d $path...
283	283	---> test ! -d $path
25	311	--> if test ! -d $path...
286	286	---> test ! -d $path
27	301	--> if test ! -d $path...
274	274	---> test ! -d $path
28	307	--> if test ! -d $path...
279	279	---> test ! -d $path
27	294	--> if test ! -d $path...
267	267	---> test ! -d $path
26	297	--> if test ! -d $path...
271	271	---> test ! -d $path
27	319	-> if test ! -e $fisher_path/completions/fisher.fish...
292	292	--> test ! -e $fisher_path/completions/fisher.fish
32	373	-> if test -e $fisher_path/conf.d/fisher.fish...
277	277	--> test -e $fisher_path/conf.d/fisher.fish
64	64	--> switch "$version"...
40	633	-> if test -e "$fisher_path/fishfile"...
314	314	--> test -e "$fisher_path/fishfile"
279	279	--> and test ! -e "$fishfile"
155	3742	-> switch "$cmd"...
2492	3587	--> _fisher_help
93	93	---> echo "usage: fisher add <package...>     Add packages"
69	69	---> echo "       fisher rm  <package...>     Remove packages"
64	64	---> echo "       fisher                      Update all packages"
65	65	---> echo "       fisher ls  [<regex>]        List installed packages matching <regex>"
62	62	---> echo "       fisher --help               Show this help"
78	78	---> echo "       fisher --version            Show the current version"
65	65	---> echo "       fisher self-update          Update to the latest version"
93	93	---> echo "       fisher self-uninstall       Uninstall from your system"
80	80	---> echo "examples:"
65	65	---> echo "       fisher add jethrokuan/z rafaelrinaldi/pure"
60	60	---> echo "       fisher add gitlab.com/foo/bar@v2"
62	62	---> echo "       fisher add ~/path/to/local/pkg"
58	58	---> echo "       fisher add <file"
61	61	---> echo "       fisher rm rafaelrinaldi/pure"
60	60	---> echo "       fisher ls | fisher rm"
60	60	---> echo "       fisher ls fish-\*"
167	323	> __fish_enable_bracketed_paste
156	156	-> printf "\e[?2004h"
497	2713	> fish_mode_prompt
37	2216	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
136	136	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
51	2043	--> switch $fish_bind_mode...
614	1992	---> prompt_segment green black "I"
82	82	----> set -l bg
67	67	----> set -l fg
32	213	----> if [ -n "$argv[1]" ]...
92	92	-----> [ -n "$argv[1]" ]
89	89	-----> set bg $argv[1]
32	200	----> if [ -n "$argv[2]" ]...
82	82	-----> [ -n "$argv[2]" ]
86	86	-----> set fg $argv[2]
53	513	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
161	161	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
90	90	-----> set_color -b $bg
132	132	-----> set_color $fg
77	77	-----> echo -n " "
95	95	----> set current_bg $argv[1]
33	208	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
378	5277374	> fish_prompt
108	108	-> set -g RETVAL $status
358	439695	-> prompt_status
23	116	--> if [ $RETVAL -ne 0 ]...
93	93	---> [ $RETVAL -ne 0 ]
750	103178	--> set -l uid (id -u $USER)
102428	102428	---> id -u $USER
39	171	--> if [ $uid -eq 0 ]...
132	132	---> [ $uid -eq 0 ]
42	335872	--> if [ (jobs -l | wc -l) -gt 0 ]...
969	333208	---> [ (jobs -l | wc -l) -gt 0 ]
332239	332239	----> jobs -l | wc -l
915	2622	---> prompt_segment black cyan "⚙"
120	120	----> set -l bg
109	109	----> set -l fg
43	307	----> if [ -n "$argv[1]" ]...
129	129	-----> [ -n "$argv[1]" ]
135	135	-----> set bg $argv[1]
34	216	----> if [ -n "$argv[2]" ]...
91	91	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
72	658	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	-----> set_color -b $bg
86	86	-----> set_color $current_bg
85	85	-----> echo -n "$segment_separator "
89	89	-----> set_color -b $bg
82	82	-----> set_color $fg
92	92	----> set current_bg $argv[1]
32	205	----> if [ -n "$argv[3]" ]...
83	83	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
162	143254	-> prompt_virtual_env
32	143092	--> if test "$VIRTUAL_ENV"...
143060	143060	---> test "$VIRTUAL_ENV"
481	1420	-> prompt_user
95	95	--> set -l BG 444444
77	77	--> set -l FG BCBCBC
37	767	--> if [ "$theme_display_user" = "yes" ]...
101	101	---> [ "$theme_display_user" = "yes" ]
235	538	---> get_hostname
92	92	----> set -g HOSTNAME_PROMPT ""
24	211	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
187	187	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	91	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
114	5218	-> prompt_dir
1230	5104	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
499	2357	---> prompt_pwd
101	101	----> set -l options 'h/help'
120	120	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
23	86	----> if set -q _flag_help...
63	63	-----> set -q _flag_help
62	62	----> set -q fish_prompt_pwd_dir_length
76	76	----> or set -l fish_prompt_pwd_dir_length 1
339	339	----> set realhome ~
640	811	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
171	171	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	263	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
88	88	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
139	139	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
81	81	---> set -l bg
68	68	---> set -l fg
32	212	---> if [ -n "$argv[1]" ]...
90	90	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
32	203	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
71	659	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
89	89	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
85	85	----> set_color $fg
91	91	---> set current_bg $argv[1]
33	203	---> if [ -n "$argv[3]" ]...
83	83	----> [ -n "$argv[3]" ]
87	87	----> echo -n -s $argv[3] " "
235	58246	-> __exists hg
58011	58011	--> command -v "$name" ^/dev/null >&2
718	1776743	-> and prompt_hg
132	132	--> set -l branch
99	99	--> set -l state
52	1775794	--> if command hg id >/dev/null 2>&1...
1775742	1775742	---> command hg id >/dev/null 2>&1
208	57451	-> __exists git
57243	57243	--> command -v "$name" ^/dev/null >&2
1050	2490530	-> and prompt_git
96	96	--> set -l ref
136	2489384	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
307298	307298	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
2908	314257	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
311349	311349	----> command git symbolic-ref HEAD 2> /dev/null
33	2397	---> if [ $status -gt 0 ]...
2364	2364	----> [ $status -gt 0 ]
169111	169111	---> set branch_symbol \uE0A0
840	137213	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
136373	136373	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
124	124	---> set -l BG PROMPT
1242	409257	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
408015	408015	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
234	1145212	---> if [ "$dirty" = "" ]...
137	137	----> [ "$dirty" = "" ]
79	79	----> set BG yellow
78	78	----> set dirty ''
70	70	----> set -l empty 0
333060	333060	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
186	186	----> set -l target
125	334063	----> if [ $empty = 1 ]...
158	158	-----> [ $empty = 1 ]
152	152	-----> set target 'HEAD'
125	125	-----> set -l unstaged 0
333136	333136	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
113	113	-----> or set unstaged 1
46	254	-----> if [ $unstaged = 1 ]...
109	109	------> [ $unstaged = 1 ]
99	99	------> set dirty $dirty'●'
141	141	----> set -l staged 0
335429	335429	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	151	----> if [ $staged = 1 ]...
119	119	-----> [ $staged = 1 ]
41	141584	----> if [ "$dirty" = "" ]...
95	95	-----> [ "$dirty" = "" ]
141448	141448	-----> set PROMPT "$branch $dirty"
677	4379	---> prompt_segment $BG black $PROMPT
88	88	----> set -l bg
68	68	----> set -l fg
34	216	----> if [ -n "$argv[1]" ]...
93	93	-----> [ -n "$argv[1]" ]
89	89	-----> set bg $argv[1]
31	198	----> if [ -n "$argv[2]" ]...
82	82	-----> [ -n "$argv[2]" ]
85	85	-----> set fg $argv[2]
77	2802	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
151	151	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2219	2219	-----> set_color -b $bg
98	98	-----> set_color $current_bg
90	90	-----> echo -n "$segment_separator "
86	86	-----> set_color -b $bg
81	81	-----> set_color $fg
97	97	----> set current_bg $argv[1]
36	233	----> if [ -n "$argv[3]" ]...
88	88	-----> [ -n "$argv[3]" ]
109	109	-----> echo -n -s $argv[3] " "
183	53937	-> __exists svn
53754	53754	--> command -v "$name" ^/dev/null >&2
312	249513	-> and prompt_svn
93	93	--> set -l ref
47	249108	--> if command svn ls . >/dev/null 2>&1...
249061	249061	---> command svn ls . >/dev/null 2>&1
277	881	-> prompt_finish
54	448	--> if [ -n $current_bg ]...
105	105	---> [ -n $current_bg ]
103	103	---> set_color -b normal
94	94	---> set_color $current_bg
92	92	---> echo -n "$segment_separator "
73	73	--> set_color normal
83	83	--> set -g current_bg NONE
112	112	> echo $_ " "
247	287526	> __fish_pwd
287279	287279	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
118	2151	> __fish_disable_bracketed_paste 'fisher --version'
2033	2033	-> printf "\e[?2004l"
127	127	> echo $_ " "
2041	149647	> __fish_pwd
147606	147606	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
1548	318014	> fisher --version
137598	137598	-> set -q XDG_CACHE_HOME
341	341	-> or set XDG_CACHE_HOME ~/.cache
42	42	-> set -q XDG_CONFIG_HOME
276	276	-> or set XDG_CONFIG_HOME ~/.config
73	73	-> set -g fish_config $XDG_CONFIG_HOME/fish
65	65	-> set -g fisher_cache $XDG_CACHE_HOME/fisher
63	63	-> set -g fisher_config $XDG_CONFIG_HOME/fisher
33	33	-> set -q fisher_path
59	59	-> set -g fishfile $fish_config/fishfile
223	5653	-> for path in {$fish_config,$fisher_path}/{functions,completions,conf.d} $fisher_cache...
31	3691	--> if test ! -d $path...
3660	3660	---> test ! -d $path
29	299	--> if test ! -d $path...
270	270	---> test ! -d $path
26	286	--> if test ! -d $path...
260	260	---> test ! -d $path
26	287	--> if test ! -d $path...
261	261	---> test ! -d $path
25	302	--> if test ! -d $path...
277	277	---> test ! -d $path
25	291	--> if test ! -d $path...
266	266	---> test ! -d $path
25	274	--> if test ! -d $path...
249	249	---> test ! -d $path
26	292	-> if test ! -e $fisher_path/completions/fisher.fish...
266	266	--> test ! -e $fisher_path/completions/fisher.fish
31	347	-> if test -e $fisher_path/conf.d/fisher.fish...
254	254	--> test -e $fisher_path/conf.d/fisher.fish
62	62	--> switch "$version"...
44	549	-> if test -e "$fisher_path/fishfile"...
250	250	--> test -e "$fisher_path/fishfile"
255	255	--> and test ! -e "$fishfile"
124	171075	-> switch "$cmd"...
2707	170951	--> echo "fisher version $fisher_version" (status -f | command sed "s|^$HOME|~|")
168244	168244	---> status -f | command sed "s|^$HOME|~|"
92	173	> __fish_enable_bracketed_paste
81	81	-> printf "\e[?2004h"
322	147653	> fish_mode_prompt
43	147331	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
145252	145252	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
71	2036	--> switch $fish_bind_mode...
624	1965	---> prompt_segment green black "I"
90	90	----> set -l bg
71	71	----> set -l fg
35	223	----> if [ -n "$argv[1]" ]...
96	96	-----> [ -n "$argv[1]" ]
92	92	-----> set bg $argv[1]
32	214	----> if [ -n "$argv[2]" ]...
91	91	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
51	451	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	-----> set_color -b $bg
83	83	-----> set_color $fg
71	71	-----> echo -n " "
90	90	----> set current_bg $argv[1]
31	202	----> if [ -n "$argv[3]" ]...
83	83	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
384	5283334	> fish_prompt
107	107	-> set -g RETVAL $status
361	429070	-> prompt_status
22	112	--> if [ $RETVAL -ne 0 ]...
90	90	---> [ $RETVAL -ne 0 ]
733	101376	--> set -l uid (id -u $USER)
100643	100643	---> id -u $USER
39	157	--> if [ $uid -eq 0 ]...
118	118	---> [ $uid -eq 0 ]
39	327064	--> if [ (jobs -l | wc -l) -gt 0 ]...
768	324705	---> [ (jobs -l | wc -l) -gt 0 ]
323937	323937	----> jobs -l | wc -l
671	2320	---> prompt_segment black cyan "⚙"
92	92	----> set -l bg
71	71	----> set -l fg
34	222	----> if [ -n "$argv[1]" ]...
95	95	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
38	213	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
90	90	-----> set fg $argv[2]
92	720	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
155	155	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
108	108	-----> set_color -b $bg
114	114	-----> set_color $current_bg
88	88	-----> echo -n "$segment_separator "
81	81	-----> set_color -b $bg
82	82	-----> set_color $fg
96	96	----> set current_bg $argv[1]
38	235	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
113	113	-----> echo -n -s $argv[3] " "
185	135049	-> prompt_virtual_env
28	134864	--> if test "$VIRTUAL_ENV"...
134836	134836	---> test "$VIRTUAL_ENV"
542	1496	-> prompt_user
107	107	--> set -l BG 444444
81	81	--> set -l FG BCBCBC
36	766	--> if [ "$theme_display_user" = "yes" ]...
102	102	---> [ "$theme_display_user" = "yes" ]
235	537	---> get_hostname
91	91	----> set -g HOSTNAME_PROMPT ""
23	211	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
188	188	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
23	91	---> if [ $HOSTNAME_PROMPT ]...
68	68	----> [ $HOSTNAME_PROMPT ]
114	13341	-> prompt_dir
1170	13227	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2621	10518	---> prompt_pwd
115	115	----> set -l options 'h/help'
2236	2236	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
39	145	----> if set -q _flag_help...
106	106	-----> set -q _flag_help
120	120	----> set -q fish_prompt_pwd_dir_length
175	175	----> or set -l fish_prompt_pwd_dir_length 1
1330	1330	----> set realhome ~
1185	3507	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2322	2322	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
43	269	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
134	134	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
78	78	---> set -l bg
68	68	---> set -l fg
38	216	---> if [ -n "$argv[1]" ]...
90	90	----> [ -n "$argv[1]" ]
88	88	----> set bg $argv[1]
32	198	---> if [ -n "$argv[2]" ]...
81	81	----> [ -n "$argv[2]" ]
85	85	----> set fg $argv[2]
72	681	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
145	145	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
91	91	----> set_color -b $bg
109	109	----> set_color $current_bg
85	85	----> echo -n "$segment_separator "
86	86	----> set_color -b $bg
93	93	----> set_color $fg
92	92	---> set current_bg $argv[1]
33	206	---> if [ -n "$argv[3]" ]...
84	84	----> [ -n "$argv[3]" ]
89	89	----> echo -n -s $argv[3] " "
177	52746	-> __exists hg
52569	52569	--> command -v "$name" ^/dev/null >&2
548	1789435	-> and prompt_hg
93	93	--> set -l branch
129	129	--> set -l state
47	1788665	--> if command hg id >/dev/null 2>&1...
1788618	1788618	---> command hg id >/dev/null 2>&1
202	57559	-> __exists git
57357	57357	--> command -v "$name" ^/dev/null >&2
1166	2502080	-> and prompt_git
113	113	--> set -l ref
147	2500801	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
309232	309232	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
4263	314222	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
309959	309959	----> command git symbolic-ref HEAD 2> /dev/null
39	2273	---> if [ $status -gt 0 ]...
2234	2234	----> [ $status -gt 0 ]
169579	169579	---> set branch_symbol \uE0A0
980	139296	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
138316	138316	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
89	89	---> set -l BG PROMPT
1105	400111	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
399006	399006	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
191	1159534	---> if [ "$dirty" = "" ]...
135	135	----> [ "$dirty" = "" ]
77	77	----> set BG yellow
77	77	----> set dirty ''
71	71	----> set -l empty 0
331184	331184	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
110	110	----> set -l target
104	352657	----> if [ $empty = 1 ]...
88	88	-----> [ $empty = 1 ]
84	84	-----> set target 'HEAD'
78	78	-----> set -l unstaged 0
351844	351844	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
145	145	-----> or set unstaged 1
52	314	-----> if [ $unstaged = 1 ]...
134	134	------> [ $unstaged = 1 ]
128	128	------> set dirty $dirty'●'
107	107	----> set -l staged 0
335271	335271	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
31	143	----> if [ $staged = 1 ]...
112	112	-----> [ $staged = 1 ]
53	139511	----> if [ "$dirty" = "" ]...
95	95	-----> [ "$dirty" = "" ]
139363	139363	-----> set PROMPT "$branch $dirty"
885	6318	---> prompt_segment $BG black $PROMPT
155	155	----> set -l bg
103	103	----> set -l fg
81	570	----> if [ -n "$argv[1]" ]...
183	183	-----> [ -n "$argv[1]" ]
306	306	-----> set bg $argv[1]
89	645	----> if [ -n "$argv[2]" ]...
273	273	-----> [ -n "$argv[2]" ]
283	283	-----> set fg $argv[2]
91	3648	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
350	350	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2865	2865	-----> set_color -b $bg
97	97	-----> set_color $current_bg
85	85	-----> echo -n "$segment_separator "
82	82	-----> set_color -b $bg
78	78	-----> set_color $fg
96	96	----> set current_bg $argv[1]
36	216	----> if [ -n "$argv[3]" ]...
89	89	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
182	52261	-> __exists svn
52079	52079	--> command -v "$name" ^/dev/null >&2
327	248837	-> and prompt_svn
92	92	--> set -l ref
41	248418	--> if command svn ls . >/dev/null 2>&1...
248377	248377	---> command svn ls . >/dev/null 2>&1
279	969	-> prompt_finish
60	538	--> if [ -n $current_bg ]...
185	185	---> [ -n $current_bg ]
98	98	---> set_color -b normal
105	105	---> set_color $current_bg
90	90	---> echo -n "$segment_separator "
70	70	--> set_color normal
82	82	--> set -g current_bg NONE
111	111	> echo $_ " "
184	344433	> __fish_pwd
344249	344249	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
141	3271	> __fish_disable_bracketed_paste 'git --version'
3130	3130	-> printf "\e[?2004l"
3099	3099	> echo $_ " "
3025	144057	> __fish_pwd
141032	141032	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
328101	328101	> git --version
105	198	> __fish_enable_bracketed_paste
93	93	-> printf "\e[?2004h"
334	145963	> fish_mode_prompt
44	145629	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
143558	143558	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
59	2027	--> switch $fish_bind_mode...
622	1968	---> prompt_segment green black "I"
90	90	----> set -l bg
71	71	----> set -l fg
34	229	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
98	98	-----> set bg $argv[1]
33	206	----> if [ -n "$argv[2]" ]...
85	85	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
52	450	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
85	85	-----> set_color $fg
71	71	-----> echo -n " "
92	92	----> set current_bg $argv[1]
31	208	----> if [ -n "$argv[3]" ]...
83	83	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
387	5134544	> fish_prompt
112	112	-> set -g RETVAL $status
333	395840	-> prompt_status
21	110	--> if [ $RETVAL -ne 0 ]...
89	89	---> [ $RETVAL -ne 0 ]
679	99135	--> set -l uid (id -u $USER)
98456	98456	---> id -u $USER
26	130	--> if [ $uid -eq 0 ]...
104	104	---> [ $uid -eq 0 ]
33	296132	--> if [ (jobs -l | wc -l) -gt 0 ]...
735	293896	---> [ (jobs -l | wc -l) -gt 0 ]
293161	293161	----> jobs -l | wc -l
661	2203	---> prompt_segment black cyan "⚙"
83	83	----> set -l bg
70	70	----> set -l fg
34	242	----> if [ -n "$argv[1]" ]...
116	116	-----> [ -n "$argv[1]" ]
92	92	-----> set bg $argv[1]
32	208	----> if [ -n "$argv[2]" ]...
87	87	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
71	644	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
153	153	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
94	94	-----> set_color -b $bg
84	84	-----> set_color $current_bg
83	83	-----> echo -n "$segment_separator "
79	79	-----> set_color -b $bg
80	80	-----> set_color $fg
91	91	----> set current_bg $argv[1]
32	204	----> if [ -n "$argv[3]" ]...
83	83	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
166	135278	-> prompt_virtual_env
30	135112	--> if test "$VIRTUAL_ENV"...
135082	135082	---> test "$VIRTUAL_ENV"
522	1456	-> prompt_user
95	95	--> set -l BG 444444
77	77	--> set -l FG BCBCBC
37	762	--> if [ "$theme_display_user" = "yes" ]...
103	103	---> [ "$theme_display_user" = "yes" ]
226	528	---> get_hostname
90	90	----> set -g HOSTNAME_PROMPT ""
24	212	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
188	188	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
26	94	---> if [ $HOSTNAME_PROMPT ]...
68	68	----> [ $HOSTNAME_PROMPT ]
115	11820	-> prompt_dir
1176	11705	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2450	9018	---> prompt_pwd
116	116	----> set -l options 'h/help'
2099	2099	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	117	----> if set -q _flag_help...
92	92	-----> set -q _flag_help
58	58	----> set -q fish_prompt_pwd_dir_length
75	75	----> or set -l fish_prompt_pwd_dir_length 1
602	602	----> set realhome ~
1033	3233	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2200	2200	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
39	268	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
92	92	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
137	137	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
81	81	---> set -l bg
67	67	---> set -l fg
31	214	---> if [ -n "$argv[1]" ]...
92	92	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
31	201	---> if [ -n "$argv[2]" ]...
83	83	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
70	656	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
152	152	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	----> set_color -b $bg
87	87	----> set_color $current_bg
83	83	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
85	85	----> set_color $fg
91	91	---> set current_bg $argv[1]
32	201	---> if [ -n "$argv[3]" ]...
82	82	----> [ -n "$argv[3]" ]
87	87	----> echo -n -s $argv[3] " "
201	54218	-> __exists hg
54017	54017	--> command -v "$name" ^/dev/null >&2
718	1645892	-> and prompt_hg
129	129	--> set -l branch
105	105	--> set -l state
49	1644940	--> if command hg id >/dev/null 2>&1...
1644891	1644891	---> command hg id >/dev/null 2>&1
235	52568	-> __exists git
52333	52333	--> command -v "$name" ^/dev/null >&2
2000	2556402	-> and prompt_git
3614	3614	--> set -l ref
144	2550788	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
311871	311871	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1244	331428	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
330184	330184	----> command git symbolic-ref HEAD 2> /dev/null
36	2698	---> if [ $status -gt 0 ]...
2662	2662	----> [ $status -gt 0 ]
156115	156115	---> set branch_symbol \uE0A0
789	147667	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
146878	146878	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
92	92	---> set -l BG PROMPT
1077	444829	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
443752	443752	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
206	1150088	---> if [ "$dirty" = "" ]...
159	159	----> [ "$dirty" = "" ]
79	79	----> set BG yellow
80	80	----> set dirty ''
70	70	----> set -l empty 0
319153	319153	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
105	105	----> set -l target
104	321632	----> if [ $empty = 1 ]...
98	98	-----> [ $empty = 1 ]
90	90	-----> set target 'HEAD'
74	74	-----> set -l unstaged 0
320802	320802	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
146	146	-----> or set unstaged 1
52	318	-----> if [ $unstaged = 1 ]...
126	126	------> [ $unstaged = 1 ]
140	140	------> set dirty $dirty'●'
110	110	----> set -l staged 0
361346	361346	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
41	201	----> if [ $staged = 1 ]...
160	160	-----> [ $staged = 1 ]
50	146947	----> if [ "$dirty" = "" ]...
135	135	-----> [ "$dirty" = "" ]
146762	146762	-----> set PROMPT "$branch $dirty"
705	5856	---> prompt_segment $BG black $PROMPT
97	97	----> set -l bg
74	74	----> set -l fg
34	226	----> if [ -n "$argv[1]" ]...
98	98	-----> [ -n "$argv[1]" ]
94	94	-----> set bg $argv[1]
32	243	----> if [ -n "$argv[2]" ]...
120	120	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
100	4074	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
236	236	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
3327	3327	-----> set_color -b $bg
142	142	-----> set_color $current_bg
97	97	-----> echo -n "$segment_separator "
89	89	-----> set_color -b $bg
83	83	-----> set_color $fg
103	103	----> set current_bg $argv[1]
51	334	----> if [ -n "$argv[3]" ]...
164	164	-----> [ -n "$argv[3]" ]
119	119	-----> echo -n -s $argv[3] " "
186	48084	-> __exists svn
47898	47898	--> command -v "$name" ^/dev/null >&2
329	231606	-> and prompt_svn
123	123	--> set -l ref
51	231154	--> if command svn ls . >/dev/null 2>&1...
231103	231103	---> command svn ls . >/dev/null 2>&1
275	881	-> prompt_finish
56	450	--> if [ -n $current_bg ]...
107	107	---> [ -n $current_bg ]
101	101	---> set_color -b normal
95	95	---> set_color $current_bg
91	91	---> echo -n "$segment_separator "
73	73	--> set_color normal
83	83	--> set -g current_bg NONE
109	109	> echo $_ " "
178	267315	> __fish_pwd
267137	267137	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
149	2324	> __fish_disable_bracketed_paste 'cd MPA/src/'
2175	2175	-> printf "\e[?2004l"
2096	2096	> echo $_ " "
2068	143396	> __fish_pwd
141328	141328	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
3655	1222811	> cd MPA/src/
75	75	-> set -l MAX_DIR_HIST 25
27	4802	-> if test (count $argv) -gt 1...
2684	4775	--> test (count $argv) -gt 1
2091	2091	---> count $argv
36	2937	-> if status --is-command-substitution...
2901	2901	--> status --is-command-substitution
107	107	-> set -l previous $PWD
32	126	-> if test "$argv" = "-"...
94	94	--> test "$argv" = "-"
135783	1210545	-> builtin cd $argv
106	1074762	--> __z_on_variable_pwd VARIABLE SET PWD
458	1074656	---> __z_add
54	2143	----> for i in $Z_EXCLUDE...
24	2089	-----> if contains -- $PWD $i...
2065	2065	------> contains -- $PWD $i
876	110959	----> set -l tmpfile (mktemp $Z_DATA.XXXXXX)
110083	110083	-----> mktemp $Z_DATA.XXXXXX
143	774530	----> if test -f $tmpfile...
498	498	-----> test -f $tmpfile
823	3099	-----> set -l path (string replace --all \\ \\\\ $PWD)
2276	2276	------> string replace --all \\ \\\\ $PWD
293828	533941	-----> command awk -v path=$path -v now=(date +%s) -F "|" '
      BEGIN {
          rank[path] = 1
          time[path] = now
      }
      $2 >= 1 {
          if( $1 == path ) {
              rank[$1] = $2 + 1
              time[$1] = now
          }
          else {
              rank[$1] = $2
              time[$1] = $3
          }
          count += $2
      }
      END {
          if( count > 1000 ) {
              for( i in rank ) print i "|" 0.9*rank[i] "|" time[i] # aging
          }
          else for( i in rank ) print i "|" rank[i] "|" time[i]
      }
    ' $Z_DATA 2>/dev/null >$tmpfile
240113	240113	------> date +%s
41	135886	-----> if test ! -z "$Z_OWNER"...
135845	135845	------> test ! -z "$Z_OWNER"
100963	100963	-----> command mv $tmpfile $Z_DATA
504	186566	----> __z_complete
2877	183256	-----> set -l __z_marks (string replace -r '\|.*' '' < $Z_DATA | string escape)
180379	180379	------> string replace -r '\|.*' '' < $Z_DATA | string escape
2238	2238	-----> complete -c $Z_CMD -a "$__z_marks" -f
90	90	-----> complete -c $ZO_CMD -a "$__z_marks" -f
81	81	-----> complete -c $Z_CMD -s c -l clean  -d "Cleans out $Z_DATA"
66	66	-----> complete -c $Z_CMD -s e -l echo   -d "Prints best match, no cd"
72	72	-----> complete -c $Z_CMD -s l -l list   -d "List matches, no cd"
73	73	-----> complete -c $Z_CMD -s p -l purge  -d "Purges $Z_DATA"
63	63	-----> complete -c $Z_CMD -s r -l rank   -d "Searches by rank, cd"
62	62	-----> complete -c $Z_CMD -s t -l recent -d "Searches by recency, cd"
61	61	-----> complete -c $Z_CMD -s h -l help   -d "Print help"
69	69	-> set -l cd_status $status
95	455	-> if test $cd_status -eq 0 -a "$PWD" != "$previous"...
111	111	--> test $cd_status -eq 0 -a "$PWD" != "$previous"
36	36	--> set -q dirprev
52	52	--> set -q dirprev[$MAX_DIR_HIST]
73	73	--> set -g dirprev $dirprev $previous
40	40	--> set -e dirnext
48	48	--> set -g __fish_cd_direction prev
40	40	-> return $cd_status
87	177	> __fish_enable_bracketed_paste
90	90	-> printf "\e[?2004h"
323	5342	> fish_mode_prompt
38	5019	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
129	129	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
52	4852	--> switch $fish_bind_mode...
794	4800	---> prompt_segment green black "I"
401	401	----> set -l bg
134	134	----> set -l fg
38	2492	----> if [ -n "$argv[1]" ]...
2351	2351	-----> [ -n "$argv[1]" ]
103	103	-----> set bg $argv[1]
33	251	----> if [ -n "$argv[2]" ]...
110	110	-----> [ -n "$argv[2]" ]
108	108	-----> set fg $argv[2]
51	443	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
90	90	-----> set_color -b $bg
85	85	-----> set_color $fg
69	69	-----> echo -n " "
88	88	----> set current_bg $argv[1]
32	197	----> if [ -n "$argv[3]" ]...
81	81	-----> [ -n "$argv[3]" ]
84	84	-----> echo -n -s $argv[3] " "
388	5063937	> fish_prompt
103	103	-> set -g RETVAL $status
340	415151	-> prompt_status
22	107	--> if [ $RETVAL -ne 0 ]...
85	85	---> [ $RETVAL -ne 0 ]
749	99450	--> set -l uid (id -u $USER)
98701	98701	---> id -u $USER
32	158	--> if [ $uid -eq 0 ]...
126	126	---> [ $uid -eq 0 ]
41	315096	--> if [ (jobs -l | wc -l) -gt 0 ]...
929	312504	---> [ (jobs -l | wc -l) -gt 0 ]
311575	311575	----> jobs -l | wc -l
883	2551	---> prompt_segment black cyan "⚙"
125	125	----> set -l bg
96	96	----> set -l fg
40	290	----> if [ -n "$argv[1]" ]...
131	131	-----> [ -n "$argv[1]" ]
119	119	-----> set bg $argv[1]
32	209	----> if [ -n "$argv[2]" ]...
89	89	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
72	653	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
92	92	-----> set_color $current_bg
84	84	-----> echo -n "$segment_separator "
80	80	-----> set_color -b $bg
82	82	-----> set_color $fg
91	91	----> set current_bg $argv[1]
33	204	----> if [ -n "$argv[3]" ]...
83	83	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
162	135637	-> prompt_virtual_env
30	135475	--> if test "$VIRTUAL_ENV"...
135445	135445	---> test "$VIRTUAL_ENV"
493	1523	-> prompt_user
98	98	--> set -l BG 444444
78	78	--> set -l FG BCBCBC
76	854	--> if [ "$theme_display_user" = "yes" ]...
100	100	---> [ "$theme_display_user" = "yes" ]
231	585	---> get_hostname
90	90	----> set -g HOSTNAME_PROMPT ""
24	264	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
240	240	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
24	93	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
114	9327	-> prompt_dir
1174	9213	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2542	6462	---> prompt_pwd
116	116	----> set -l options 'h/help'
2134	2134	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	95	----> if set -q _flag_help...
70	70	-----> set -q _flag_help
61	61	----> set -q fish_prompt_pwd_dir_length
78	78	----> or set -l fish_prompt_pwd_dir_length 1
317	317	----> set realhome ~
675	839	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
164	164	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
46	280	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
91	91	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
143	143	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
94	94	---> set -l bg
70	70	---> set -l fg
34	215	---> if [ -n "$argv[1]" ]...
91	91	----> [ -n "$argv[1]" ]
90	90	----> set bg $argv[1]
32	206	---> if [ -n "$argv[2]" ]...
85	85	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
71	673	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
87	87	----> set_color $current_bg
97	97	----> echo -n "$segment_separator "
88	88	----> set_color -b $bg
87	87	----> set_color $fg
92	92	---> set current_bg $argv[1]
33	227	---> if [ -n "$argv[3]" ]...
85	85	----> [ -n "$argv[3]" ]
109	109	----> echo -n -s $argv[3] " "
214	55587	-> __exists hg
55373	55373	--> command -v "$name" ^/dev/null >&2
520	1650867	-> and prompt_hg
93	93	--> set -l branch
80	80	--> set -l state
55	1650174	--> if command hg id >/dev/null 2>&1...
1650119	1650119	---> command hg id >/dev/null 2>&1
271	67530	-> __exists git
67259	67259	--> command -v "$name" ^/dev/null >&2
1898	2444413	-> and prompt_git
169	169	--> set -l ref
133	2442346	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
314208	314208	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
962	309641	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
308679	308679	----> command git symbolic-ref HEAD 2> /dev/null
38	177	---> if [ $status -gt 0 ]...
139	139	----> [ $status -gt 0 ]
141684	141684	---> set branch_symbol \uE0A0
750	132873	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
132123	132123	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
81	81	---> set -l BG PROMPT
845	400120	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
399275	399275	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
200	1139116	---> if [ "$dirty" = "" ]...
108	108	----> [ "$dirty" = "" ]
72	72	----> set BG yellow
122	122	----> set dirty ''
74	74	----> set -l empty 0
304475	304475	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
104	104	----> set -l target
128	340741	----> if [ $empty = 1 ]...
94	94	-----> [ $empty = 1 ]
88	88	-----> set target 'HEAD'
71	71	-----> set -l unstaged 0
339770	339770	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
189	189	-----> or set unstaged 1
62	401	-----> if [ $unstaged = 1 ]...
176	176	------> [ $unstaged = 1 ]
163	163	------> set dirty $dirty'●'
136	136	----> set -l staged 0
360131	360131	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	147	----> if [ $staged = 1 ]...
115	115	-----> [ $staged = 1 ]
41	132806	----> if [ "$dirty" = "" ]...
94	94	-----> [ "$dirty" = "" ]
132671	132671	-----> set PROMPT "$branch $dirty"
672	4313	---> prompt_segment $BG black $PROMPT
94	94	----> set -l bg
71	71	----> set -l fg
34	225	----> if [ -n "$argv[1]" ]...
98	98	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
33	213	----> if [ -n "$argv[2]" ]...
92	92	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
74	2716	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2141	2141	-----> set_color -b $bg
98	98	-----> set_color $current_bg
90	90	-----> echo -n "$segment_separator "
83	83	-----> set_color -b $bg
81	81	-----> set_color $fg
103	103	----> set current_bg $argv[1]
35	219	----> if [ -n "$argv[3]" ]...
90	90	-----> [ -n "$argv[3]" ]
94	94	-----> echo -n -s $argv[3] " "
192	55830	-> __exists svn
55638	55638	--> command -v "$name" ^/dev/null >&2
403	226673	-> and prompt_svn
117	117	--> set -l ref
50	226153	--> if command svn ls . >/dev/null 2>&1...
226103	226103	---> command svn ls . >/dev/null 2>&1
273	908	-> prompt_finish
57	484	--> if [ -n $current_bg ]...
105	105	---> [ -n $current_bg ]
129	129	---> set_color -b normal
104	104	---> set_color $current_bg
89	89	---> echo -n "$segment_separator "
70	70	--> set_color normal
81	81	--> set -g current_bg NONE
106	106	> echo $_ " "
161	290867	> __fish_pwd
290706	290706	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2269	108585	> __fish_start_bracketed_paste
2036	2036	-> set -g __fish_last_bind_mode $fish_bind_mode
2659	104280	-> __fish_commandline_is_singlequoted
63	63	--> set -l state normal
707	99208	--> for char in (commandline -ct | string split "")...
98373	98373	---> commandline -ct | string split ""
85	128	---> switch $char...
43	43	----> switch $state...
39	2350	--> if contains -- $state single single-escaped...
2283	2283	---> contains -- $state single single-escaped
28	28	---> return 1
3613	3613	> commandline -i \n
2421	2617	> __fish_stop_bracketed_paste
106	106	-> set fish_bind_mode $__fish_last_bind_mode
47	47	-> set -e __fish_paste_quoted
43	43	-> commandline -f force-repaint
333	15403	> fish_mode_prompt
41	15070	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
2094	2094	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
54	12935	--> switch $fish_bind_mode...
681	12881	---> prompt_segment green black "I"
98	98	----> set -l bg
122	122	----> set -l fg
62	4530	----> if [ -n "$argv[1]" ]...
4284	4284	-----> [ -n "$argv[1]" ]
184	184	-----> set bg $argv[1]
57	412	----> if [ -n "$argv[2]" ]...
168	168	-----> [ -n "$argv[2]" ]
187	187	-----> set fg $argv[2]
97	6494	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
277	277	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2940	2940	-----> set_color -b $bg
153	153	-----> set_color $fg
3027	3027	-----> echo -n " "
158	158	----> set current_bg $argv[1]
65	386	----> if [ -n "$argv[3]" ]...
161	161	-----> [ -n "$argv[3]" ]
160	160	-----> echo -n -s $argv[3] " "
388	5096928	> fish_prompt
118	118	-> set -g RETVAL $status
359	394606	-> prompt_status
23	113	--> if [ $RETVAL -ne 0 ]...
90	90	---> [ $RETVAL -ne 0 ]
755	98734	--> set -l uid (id -u $USER)
97979	97979	---> id -u $USER
35	165	--> if [ $uid -eq 0 ]...
130	130	---> [ $uid -eq 0 ]
45	295235	--> if [ (jobs -l | wc -l) -gt 0 ]...
959	292203	---> [ (jobs -l | wc -l) -gt 0 ]
291244	291244	----> jobs -l | wc -l
752	2987	---> prompt_segment black cyan "⚙"
92	92	----> set -l bg
91	91	----> set -l fg
46	305	----> if [ -n "$argv[1]" ]...
126	126	-----> [ -n "$argv[1]" ]
133	133	-----> set bg $argv[1]
44	303	----> if [ -n "$argv[2]" ]...
136	136	-----> [ -n "$argv[2]" ]
123	123	-----> set fg $argv[2]
105	1004	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
209	209	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
135	135	-----> set_color -b $bg
132	132	-----> set_color $current_bg
173	173	-----> echo -n "$segment_separator "
131	131	-----> set_color -b $bg
119	119	-----> set_color $fg
139	139	----> set current_bg $argv[1]
48	301	----> if [ -n "$argv[3]" ]...
122	122	-----> [ -n "$argv[3]" ]
131	131	-----> echo -n -s $argv[3] " "
233	167932	-> prompt_virtual_env
34	167699	--> if test "$VIRTUAL_ENV"...
167665	167665	---> test "$VIRTUAL_ENV"
500	1503	-> prompt_user
95	95	--> set -l BG 444444
76	76	--> set -l FG BCBCBC
43	832	--> if [ "$theme_display_user" = "yes" ]...
146	146	---> [ "$theme_display_user" = "yes" ]
233	548	---> get_hostname
92	92	----> set -g HOSTNAME_PROMPT ""
29	223	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
194	194	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	95	---> if [ $HOSTNAME_PROMPT ]...
73	73	----> [ $HOSTNAME_PROMPT ]
118	10426	-> prompt_dir
1353	10308	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2583	7382	---> prompt_pwd
129	129	----> set -l options 'h/help'
2178	2178	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
48	115	----> if set -q _flag_help...
67	67	-----> set -q _flag_help
62	62	----> set -q fish_prompt_pwd_dir_length
79	79	----> or set -l fish_prompt_pwd_dir_length 1
322	322	----> set realhome ~
1155	1592	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
437	437	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
37	322	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
135	135	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
150	150	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
86	86	---> set -l bg
69	69	---> set -l fg
32	226	---> if [ -n "$argv[1]" ]...
93	93	----> [ -n "$argv[1]" ]
101	101	----> set bg $argv[1]
33	212	---> if [ -n "$argv[2]" ]...
90	90	----> [ -n "$argv[2]" ]
89	89	----> set fg $argv[2]
72	660	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
98	98	----> set_color -b $bg
88	88	----> set_color $current_bg
85	85	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
86	86	----> set_color $fg
106	106	---> set current_bg $argv[1]
34	214	---> if [ -n "$argv[3]" ]...
88	88	----> [ -n "$argv[3]" ]
92	92	----> echo -n -s $argv[3] " "
180	52891	-> __exists hg
52711	52711	--> command -v "$name" ^/dev/null >&2
534	1658975	-> and prompt_hg
94	94	--> set -l branch
96	96	--> set -l state
53	1658251	--> if command hg id >/dev/null 2>&1...
1658198	1658198	---> command hg id >/dev/null 2>&1
254	56516	-> __exists git
56262	56262	--> command -v "$name" ^/dev/null >&2
1107	2486690	-> and prompt_git
104	104	--> set -l ref
138	2485479	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
347157	347157	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1033	319364	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
318331	318331	----> command git symbolic-ref HEAD 2> /dev/null
27	135	---> if [ $status -gt 0 ]...
108	108	----> [ $status -gt 0 ]
135467	135467	---> set branch_symbol \uE0A0
863	137291	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
136428	136428	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
121	121	---> set -l BG PROMPT
1012	395071	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
394059	394059	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
331	1148526	---> if [ "$dirty" = "" ]...
123	123	----> [ "$dirty" = "" ]
80	80	----> set BG yellow
81	81	----> set dirty ''
74	74	----> set -l empty 0
316402	316402	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
149	149	----> set -l target
115	332610	----> if [ $empty = 1 ]...
125	125	-----> [ $empty = 1 ]
132	132	-----> set target 'HEAD'
103	103	-----> set -l unstaged 0
331682	331682	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
138	138	-----> or set unstaged 1
58	315	-----> if [ $unstaged = 1 ]...
130	130	------> [ $unstaged = 1 ]
127	127	------> set dirty $dirty'●'
104	104	----> set -l staged 0
362520	362520	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
92	462	----> if [ $staged = 1 ]...
370	370	-----> [ $staged = 1 ]
50	135590	----> if [ "$dirty" = "" ]...
161	161	-----> [ "$dirty" = "" ]
135379	135379	-----> set PROMPT "$branch $dirty"
674	2209	---> prompt_segment $BG black $PROMPT
87	87	----> set -l bg
91	91	----> set -l fg
33	238	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
108	108	-----> set bg $argv[1]
32	201	----> if [ -n "$argv[2]" ]...
84	84	-----> [ -n "$argv[2]" ]
85	85	-----> set fg $argv[2]
70	626	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
145	145	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
88	88	-----> set_color -b $bg
89	89	-----> set_color $current_bg
81	81	-----> echo -n "$segment_separator "
77	77	-----> set_color -b $bg
76	76	-----> set_color $fg
89	89	----> set current_bg $argv[1]
31	203	----> if [ -n "$argv[3]" ]...
81	81	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
174	42424	-> __exists svn
42250	42250	--> command -v "$name" ^/dev/null >&2
306	223637	-> and prompt_svn
91	91	--> set -l ref
41	223240	--> if command svn ls . >/dev/null 2>&1...
223199	223199	---> command svn ls . >/dev/null 2>&1
263	822	-> prompt_finish
52	413	--> if [ -n $current_bg ]...
97	97	---> [ -n $current_bg ]
86	86	---> set_color -b normal
93	93	---> set_color $current_bg
85	85	---> echo -n "$segment_separator "
68	68	--> set_color normal
78	78	--> set -g current_bg NONE
116	116	> echo $_ " "
2084	272745	> __fish_pwd
270661	270661	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
138	2575	> __fish_disable_bracketed_paste set\ -x\ PATH\ /usr/local/bin\ \$PATH\n
2437	2437	-> printf "\e[?2004l"
117	117	> echo $_ " "
168	139804	> __fish_pwd
139636	139636	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
944	944	> set -x PATH /usr/local/bin $PATH
92	176	> __fish_enable_bracketed_paste
84	84	-> printf "\e[?2004h"
323	135727	> fish_mode_prompt
43	135404	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
133318	133318	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
58	2043	--> switch $fish_bind_mode...
627	1985	---> prompt_segment green black "I"
98	98	----> set -l bg
71	71	----> set -l fg
34	224	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
34	209	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
53	460	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
85	85	-----> set_color $fg
78	78	-----> echo -n " "
92	92	----> set current_bg $argv[1]
32	204	----> if [ -n "$argv[3]" ]...
84	84	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
460	5223567	> fish_prompt
109	109	-> set -g RETVAL $status
364	394613	-> prompt_status
23	114	--> if [ $RETVAL -ne 0 ]...
91	91	---> [ $RETVAL -ne 0 ]
712	100696	--> set -l uid (id -u $USER)
99984	99984	---> id -u $USER
35	139	--> if [ $uid -eq 0 ]...
104	104	---> [ $uid -eq 0 ]
51	293300	--> if [ (jobs -l | wc -l) -gt 0 ]...
845	290257	---> [ (jobs -l | wc -l) -gt 0 ]
289412	289412	----> jobs -l | wc -l
924	2992	---> prompt_segment black cyan "⚙"
114	114	----> set -l bg
105	105	----> set -l fg
46	291	----> if [ -n "$argv[1]" ]...
123	123	-----> [ -n "$argv[1]" ]
122	122	-----> set bg $argv[1]
41	265	----> if [ -n "$argv[2]" ]...
110	110	-----> [ -n "$argv[2]" ]
114	114	-----> set fg $argv[2]
90	901	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
193	193	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
121	121	-----> set_color -b $bg
141	141	-----> set_color $current_bg
170	170	-----> echo -n "$segment_separator "
101	101	-----> set_color -b $bg
85	85	-----> set_color $fg
120	120	----> set current_bg $argv[1]
46	272	----> if [ -n "$argv[3]" ]...
115	115	-----> [ -n "$argv[3]" ]
111	111	-----> echo -n -s $argv[3] " "
242	139513	-> prompt_virtual_env
37	139271	--> if test "$VIRTUAL_ENV"...
139234	139234	---> test "$VIRTUAL_ENV"
485	1421	-> prompt_user
94	94	--> set -l BG 444444
78	78	--> set -l FG BCBCBC
37	764	--> if [ "$theme_display_user" = "yes" ]...
99	99	---> [ "$theme_display_user" = "yes" ]
227	538	---> get_hostname
95	95	----> set -g HOSTNAME_PROMPT ""
24	216	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
192	192	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
21	90	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
111	5780	-> prompt_dir
1596	5669	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
510	2406	---> prompt_pwd
101	101	----> set -l options 'h/help'
120	120	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
24	87	----> if set -q _flag_help...
63	63	-----> set -q _flag_help
59	59	----> set -q fish_prompt_pwd_dir_length
78	78	----> or set -l fish_prompt_pwd_dir_length 1
338	338	----> set realhome ~
646	811	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
165	165	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
38	302	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
106	106	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
158	158	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
155	155	---> set -l bg
73	73	---> set -l fg
35	280	---> if [ -n "$argv[1]" ]...
111	111	----> [ -n "$argv[1]" ]
134	134	----> set bg $argv[1]
32	209	---> if [ -n "$argv[2]" ]...
87	87	----> [ -n "$argv[2]" ]
90	90	----> set fg $argv[2]
70	659	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
162	162	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	----> set_color -b $bg
84	84	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
81	81	----> set_color -b $bg
83	83	----> set_color $fg
90	90	---> set current_bg $argv[1]
32	201	---> if [ -n "$argv[3]" ]...
82	82	----> [ -n "$argv[3]" ]
87	87	----> echo -n -s $argv[3] " "
184	43914	-> __exists hg
43730	43730	--> command -v "$name" ^/dev/null >&2
525	1748655	-> and prompt_hg
94	94	--> set -l branch
74	74	--> set -l state
54	1747962	--> if command hg id >/dev/null 2>&1...
1747908	1747908	---> command hg id >/dev/null 2>&1
218	61506	-> __exists git
61288	61288	--> command -v "$name" ^/dev/null >&2
1105	2545701	-> and prompt_git
103	103	--> set -l ref
139	2544493	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
358120	358120	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1092	334574	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
333482	333482	----> command git symbolic-ref HEAD 2> /dev/null
36	164	---> if [ $status -gt 0 ]...
128	128	----> [ $status -gt 0 ]
144173	144173	---> set branch_symbol \uE0A0
771	146445	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
145674	145674	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
81	81	---> set -l BG PROMPT
1281	424211	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
422930	422930	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
230	1134234	---> if [ "$dirty" = "" ]...
157	157	----> [ "$dirty" = "" ]
108	108	----> set BG yellow
115	115	----> set dirty ''
106	106	----> set -l empty 0
315055	315055	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
134	134	----> set -l target
104	321458	----> if [ $empty = 1 ]...
129	129	-----> [ $empty = 1 ]
129	129	-----> set target 'HEAD'
109	109	-----> set -l unstaged 0
320628	320628	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
121	121	-----> or set unstaged 1
38	238	-----> if [ $unstaged = 1 ]...
104	104	------> [ $unstaged = 1 ]
96	96	------> set dirty $dirty'●'
78	78	----> set -l staged 0
358426	358426	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
38	191	----> if [ $staged = 1 ]...
153	153	-----> [ $staged = 1 ]
50	138176	----> if [ "$dirty" = "" ]...
132	132	-----> [ "$dirty" = "" ]
137994	137994	-----> set PROMPT "$branch $dirty"
692	2352	---> prompt_segment $BG black $PROMPT
95	95	----> set -l bg
69	69	----> set -l fg
35	230	----> if [ -n "$argv[1]" ]...
100	100	-----> [ -n "$argv[1]" ]
95	95	-----> set bg $argv[1]
32	206	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
88	88	-----> set fg $argv[2]
75	752	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
95	95	-----> set_color -b $bg
168	168	-----> set_color $current_bg
98	98	-----> echo -n "$segment_separator "
87	87	-----> set_color -b $bg
82	82	-----> set_color $fg
94	94	----> set current_bg $argv[1]
33	214	----> if [ -n "$argv[3]" ]...
86	86	-----> [ -n "$argv[3]" ]
95	95	-----> echo -n -s $argv[3] " "
203	55338	-> __exists svn
55135	55135	--> command -v "$name" ^/dev/null >&2
317	225666	-> and prompt_svn
93	93	--> set -l ref
45	225256	--> if command svn ls . >/dev/null 2>&1...
225211	225211	---> command svn ls . >/dev/null 2>&1
272	891	-> prompt_finish
55	448	--> if [ -n $current_bg ]...
115	115	---> [ -n $current_bg ]
95	95	---> set_color -b normal
94	94	---> set_color $current_bg
89	89	---> echo -n "$segment_separator "
71	71	--> set_color normal
100	100	--> set -g current_bg NONE
109	109	> echo $_ " "
194	281676	> __fish_pwd
281482	281482	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
101	2044	> __fish_disable_bracketed_paste ls
1943	1943	-> printf "\e[?2004l"
2068	2068	> echo $_ " "
2030	167668	> __fish_pwd
165638	165638	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2263	484046	> ls
2276	2276	-> set -l param --color=auto
61	238363	-> if isatty 1...
3356	238164	--> isatty 1
82	82	---> set -l options 'h/help'
2068	2068	---> argparse -n isatty $options -- $argv
39	134861	---> if set -q _flag_help...
134822	134822	----> set -q _flag_help
36	116	---> if set -q argv[2]...
80	80	----> set -q argv[2]
49	49	---> set -l fd
86	147	---> switch "$argv"...
61	61	----> set fd $argv[1]
97485	97485	---> command test -t "$fd"
138	138	--> set param $param --indicator-style=classify
241144	241144	-> command ls $param $argv
128	245	> __fish_enable_bracketed_paste
117	117	-> printf "\e[?2004h"
419	157324	> fish_mode_prompt
65	156905	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
149657	149657	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
112	7183	--> switch $fish_bind_mode...
1089	7071	---> prompt_segment green black "I"
302	302	----> set -l bg
96	96	----> set -l fg
40	2566	----> if [ -n "$argv[1]" ]...
2411	2411	-----> [ -n "$argv[1]" ]
115	115	-----> set bg $argv[1]
34	215	----> if [ -n "$argv[2]" ]...
90	90	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
59	2488	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
2113	2113	-----> set_color -b $bg
91	91	-----> set_color $fg
75	75	-----> echo -n " "
98	98	----> set current_bg $argv[1]
34	217	----> if [ -n "$argv[3]" ]...
87	87	-----> [ -n "$argv[3]" ]
96	96	-----> echo -n -s $argv[3] " "
407	4993327	> fish_prompt
110	110	-> set -g RETVAL $status
370	416847	-> prompt_status
22	113	--> if [ $RETVAL -ne 0 ]...
91	91	---> [ $RETVAL -ne 0 ]
756	98763	--> set -l uid (id -u $USER)
98007	98007	---> id -u $USER
44	182	--> if [ $uid -eq 0 ]...
138	138	---> [ $uid -eq 0 ]
48	317419	--> if [ (jobs -l | wc -l) -gt 0 ]...
912	315124	---> [ (jobs -l | wc -l) -gt 0 ]
314212	314212	----> jobs -l | wc -l
639	2247	---> prompt_segment black cyan "⚙"
81	81	----> set -l bg
65	65	----> set -l fg
33	212	----> if [ -n "$argv[1]" ]...
90	90	-----> [ -n "$argv[1]" ]
89	89	-----> set bg $argv[1]
30	197	----> if [ -n "$argv[2]" ]...
81	81	-----> [ -n "$argv[2]" ]
86	86	-----> set fg $argv[2]
76	747	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
207	207	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
97	97	-----> set_color -b $bg
86	86	-----> set_color $current_bg
84	84	-----> echo -n "$segment_separator "
109	109	-----> set_color -b $bg
88	88	-----> set_color $fg
95	95	----> set current_bg $argv[1]
33	211	----> if [ -n "$argv[3]" ]...
87	87	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
217	136786	-> prompt_virtual_env
33	136569	--> if test "$VIRTUAL_ENV"...
136536	136536	---> test "$VIRTUAL_ENV"
482	1474	-> prompt_user
95	95	--> set -l BG 444444
77	77	--> set -l FG BCBCBC
37	820	--> if [ "$theme_display_user" = "yes" ]...
156	156	---> [ "$theme_display_user" = "yes" ]
232	536	---> get_hostname
93	93	----> set -g HOSTNAME_PROMPT ""
23	211	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
188	188	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
22	91	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
113	9914	-> prompt_dir
1227	9801	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2506	7034	---> prompt_pwd
110	110	----> set -l options 'h/help'
145	145	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
25	94	----> if set -q _flag_help...
69	69	-----> set -q _flag_help
60	60	----> set -q fish_prompt_pwd_dir_length
76	76	----> or set -l fish_prompt_pwd_dir_length 1
335	335	----> set realhome ~
1092	3427	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
2335	2335	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
39	281	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
95	95	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
147	147	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
84	84	---> set -l bg
69	69	---> set -l fg
33	215	---> if [ -n "$argv[1]" ]...
90	90	----> [ -n "$argv[1]" ]
92	92	----> set bg $argv[1]
30	201	---> if [ -n "$argv[2]" ]...
84	84	----> [ -n "$argv[2]" ]
87	87	----> set fg $argv[2]
72	670	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
147	147	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
97	97	----> set_color $current_bg
86	86	----> echo -n "$segment_separator "
85	85	----> set_color -b $bg
87	87	----> set_color $fg
92	92	---> set current_bg $argv[1]
33	209	---> if [ -n "$argv[3]" ]...
84	84	----> [ -n "$argv[3]" ]
92	92	----> echo -n -s $argv[3] " "
175	52426	-> __exists hg
52251	52251	--> command -v "$name" ^/dev/null >&2
564	1628366	-> and prompt_hg
103	103	--> set -l branch
73	73	--> set -l state
69	1627626	--> if command hg id >/dev/null 2>&1...
1627557	1627557	---> command hg id >/dev/null 2>&1
296	53125	-> __exists git
52829	52829	--> command -v "$name" ^/dev/null >&2
1112	2432088	-> and prompt_git
97	97	--> set -l ref
131	2430879	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
305213	305213	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
893	311491	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
310598	310598	----> command git symbolic-ref HEAD 2> /dev/null
35	169	---> if [ $status -gt 0 ]...
134	134	----> [ $status -gt 0 ]
139151	139151	---> set branch_symbol \uE0A0
765	134804	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
134039	134039	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
85	85	---> set -l BG PROMPT
827	392864	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
392037	392037	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
188	1144130	---> if [ "$dirty" = "" ]...
108	108	----> [ "$dirty" = "" ]
77	77	----> set BG yellow
75	75	----> set dirty ''
68	68	----> set -l empty 0
315458	315458	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
109	109	----> set -l target
125	336047	----> if [ $empty = 1 ]...
100	100	-----> [ $empty = 1 ]
93	93	-----> set target 'HEAD'
79	79	-----> set -l unstaged 0
334960	334960	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
286	286	-----> or set unstaged 1
63	404	-----> if [ $unstaged = 1 ]...
172	172	------> [ $unstaged = 1 ]
169	169	------> set dirty $dirty'●'
142	142	----> set -l staged 0
357011	357011	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
32	146	----> if [ $staged = 1 ]...
114	114	-----> [ $staged = 1 ]
43	134701	----> if [ "$dirty" = "" ]...
96	96	-----> [ "$dirty" = "" ]
134562	134562	-----> set PROMPT "$branch $dirty"
735	2841	---> prompt_segment $BG black $PROMPT
94	94	----> set -l bg
110	110	----> set -l fg
33	227	----> if [ -n "$argv[1]" ]...
99	99	-----> [ -n "$argv[1]" ]
95	95	-----> set bg $argv[1]
33	215	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
96	96	-----> set fg $argv[2]
89	766	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
114	114	-----> set_color -b $bg
86	86	-----> set_color $current_bg
88	88	-----> echo -n "$segment_separator "
106	106	-----> set_color -b $bg
134	134	-----> set_color $fg
292	292	----> set current_bg $argv[1]
86	402	----> if [ -n "$argv[3]" ]...
219	219	-----> [ -n "$argv[3]" ]
97	97	-----> echo -n -s $argv[3] " "
184	42907	-> __exists svn
42723	42723	--> command -v "$name" ^/dev/null >&2
320	217722	-> and prompt_svn
90	90	--> set -l ref
47	217312	--> if command svn ls . >/dev/null 2>&1...
217265	217265	---> command svn ls . >/dev/null 2>&1
323	1155	-> prompt_finish
75	630	--> if [ -n $current_bg ]...
201	201	---> [ -n $current_bg ]
120	120	---> set_color -b normal
126	126	---> set_color $current_bg
108	108	---> echo -n "$segment_separator "
95	95	--> set_color normal
107	107	--> set -g current_bg NONE
145	145	> echo $_ " "
228	295909	> __fish_pwd
295681	295681	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
168	3823	> __fish_disable_bracketed_paste 'fish_config '
3655	3655	-> printf "\e[?2004l"
2102	2102	> echo $_ " "
2049	150082	> __fish_pwd
148033	148033	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2982	21269589	> fish_config
3506	3552	-> source /usr/share/fish/functions/fish_config.fish
46	46	--> function fish_config --description "Launch fish's web based configuration"...
2473	2473	-> set -lx __fish_bin_dir $__fish_bin_dir
143	21260582	-> if command -sq python3...
30933	30933	--> command -sq python3
1898	1898	--> command -sq python2
21227608	21227608	--> python2 "$__fish_datadir/tools/web_config/webconfig.py" $argv
196	3859	> __fish_enable_bracketed_paste
3663	3663	-> printf "\e[?2004h"
355	172443	> fish_mode_prompt
45	172088	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
160053	160053	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
57	11990	--> switch $fish_bind_mode...
623	11933	---> prompt_segment green black "I"
2187	2187	----> set -l bg
78	78	----> set -l fg
39	2161	----> if [ -n "$argv[1]" ]...
2018	2018	-----> [ -n "$argv[1]" ]
104	104	-----> set bg $argv[1]
34	215	----> if [ -n "$argv[2]" ]...
90	90	-----> [ -n "$argv[2]" ]
91	91	-----> set fg $argv[2]
95	6297	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
154	154	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
3547	3547	-----> set_color -b $bg
130	130	-----> set_color $fg
2371	2371	-----> echo -n " "
138	138	----> set current_bg $argv[1]
35	234	----> if [ -n "$argv[3]" ]...
110	110	-----> [ -n "$argv[3]" ]
89	89	-----> echo -n -s $argv[3] " "
426	5598613	> fish_prompt
111	111	-> set -g RETVAL $status
355	442090	-> prompt_status
22	109	--> if [ $RETVAL -ne 0 ]...
87	87	---> [ $RETVAL -ne 0 ]
876	103178	--> set -l uid (id -u $USER)
102302	102302	---> id -u $USER
46	288	--> if [ $uid -eq 0 ]...
242	242	---> [ $uid -eq 0 ]
44	338160	--> if [ (jobs -l | wc -l) -gt 0 ]...
1000	335500	---> [ (jobs -l | wc -l) -gt 0 ]
334500	334500	----> jobs -l | wc -l
931	2616	---> prompt_segment black cyan "⚙"
125	125	----> set -l bg
112	112	----> set -l fg
39	255	----> if [ -n "$argv[1]" ]...
115	115	-----> [ -n "$argv[1]" ]
101	101	-----> set bg $argv[1]
34	214	----> if [ -n "$argv[2]" ]...
88	88	-----> [ -n "$argv[2]" ]
92	92	-----> set fg $argv[2]
74	675	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
149	149	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
107	107	-----> set_color -b $bg
86	86	-----> set_color $current_bg
93	93	-----> echo -n "$segment_separator "
84	84	-----> set_color -b $bg
82	82	-----> set_color $fg
95	95	----> set current_bg $argv[1]
33	209	----> if [ -n "$argv[3]" ]...
85	85	-----> [ -n "$argv[3]" ]
91	91	-----> echo -n -s $argv[3] " "
161	144304	-> prompt_virtual_env
31	144143	--> if test "$VIRTUAL_ENV"...
144112	144112	---> test "$VIRTUAL_ENV"
479	1405	-> prompt_user
91	91	--> set -l BG 444444
75	75	--> set -l FG BCBCBC
37	760	--> if [ "$theme_display_user" = "yes" ]...
106	106	---> [ "$theme_display_user" = "yes" ]
229	527	---> get_hostname
88	88	----> set -g HOSTNAME_PROMPT ""
23	210	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
187	187	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
21	90	---> if [ $HOSTNAME_PROMPT ]...
69	69	----> [ $HOSTNAME_PROMPT ]
129	12598	-> prompt_dir
1247	12469	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
2453	9577	---> prompt_pwd
116	116	----> set -l options 'h/help'
2125	2125	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
26	96	----> if set -q _flag_help...
70	70	-----> set -q _flag_help
69	69	----> set -q fish_prompt_pwd_dir_length
80	80	----> or set -l fish_prompt_pwd_dir_length 1
313	313	----> set realhome ~
823	4007	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
3184	3184	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
44	318	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
125	125	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
149	149	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
81	81	---> set -l bg
67	67	---> set -l fg
32	207	---> if [ -n "$argv[1]" ]...
88	88	----> [ -n "$argv[1]" ]
87	87	----> set bg $argv[1]
30	203	---> if [ -n "$argv[2]" ]...
87	87	----> [ -n "$argv[2]" ]
86	86	----> set fg $argv[2]
71	638	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
144	144	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
92	92	----> set_color -b $bg
84	84	----> set_color $current_bg
82	82	----> echo -n "$segment_separator "
82	82	----> set_color -b $bg
83	83	----> set_color $fg
115	115	---> set current_bg $argv[1]
59	334	---> if [ -n "$argv[3]" ]...
122	122	----> [ -n "$argv[3]" ]
153	153	----> echo -n -s $argv[3] " "
225	55768	-> __exists hg
55543	55543	--> command -v "$name" ^/dev/null >&2
523	1872332	-> and prompt_hg
94	94	--> set -l branch
74	74	--> set -l state
59	1871641	--> if command hg id >/dev/null 2>&1...
1871582	1871582	---> command hg id >/dev/null 2>&1
236	63471	-> __exists git
63235	63235	--> command -v "$name" ^/dev/null >&2
1278	2695400	-> and prompt_git
147	147	--> set -l ref
153	2693975	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
307142	307142	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
1378	459570	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
458192	458192	----> command git symbolic-ref HEAD 2> /dev/null
39	184	---> if [ $status -gt 0 ]...
145	145	----> [ $status -gt 0 ]
166329	166329	---> set branch_symbol \uE0A0
851	143883	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
143032	143032	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
124	124	---> set -l BG PROMPT
1025	392143	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
391118	391118	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
246	1220744	---> if [ "$dirty" = "" ]...
158	158	----> [ "$dirty" = "" ]
82	82	----> set BG yellow
116	116	----> set dirty ''
71	71	----> set -l empty 0
356088	356088	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
142	142	----> set -l target
136	341498	----> if [ $empty = 1 ]...
139	139	-----> [ $empty = 1 ]
128	128	-----> set target 'HEAD'
105	105	-----> set -l unstaged 0
340502	340502	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
148	148	-----> or set unstaged 1
59	340	-----> if [ $unstaged = 1 ]...
129	129	------> [ $unstaged = 1 ]
152	152	------> set dirty $dirty'●'
158	158	----> set -l staged 0
376123	376123	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
39	187	----> if [ $staged = 1 ]...
148	148	-----> [ $staged = 1 ]
75	145875	----> if [ "$dirty" = "" ]...
138	138	-----> [ "$dirty" = "" ]
145662	145662	-----> set PROMPT "$branch $dirty"
1311	3703	---> prompt_segment $BG black $PROMPT
176	176	----> set -l bg
113	113	----> set -l fg
51	343	----> if [ -n "$argv[1]" ]...
151	151	-----> [ -n "$argv[1]" ]
141	141	-----> set bg $argv[1]
46	318	----> if [ -n "$argv[2]" ]...
133	133	-----> [ -n "$argv[2]" ]
139	139	-----> set fg $argv[2]
103	986	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
221	221	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
142	142	-----> set_color -b $bg
142	142	-----> set_color $current_bg
145	145	-----> echo -n "$segment_separator "
117	117	-----> set_color -b $bg
116	116	-----> set_color $fg
136	136	----> set current_bg $argv[1]
49	320	----> if [ -n "$argv[3]" ]...
128	128	-----> [ -n "$argv[3]" ]
143	143	-----> echo -n -s $argv[3] " "
428	53652	-> __exists svn
53224	53224	--> command -v "$name" ^/dev/null >&2
651	256170	-> and prompt_svn
171	171	--> set -l ref
54	255348	--> if command svn ls . >/dev/null 2>&1...
255294	255294	---> command svn ls . >/dev/null 2>&1
275	886	-> prompt_finish
62	453	--> if [ -n $current_bg ]...
108	108	---> [ -n $current_bg ]
96	96	---> set_color -b normal
95	95	---> set_color $current_bg
92	92	---> echo -n "$segment_separator "
73	73	--> set_color normal
85	85	--> set -g current_bg NONE
188	188	> echo $_ " "
2471	310832	> __fish_pwd
308361	308361	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
333	2521	> fish_mode_prompt
38	2188	-> if test "$fish_key_bindings" = "fish_vi_key_bindings"...
140	140	--> test "$fish_key_bindings" = "fish_vi_key_bindings"
54	2010	--> switch $fish_bind_mode...
615	1956	---> prompt_segment green black "I"
88	88	----> set -l bg
69	69	----> set -l fg
34	224	----> if [ -n "$argv[1]" ]...
97	97	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
32	213	----> if [ -n "$argv[2]" ]...
87	87	-----> [ -n "$argv[2]" ]
94	94	-----> set fg $argv[2]
52	451	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
93	93	-----> set_color -b $bg
83	83	-----> set_color $fg
73	73	-----> echo -n " "
92	92	----> set current_bg $argv[1]
34	204	----> if [ -n "$argv[3]" ]...
82	82	-----> [ -n "$argv[3]" ]
88	88	-----> echo -n -s $argv[3] " "
391	4932419	> fish_prompt
106	106	-> set -g RETVAL $status
342	415423	-> prompt_status
22	114	--> if [ $RETVAL -ne 0 ]...
92	92	---> [ $RETVAL -ne 0 ]
677	102375	--> set -l uid (id -u $USER)
101698	101698	---> id -u $USER
28	127	--> if [ $uid -eq 0 ]...
99	99	---> [ $uid -eq 0 ]
36	312465	--> if [ (jobs -l | wc -l) -gt 0 ]...
901	310122	---> [ (jobs -l | wc -l) -gt 0 ]
309221	309221	----> jobs -l | wc -l
693	2307	---> prompt_segment black cyan "⚙"
89	89	----> set -l bg
69	69	----> set -l fg
33	214	----> if [ -n "$argv[1]" ]...
91	91	-----> [ -n "$argv[1]" ]
90	90	-----> set bg $argv[1]
36	283	----> if [ -n "$argv[2]" ]...
120	120	-----> [ -n "$argv[2]" ]
127	127	-----> set fg $argv[2]
72	629	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
150	150	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
90	90	-----> set_color -b $bg
82	82	-----> set_color $current_bg
82	82	-----> echo -n "$segment_separator "
75	75	-----> set_color -b $bg
78	78	-----> set_color $fg
89	89	----> set current_bg $argv[1]
32	241	----> if [ -n "$argv[3]" ]...
119	119	-----> [ -n "$argv[3]" ]
90	90	-----> echo -n -s $argv[3] " "
159	133029	-> prompt_virtual_env
28	132870	--> if test "$VIRTUAL_ENV"...
132842	132842	---> test "$VIRTUAL_ENV"
480	1423	-> prompt_user
89	89	--> set -l BG 444444
72	72	--> set -l FG BCBCBC
35	782	--> if [ "$theme_display_user" = "yes" ]...
124	124	---> [ "$theme_display_user" = "yes" ]
224	525	---> get_hostname
89	89	----> set -g HOSTNAME_PROMPT ""
24	212	----> if [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]...
188	188	-----> [ "$theme_hostname" = "always" -o \( "$theme_hostname" != "never" -a -n "$SSH_CLIENT" \) ]
23	98	---> if [ $HOSTNAME_PROMPT ]...
75	75	----> [ $HOSTNAME_PROMPT ]
114	5184	-> prompt_dir
1167	5070	--> prompt_segment 1C1C1C FFFFFF (prompt_pwd)
512	2354	---> prompt_pwd
102	102	----> set -l options 'h/help'
121	121	----> argparse -n prompt_pwd --max-args=0 $options -- $argv
23	85	----> if set -q _flag_help...
62	62	-----> set -q _flag_help
58	58	----> set -q fish_prompt_pwd_dir_length
75	75	----> or set -l fish_prompt_pwd_dir_length 1
336	336	----> set realhome ~
637	799	----> set -l tmp (string replace -r '^'"$realhome"'($|/)' '~$1' $PWD)
162	162	-----> string replace -r '^'"$realhome"'($|/)' '~$1' $PWD
36	266	----> if [ $fish_prompt_pwd_dir_length -eq 0 ]...
87	87	-----> [ $fish_prompt_pwd_dir_length -eq 0 ]
143	143	-----> string replace -ar '(\.?[^/]{'"$fish_prompt_pwd_dir_length"'})[^/]*/' '$1/' $tmp
78	78	---> set -l bg
67	67	---> set -l fg
39	221	---> if [ -n "$argv[1]" ]...
91	91	----> [ -n "$argv[1]" ]
91	91	----> set bg $argv[1]
34	224	---> if [ -n "$argv[2]" ]...
100	100	----> [ -n "$argv[2]" ]
90	90	----> set fg $argv[2]
70	656	---> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
148	148	----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
96	96	----> set_color -b $bg
88	88	----> set_color $current_bg
84	84	----> echo -n "$segment_separator "
84	84	----> set_color -b $bg
86	86	----> set_color $fg
95	95	---> set current_bg $argv[1]
31	208	---> if [ -n "$argv[3]" ]...
85	85	----> [ -n "$argv[3]" ]
92	92	----> echo -n -s $argv[3] " "
201	55171	-> __exists hg
54970	54970	--> command -v "$name" ^/dev/null >&2
848	1660263	-> and prompt_hg
135	135	--> set -l branch
105	105	--> set -l state
60	1659175	--> if command hg id >/dev/null 2>&1...
1659115	1659115	---> command hg id >/dev/null 2>&1
315	62233	-> __exists git
61918	61918	--> command -v "$name" ^/dev/null >&2
1832	2326362	-> and prompt_git
158	158	--> set -l ref
138	2324372	--> if command git rev-parse --is-inside-work-tree >/dev/null 2>&1...
316023	316023	---> command git rev-parse --is-inside-work-tree >/dev/null 2>&1
852	318350	---> set ref (command git symbolic-ref HEAD 2> /dev/null)
317498	317498	----> command git symbolic-ref HEAD 2> /dev/null
28	128	---> if [ $status -gt 0 ]...
100	100	----> [ $status -gt 0 ]
134862	134862	---> set branch_symbol \uE0A0
806	138295	---> set -l branch (echo $ref | sed  "s-refs/heads/-$branch_symbol -")
137489	137489	----> echo $ref | sed  "s-refs/heads/-$branch_symbol -"
85	85	---> set -l BG PROMPT
893	377874	---> set -l dirty (command git status --porcelain --ignore-submodules=dirty 2> /dev/null)
376981	376981	----> command git status --porcelain --ignore-submodules=dirty 2> /dev/null
194	1036034	---> if [ "$dirty" = "" ]...
113	113	----> [ "$dirty" = "" ]
97	97	----> set BG yellow
89	89	----> set dirty ''
73	73	----> set -l empty 0
272555	272555	----> git rev-parse --quiet --verify HEAD > /dev/null ^&1
104	104	----> set -l target
100	304228	----> if [ $empty = 1 ]...
98	98	-----> [ $empty = 1 ]
88	88	-----> set target 'HEAD'
125	125	-----> set -l unstaged 0
303362	303362	-----> git diff --no-ext-diff --ignore-submodules=dirty --quiet --exit-code
144	144	-----> or set unstaged 1
50	311	-----> if [ $unstaged = 1 ]...
127	127	------> [ $unstaged = 1 ]
134	134	------> set dirty $dirty'●'
103	103	----> set -l staged 0
322805	322805	----> git diff-index --cached --quiet --exit-code --ignore-submodules=dirty $target
31	146	----> if [ $staged = 1 ]...
115	115	-----> [ $staged = 1 ]
42	135527	----> if [ "$dirty" = "" ]...
96	96	-----> [ "$dirty" = "" ]
135389	135389	-----> set PROMPT "$branch $dirty"
680	2583	---> prompt_segment $BG black $PROMPT
94	94	----> set -l bg
73	73	----> set -l fg
35	229	----> if [ -n "$argv[1]" ]...
101	101	-----> [ -n "$argv[1]" ]
93	93	-----> set bg $argv[1]
32	207	----> if [ -n "$argv[2]" ]...
86	86	-----> [ -n "$argv[2]" ]
89	89	-----> set fg $argv[2]
103	918	----> if [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]...
152	152	-----> [ "$current_bg" != 'NONE' -a "$argv[1]" != "$current_bg" ]
98	98	-----> set_color -b $bg
160	160	-----> set_color $current_bg
149	149	-----> echo -n "$segment_separator "
132	132	-----> set_color -b $bg
124	124	-----> set_color $fg
146	146	----> set current_bg $argv[1]
34	236	----> if [ -n "$argv[3]" ]...
103	103	-----> [ -n "$argv[3]" ]
99	99	-----> echo -n -s $argv[3] " "
179	46909	-> __exists svn
46730	46730	--> command -v "$name" ^/dev/null >&2
375	225052	-> and prompt_svn
107	107	--> set -l ref
43	224570	--> if command svn ls . >/dev/null 2>&1...
224527	224527	---> command svn ls . >/dev/null 2>&1
294	873	-> prompt_finish
54	430	--> if [ -n $current_bg ]...
108	108	---> [ -n $current_bg ]
92	92	---> set_color -b normal
89	89	---> set_color $current_bg
87	87	---> echo -n "$segment_separator "
69	69	--> set_color normal
80	80	--> set -g current_bg NONE
107	107	> echo $_ " "
162	273114	> __fish_pwd
272952	272952	-> pwd | sed -e 's-^/cygdrive/\(.\)/\?-\u\1:/-'
2441	144553	> up-or-search
28	2131	-> if commandline --search-mode...
2103	2103	--> commandline --search-mode
23	57	-> if commandline --paging-mode...
34	34	--> commandline --paging-mode
139707	139797	-> set lineno (commandline -L)
90	90	--> commandline -L
67	127	-> switch $lineno...
60	60	--> commandline -f history-search-backward
340	490	> up-or-search
46	150	-> if commandline --search-mode...
47	47	--> commandline --search-mode
40	40	--> commandline -f history-search-backward
17	17	--> return
340	490	> up-or-search
48	150	-> if commandline --search-mode...
45	45	--> commandline --search-mode
40	40	--> commandline -f history-search-backward
17	17	--> return
349	502	> up-or-search
45	153	-> if commandline --search-mode...
52	52	--> commandline --search-mode
39	39	--> commandline -f history-search-backward
17	17	--> return
2428	2580	> down-or-search
51	152	-> if commandline --search-mode...
47	47	--> commandline --search-mode
38	38	--> commandline -f history-search-forward
16	16	--> return
438	654	> down-or-search
65	216	-> if commandline --search-mode...
68	68	--> commandline --search-mode
64	64	--> commandline -f history-search-forward
19	19	--> return
569	846	> down-or-search
83	277	-> if commandline --search-mode...
80	80	--> commandline --search-mode
80	80	--> commandline -f history-search-forward
34	34	--> return
111	190	> __fish_disable_bracketed_paste PROCESS_EXIT 9262 0
79	79	-> printf "\e[?2004l"
